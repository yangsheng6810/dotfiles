* General Editing
  #+BEGIN_SRC emacs-lisp
    (setq undo-tree-auto-save-history t)
    ;; to allow cursor move beyond eol, and do not move back.
    (setq evil-move-beyond-eol t
          evil-move-cursor-back nil
          evil-want-fine-undo t
          evil-ex-interactive-search-highlight nil
          evil-want-Y-yank-to-eol t
          mouse-yank-at-point t)

    (setq isearch-lax-whitespace t
          isearch-regexp-lax-whitespace t
          search-whitespace-regexp "[ \t\r\n]+"
          word-wrap nil)
    ;; (setq search-whitespace-regexp "\\s-+")

    (setq-default search-invisible t)

    (setq-default evil-search-module "isearch")

    ;; set tab-width
    (setq-default tab-width 8
                  c-basic-offset 4)

    ;; turn off linum-mode for performance
    (global-linum-mode -1)
    ;; stop the behavior that evil consider all inputs done when in insert mode
    ;; as one insertion.

    ;; turn on highlight-current-line-globally
    (spacemacs/toggle-highlight-current-line-globally-on)

    (global-unset-key (kbd "M-SPC"))
    (global-set-key (kbd "M-SPC") 'set-mark-command)
    (setq ispell-extra-args '("--sug-mode=ultra")
          flyspell-issue-welcome-flag nil ;; fix flyspell problem
          ispell-dictionary "american")

    ;; to avoid lagging
    (use-package flyspell-lazy
      :ensure t
      :init (setq flyspell-lazy-extra-lazy t)
      :config (flyspell-lazy-mode 1))

    (setq delete-by-moving-to-trash t)
  #+END_SRC

** Rectangle editing
   #+BEGIN_SRC emacs-lisp
     ;; hydra for rectangle editing
     (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                          :color pink
                                          :hint nil
                                          :post (deactivate-mark))
       "
       ^_k_^       _w_ copy      _o_pen       _N_umber-lines            |\\     -,,,--,,_
     _h_   _l_     _p_aste       _t_ype       _e_xchange-point          /,`.-'`'   ..  \-;;,_
       ^_j_^       _d_ kill      _c_lear      _r_eset-region-mark      |,4-  ) )_   .;.(  `'-'
     ^^^^          _u_ndo        _q_uit       ^ ^                     '---''(./..)-'(_\_)
     "
       ("k" rectangle-previous-line)
       ("j" rectangle-next-line)
       ("h" rectangle-backward-char)
       ("l" rectangle-forward-char)
       ("d" kill-rectangle)                    ;; C-x r k
       ("p" yank-rectangle)                    ;; C-x r y
       ("w" copy-rectangle-as-kill)            ;; C-x r M-w
       ("o" open-rectangle)                    ;; C-x r o
       ("t" string-rectangle)                  ;; C-x r t
       ("c" clear-rectangle)                   ;; C-x r c
       ("e" rectangle-exchange-point-and-mark) ;; C-x C-x
       ("N" rectangle-number-lines)            ;; C-x r N
       ("r" (if (region-active-p)
                (deactivate-mark)
              (rectangle-mark-mode 1)))
       ("u" undo nil)
       ("q" nil))      ;; quit
   #+END_SRC

** evil-smartparens
   Add some keybindings for smartparens under evil
   #+BEGIN_SRC emacs-lisp
   (use-package 'evil-bind-smartparens)
   #+END_SRC

* Display
  #+BEGIN_SRC emacs-lisp
    ;; initial window
    (setq initial-frame-alist
          '(
            (width . 100) ; character
            (height . 54) ; lines
            ))

    ;; default/sebsequent window
    (setq default-frame-alist
          '(
            (width . 100) ; character
            (height . 52) ; lines
            ))
    ;; use 24hr format
    (setq display-time-24hr-format t)

    (setq use-default-font-for-symbols nil)

    ;; Colorize strings that represent colors.
    (add-hook 'prog-mode-hook 'rainbow-mode)

    (unless (fboundp 'spacemacs/diminish-undo)
      (defun spacemacs/diminish-undo (mode)
        "Restore the diminished lighter."
        (interactive
         (list (read (completing-read
                      "Restore what diminished mode: "
                      (cons (list "diminished-modes")
                            (mapcar (lambda (x) (list (symbol-name (car x))))
                                    diminished-mode-alist))
                      nil t nil 'diminish-history-symbols))))
        ;; remove the `mode' entry from spacemacs own list
        (setq spacemacs--diminished-minor-modes
              (delq nil (mapcar (lambda (x) (unless (eq (car x) mode) x))
                                spacemacs--diminished-minor-modes)))
        (diminish-undo mode))
      )

    ;; hide common minor modes
    ;; need to first remove mode from spacemacs--diminished-minor-modes
    (mapcar '(lambda (mode)
               (spacemacs/diminish-undo mode)
               (diminish mode))
            '(which-key-mode
              smartparens-mode
              ;; company-mode
              ))
  #+END_SRC
  
* Ergonomic keybindings
  #+BEGIN_SRC emacs-lisp
    ;; Ergonomic keybinding M-<hjkl>
    (mapc (lambda (keymap)
            ;; Normal-mode, hjkl
            (define-key keymap (kbd "M-h") 'evil-backward-char)
            (define-key keymap (kbd "M-l") 'evil-forward-char)
            (define-key keymap (kbd "M-k") 'evil-previous-visual-line)
            (define-key keymap (kbd "M-j") 'evil-next-visual-line)

            ;; Move to beginning/ending of line
            (define-key keymap (kbd "M-H") 'move-beginning-of-line)
            (define-key keymap (kbd "M-L") 'move-end-of-line)
            (define-key keymap (kbd "C-a") 'move-beginning-of-line)
            (define-key keymap (kbd "C-e") 'move-end-of-line)
            ;; Scroll up/down
            (define-key keymap (kbd "M-J") 'evil-scroll-down)
            (define-key keymap (kbd "M-K") 'evil-scroll-up)
            ;; delete-char
            (define-key keymap (kbd "C-d") 'delete-char)
            )
          `(,evil-insert-state-map
            ,evil-normal-state-map))

    ;; fix some keybinding problems
    ;; fix for js2-mode
    (use-package js2-mode
      :bind (:map js2-mode-map
                  ("M-j" . nil)))
    (with-eval-after-load 'org
      (add-hook 'evil-org-mode-hook
                (lambda ()
                  (mapc (lambda (state)
                          (evil-define-key state evil-org-mode-map
                            (kbd "M-h") nil
                            (kbd "M-j") nil
                            (kbd "M-k") nil
                            (kbd "M-l") nil
                            (kbd "M-H") nil
                            (kbd "M-J") nil
                            (kbd "M-K") nil
                            (kbd "M-L") nil
                            ;; actually unset all the following
                            ;; (kbd "M-h") 'org-metaleft
                            ;; (kbd "M-j") 'org-metadown
                            ;; (kbd "M-k") 'org-metaup
                            ;; (kbd "M-l") 'org-metaright
                            ;; (kbd "M-H") 'org-shiftmetaleft
                            ;; (kbd "M-J") 'org-shiftmetadown
                            ;; (kbd "M-K") 'org-shiftmetaup
                            ;; (kbd "M-L") 'org-shiftmetaright
                            ))
                        '(normal insert)))))
  #+END_SRC
  
* org-mode
  #+BEGIN_SRC emacs-lisp
    ;; wrap in with-eval-after-load, see
    ;; http://spacemacs.org/layers/+emacs/org/README.html#important-note
    (with-eval-after-load 'org
      (setq
       ;; place tags directly after headline text, with only one space in between
       org-tags-column 0
       ;; Highlight latex text in org mode
       org-highlight-latex-and-related '(latex script entities)
       org-startup-truncated nil
       org-todo-keywords
       '((sequence "TODO(t)" "PUSHED(p)" "NEXT(n)" "INACTIVE(i@/!)" "WAIT(w@/!)" "|" "DONE(d!)")
         (sequence "|" "CANCLED(c@)"))
       org-startup-truncated nil
       org-M-RET-may-split-line '((default))
       org-extend-today-until 3 ;; before 3 a.m. is still considered "today"
       )
      (org-add-link-type
       "span" #'ignore ; not an 'openable' link
       #'(lambda (class desc format)
           (pcase format
             (`html (format "<span class=\"%s\">%s</span>"
                            (jw/html-escape-attribute class)
                            (or desc "")))
             (_ (or desc "")))))
      ;; actually insert space with pangu-spacing for org-mode, to fix indentation
      ;; in table
      (set (make-local-variable 'pangu-spacing-real-insert-separtor) t)
      (add-to-list 'org-babel-load-languages '(latex . t))
      )
  #+END_SRC

** org-pdfview
   #+BEGIN_SRC emacs-lisp
   (use-package org-pdfview
     :ensure t
     :after (org)
     :config
     (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link))))
     (add-hook
      'pdf-view-mode-hook
      (lambda ()
        (pdf-view-set-slice-from-bounding-box)
        (pdf-view-fit-width-to-window)))
     )
   #+END_SRC
   
** org-gcal
   #+BEGIN_SRC emacs-lisp
   (when (string= system-name "carbon")
     (use-package org-gcal
       :init
       (setq org-gcal-dir "~/.emacs.d/private/org-gcal/")
       :config
       (setq
        org-gcal-file-alist '(("yangsheng6810@gmail.com" .  "~/Documents/org/gcal.org")))
       ;; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync)))
       ;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
       )
     )
   #+END_SRC

** org-journal
   #+BEGIN_SRC emacs-lisp
     (setq org-journal-dir "~/Documents/org/journal/"
           org-journal-date-format "%x %A")
     (defun org-journal-find-location ()
       ;; Open today's journal, but specify a non-nil prefix argument in order to
       ;; inhibit inserting the heading; org-capture will insert the heading.
       (org-journal-new-entry t)
       ;; Position point on the journal's top-level heading so that org-capture
       ;; will add the new entry as a child entry.
       (goto-char (point-min)))

     (set-keymap-parent spacemacs-org-journal-mode-map spacemacs-org-mode-map)
     (set-keymap-parent spacemacs-org-journal-mode-map-prefix spacemacs-org-mode-map-prefix)
     (set-keymap-parent spacemacs-org-journal-mode-map-root-map spacemacs-org-mode-map-root-map)
   #+END_SRC
* LaTeX
  #+BEGIN_SRC emacs-lisp
    ;; LaTeX hook
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (turn-on-reftex)
                (add-to-list 'TeX-command-list '
                             ("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
                (setq TeX-auto-save t)
                (LaTeX-math-mode)
                (imenu-add-menubar-index)
                ;; (setq LaTeX-command-style
                ;;       (quote (("\\`fontspec\\'" "xelatex ")
                ;;               ("" "%(PDF)%(latex) %S%(PDFout)"))))
                ;; (custom-set-variables
                ;;     '(preview-fast-dvips-command "pdftops -origpagesizes %s.pdf %m/preview.ps"))
                (setq TeX-save-query nil)
                (setq TeX-parse-self t)
                (setq TeX-output-view-style
                      (cons '("^pdf$" "." "evince  %o ") TeX-output-view-style))
                ;; (set-default 'preview-default-document-pt 12)
                ;; (set-default 'preview-scale-function 1.2)
                ;; (setq preview-required-option-list
                ;; 	  (quote ("active" "tightpage" "auctex" "xetex" (preview-preserve-counters "counters"))))
                (setq preview-default-option-list
                      (quote ("displaymath" "floats" "graphics" "textmath" "showlabels" "sections" )))
                (TeX-engine-set "default")
                (LaTeX-add-environments
                 "definition"
                 "example"
                 "tikzpicture"
                 "corallary"
                 "align*"
                 "theorem"
                 "proof"
                 "lemma"
                 ;; '("tikzpicture" LaTeX-env-tikz)
                 )
                ;; enable TeX-fold-buffer
                ;; (add-hook 'find-file-hook 'TeX-fold-buffer t t)
                (setq preview-auto-cache-preamble t)
                (rainbow-delimiters-mode-enable)
                (setq fill-column 10000)
                ;; (turn-off-auto-fill)
                ))
  #+END_SRC

* Python
  #+BEGIN_SRC emacs-lisp
   (setq-default python-indent 4)
   ;; bug fix for python-mode
   (setq python-shell-native-complete nil)
   (use-package company-jedi             ;;; company-mode completion back-end for Python JEDI
     :ensure t
     :config
     (add-hook 'python-mode-hook 'jedi:setup)
     (setq jedi:complete-on-dot t)
     (setq jedi:use-shortcuts t)
     (defun config/enable-company-jedi ()
       (add-to-list 'company-backends 'company-jedi))
     (add-hook 'python-mode-hook 'config/enable-company-jedi))
  #+END_SRC

* Git
  #+BEGIN_SRC emacs-lisp
   (setq-default git-magit-status-fullscreen t)
   (add-hook 'magit-diff-mode-hook
             (lambda ()
               (visual-line-mode 1)))
   (add-hook 'magit-status-mode-hook
             (lambda ()
               (visual-line-mode 1)))
    (setq magit-diff-refine-hunk 'all)
    (global-git-commit-mode t)
  #+END_SRC
  
* web-mode
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'web-mode
      (setq
       web-mode-enable-auto-closing t
       web-mode-enable-auto-indentation t
       web-mode-enable-auto-opening t
       web-mode-enable-auto-pairing t
       web-mode-enable-auto-quoting t
       web-mode-enable-css-colorization t
       ;; remove emmet from company-mode backends in web-mode
       company-web-html-emmet-enable nil
       company-minimum-prefix-length 2
       )
      (defun try-emmet-expand-line (args)
        (interactive "P")
        (when emmet-mode
          (emmet-expand-line args)))
      ;; add emmet to hippie-expand backends
      (add-to-list 'hippie-expand-try-functions-list
                   'try-emmet-expand-line)
      )

    (defun jw/html-escape-attribute (value)
      "Entity-escape VALUE and wrap it in quotes."
      ;; http://www.w3.org/TR/2009/WD-html5-20090212/serializing-html-fragments.html
      ;;
      ;; "Escaping a string... consists of replacing any occurrences of
      ;; the "&" character by the string "&amp;", any occurrences of the
      ;; U+00A0 NO-BREAK SPACE character by the string "&nbsp;", and, if
      ;; the algorithm was invoked in the attribute mode, any occurrences
      ;; of the """ character by the string "&quot;"..."
      (let* ((value (replace-regexp-in-string "&" "&amp;" value))
             (value (replace-regexp-in-string "\u00a0" "&nbsp;" value))
             (value (replace-regexp-in-string "\"" "&quot;" value)))
        value))
  #+END_SRC

* Search
  #+BEGIN_SRC emacs-lisp
    (defengine dictcn
      "http://dict.cn/%s"
      :docstring "Search Dict.cn")
    ;; use ivy--regex-plus for ivy search
    (setq ivy-re-builders-alist
          '((t . ivy--regex-plus)))

  #+END_SRC

* buffer-management
  #+BEGIN_SRC emacs-lisp
   (use-package ivy-rich
     :config (progn
               (ivy-set-display-transformer 'ivy-switch-buffer 'ivy-rich-switch-buffer-transformer)
               (setq ivy-virtual-abbreviate 'full
                     ivy-rich-switch-buffer-align-virtual-buffer t
                     ivy-rich-path-style 'abbrev)))
  #+END_SRC
  
* Email
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist
                 '("\\.eml\\'" . (lambda ()
                                   ;; will add something special
                                   (markdown-mode)
                                   )))
  #+END_SRC

* Ranger & Dired  
  #+BEGIN_SRC emacs-lisp
    (use-package ranger
      :bind (:map ranger-mode-map
                  ("C-h" . nil)) ;; C-h was set to toggle dotfiles
      :config
      (progn
        (setq ranger-show-dotfiles nil ;; default not show dotfiles at startup, toggled by zh
              ranger-cleanup-on-disable t ;; kill the buffers when we finish
              )))

    (with-eval-after-load 'dired
      (defun yang-dired-mode-setup ()
        "to be run as hook for `dired-mode'."
        (dired-hide-details-mode 1))
      (add-hook 'dired-mode-hook 'yang-dired-mode-setup)

      ;; use RET to open dir in same buffer
      (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-find-file
      (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory

      (setq dired-recursive-copies 'always)
      )

    (use-package dired-x
      :config
      (progn
        (add-to-list 'dired-omit-extensions ".~undo-tree~")
        (setq-default dired-omit-mode t)))
  #+END_SRC

* Shell
** Eshell  
   #+BEGIN_SRC emacs-lisp
     (setq eshell-cmpl-cycle-completions nil)
     ;; Nicer completion for eshell
     ;; From https://emacs.stackexchange.com/a/27871
     ;; Also we have to put it into shell, because eshell resets eshell-mode-map
     ;; when initialized
     (add-hook 'eshell-mode-hook
               (lambda ()
                 ;; some alias
                 (eshell/alias "ee" "find-file $1")
                 (eshell/alias "ff" "find-file $1")
                 (eshell/alias "d" "dired $1")
                 ;; git status
                 (defun eshell/gst (&rest args)
                   (magit-status (pop args) nil)
                   (eshell/echo))   ;; The echo command suppresses output
                 ;; define clear
                 (defun eshell/clear ()
                   "Clear the eshell buffer."
                   (let ((inhibit-read-only t))
                     (erase-buffer)
                     (eshell-send-input)))
                 (define-key eshell-mode-map (kbd "<tab>")
                   (lambda () (interactive) (pcomplete-std-complete)))))
   #+END_SRC

** multi-term
   #+BEGIN_SRC emacs-lisp
     (setq term-buffer-maximum-size 10000)
     (use-package eterm-256color
       :config
       (add-hook 'term-mode-hook #'eterm-256color-mode))
   #+END_SRC

* pdf-tools
  #+BEGIN_SRC emacs-lisp
   ;; copied from http://pragmaticemacs.com/emacs/even-more-pdf-tools-tweaks/
   (use-package pdf-tools
     :ensure t
     :bind (:map pdf-view-mode-map
                 ("C-s" . isearch-forward))
     :config
     (setq-default pdf-view-display-size 'fit-page)
     ;; automatically annotate highlights
     (setq pdf-annot-activate-created-annotations t)
     ;; more fine-grained zooming
     (setq pdf-view-resize-factor 1.1)
     )
  #+END_SRC

* doc-view
  #+BEGIN_SRC emacs-lisp
    ;; doc-view
    (use-package doc-view
      :config (setq doc-view-resolution 144)
      :bind (:map doc-view-mode-map
                  ("h" . image-backward-hscroll)
                  ("l" . image-forward-hscroll)
                  ("J" . doc-view-next-page)
                  ("K" . 'doc-view-previous-page)
                  ))

    (add-hook 'doc-view-mode-hook 'auto-revert-mode)
  #+END_SRC

* HiDPI
  #+BEGIN_SRC emacs-lisp
   (cond ((string-equal system-name "carbon") ; thinkpad X1 carbon
          (progn
            (with-eval-after-load 'org
              (plist-put org-format-latex-options :scale 2.0))
            (setq
             preview-scale-function 2)
            ;; for GUI called by emacs
            (setenv "GDK_SCALE" "2")
            (setenv "GDK_DPI_SCALE" "0.5")
            )))
  #+END_SRC
 
* Lunar Calendar
  #+BEGIN_SRC emacs-lisp
   ;; enable chinese lunar anniversary
   (use-package cal-china
     :config
     (defun my--diary-chinese-anniversary (lunar-month lunar-day &optional year mark)
       (if year
           (let* ((d-date (diary-make-date lunar-month lunar-day year))
                  (a-date (calendar-absolute-from-gregorian d-date))
                  (c-date (calendar-chinese-from-absolute a-date))
                  (cycle (car c-date))
                  (yy (cadr c-date))
                  (y (+ (* 100 cycle) yy)))
             (diary-chinese-anniversary lunar-month lunar-day y mark))
         (diary-chinese-anniversary lunar-month lunar-day year mark)))
     )
  #+END_SRC

* Chinese
** alignment
   #+BEGIN_SRC emacs-lisp
     ;; set up mono font for chinese
     (use-package cnfonts
       :init (setq
              cnfonts--current-profile "profile1"
              cnfonts-directory "~/.emacs.d/private/chinese-fonts-setup/"))

     ;; set char width for certain characters
     (defun blaenk/set-char-widths (alist)
       (while (char-table-parent char-width-table)
         (setq char-width-table (char-table-parent char-width-table)))
       (dolist (pair alist)
         (let ((width (car pair))
               (chars (cdr pair))
               (table (make-char-table nil)))
           (dolist (char chars)
             (set-char-table-range table char width))
           (optimize-char-table table)
           (set-char-table-parent table char-width-table)
           (setq char-width-table table))))

     ;; fix char width
     (blaenk/set-char-widths
      `((1 . (,(string-to-char "“")
              ,(string-to-char "”")
              ,(string-to-char "…")
              ))))

     (defun my-after-frame-function ()
       (message "in my-after-frame-function")
       ;; 让 chinese-fonts-setup 随着 emacs 自动生效。
       (cnfonts-enable)
       ;; 让 spacemacs mode-line 中的 Unicode 图标正确显示。
       (cnfonts-set-spacemacs-fallback-fonts)
       ;; (when window-system (set-frame-size (selected-frame) 120 48))
       )

     (defun my-reload-fonts (plist)
       (message "in new my-after-frame-function")
       (cnfonts-set-font-with-saved-step)
       )

     (my-after-frame-function)

     ;; (add-hook 'after-make-frame-functions
     ;;           '(lambda (f)
     ;;              (my-after-frame-function)
     ;;              ))
     ;; (add-hook 'window-setup-hook
     ;;           'my-after-frame-function)
     (add-function :after (symbol-function 'spacemacs/set-default-font) #'my-reload-fonts)
   #+END_SRC
** ace-pinyin
   #+BEGIN_SRC emacs-lisp
    (use-package ace-pinyin
      :config
      (setq ace-pinyin--jump-word-timeout 0.8)
      (spacemacs/set-leader-keys "j j" 'ace-pinyin-jump-word)
      )
   #+END_SRC

* Browser
** Using emacs to edit text area
   #+BEGIN_SRC emacs-lisp
    ;; check if the port for atomic-chrome is used or not
    ;; copied from https://github.com/dakrone/atomic-chrome/commit/79a5c17eef37b1e41590fc366cd16f2c4f3d46e4
    ;; append yang to avoid messing up with naming space
    (defun yang-atomic-chrome-server-running-p ()
     "Returns `t' if the atomic-chrome server is currently running,
   `nil' otherwise."
     (let ((retval nil))
       (condition-case ex
           (progn
             (delete-process
              (make-network-process
               :name "atomic-client-test" :host "localhost"
               :noquery t :service "64292"))
             (setq retval t))
         ('error nil))
       retval))
    ;; turn on atomic-chrome
    (unless (yang-atomic-chrome-server-running-p)
      (atomic-chrome-start-server))
   #+END_SRC

* Bug-fixes
  #+BEGIN_SRC emacs-lisp
    ;; modeline optimization/workarounds
    (when (fboundp 'spacemacs/toggle-mode-line-responsive-off)
      (spacemacs/toggle-mode-line-responsive-off))

     ;; ipython cannot find gurobi license
     (setenv "GRB_LICENSE_FILE" (concat (getenv "HOME") "/.config/gurobi.lic"))
  #+END_SRC

* Monitor processes
  =proced= is a major mode like htop. To sort, first press =s=, then =c/m= for cpu/memory
  #+BEGIN_SRC emacs-lisp
    (add-hook 'proced-mode-hook
              (lambda ()
                (proced-toggle-auto-update)))

  #+END_SRC

* elfeed
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'elfeed-search
      (define-key elfeed-search-mode-map (kbd "m") 'elfeed-toggle-star)
      (defalias 'elfeed-toggle-star
        (elfeed-expose #'elfeed-search-toggle-all 'star)))

  #+END_SRC
  
* Helm (legacy)
  #+BEGIN_SRC emacs-lisp
   ;; fix problem with open-junk-file
   (defun remove-helm-functions ()
     (remove-hook 'post-command-hook 'helm--maybe-update-keymap)
     ;; 2015-07-01 The following function was also remaining in the hook.
     ;; This hook was added 14 days ago coinciding breakage.
     ;; https://github.com/emacs-helm/helm/commit/ff7c54d39501d894fdb06e049828b291327540e6
     (remove-hook 'post-command-hook 'helm--update-header-line))



   ;;
   ;; 2015-07-01
   ;; This function itself is not remaining in the post-command-hook?
   ;;
   ;; Candidate hooks for making this happen.
   ;; server-done-hook	Hook run when done editing a buffer for the Emacs server.
   ;; server-mode-hook	Hook run after entering or leaving `server-mode'.
   ;; server-switch-hook	Hook run when switching to a buffer for the Emacs server.
   ;; server-visit-hook	Hook run when visiting a file for the Emacs server.
   ;;
   ;; (add-hook 'server-done-hook   'remove-helm--maybe-update-keymap)
   ;; (add-hook 'server-mode-hook   'remove-helm--maybe-update-keymap)
   ;; (add-hook 'server-switch-hook 'remove-helm--maybe-update-keymap)
   ;; (add-hook 'server-visit-hook  'remove-helm--maybe-update-keymap)
   ;;
   ;; This hacky universal solution works.
   ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Command-Overview.html#Command-Overview
   ;; (add-hook 'post-command-hook 'remove-helm-functions)
   ;; 2015-07-01 Changed to the following.
   (add-hook 'pre-command-hook 'remove-helm-functions)
  #+END_SRC
  
* to be structured
#+BEGIN_SRC emacs-lisp
   ;; (spacemacs/toggle-truncate-lines-on)
   ;; (defadvice preceding-sexp (around evil)
   ;;   "In normal-state, last sexp ends at point."
   ;;   (if (evil-normal-state-p)
   ;;       (save-excursion
   ;;         (unless (or (eobp) (eolp)) (forward-char))
   ;;         ad-do-it)
   ;;     ad-do-it))
   ;; (defadvice pp-last-sexp (around evil)
   ;;   "In normal-state, last sexp ends at point."
   ;;   (if (evil-normal-state-p)
   ;;       (save-excursion
   ;;         (unless (or (eobp) (eolp)) (forward-char))
   ;;         ad-do-it)
   ;;     ad-do-it))
   ;; to search across line breaks

   ;; move most custom variables here
   (setq
    paradox-automatically-star nil
    ;; preview-default-option-list '("displaymath"
    ;;                               "floats"
    ;;                               "graphics"
    ;;                               "textmath"
    ;;                               "sections"
    ;;                               "showlabels"
    ;;                               "sectio") ; seems broken
    ;; preview-gs-options '("-q" "-dDELAYSAFER" "-dNOPAUSE" "-DNOPLATFONTS" "-dPrinted" "-dTextAlphaBits=4" "-dGraphicsAlphaBits=4") ; seems the same as default
    )

#+END_SRC

