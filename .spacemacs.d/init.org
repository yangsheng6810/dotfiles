#+PROPERTY: header-args :results output silent
* General Editing
  #+BEGIN_SRC emacs-lisp
    ;; commented out since it may cause undo-tree corruption
    ;; (setq undo-tree-auto-save-history t)
    ;; to allow cursor move beyond eol, and do not move back.
    (setq evil-move-beyond-eol t
          evil-move-cursor-back nil
          evil-want-fine-undo t
          evil-ex-interactive-search-highlight nil
          evil-want-Y-yank-to-eol t
          mouse-yank-at-point t)

    (setq isearch-lax-whitespace t
          isearch-regexp-lax-whitespace t
          search-whitespace-regexp "[ \t\r\n]+"
          word-wrap nil)
    ;; (setq search-whitespace-regexp "\\s-+")

    (setq-default search-invisible t)

    (setq-default evil-search-module "isearch")

    ;; set tab-width
    (setq-default tab-width 8
                  c-basic-offset 4)

    ;; turn off linum-mode for performance
    (global-linum-mode -1)
    ;; stop the behavior that evil consider all inputs done when in insert mode
    ;; as one insertion.

    ;; turn on highlight-current-line-globally
    (spacemacs/toggle-highlight-current-line-globally-on)

    (global-unset-key (kbd "M-SPC"))
    (global-set-key (kbd "M-SPC") 'set-mark-command)
    (setq ispell-extra-args '("--sug-mode=ultra")
          flyspell-issue-welcome-flag nil ;; fix flyspell problem
          ispell-dictionary "american")

    ;; to avoid lagging
    (use-package flyspell-lazy
      :ensure t
      :init (setq flyspell-lazy-extra-lazy t)
      :config (flyspell-lazy-mode 1))

    (setq delete-by-moving-to-trash t)

    ;; Show different cursor for different evil mode in terminal
    (evil-terminal-cursor-changer-activate)
  #+END_SRC

** Rectangle editing
   #+BEGIN_SRC emacs-lisp
     ;; hydra for rectangle editing
     (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                          :color pink
                                          :hint nil
                                          :post (deactivate-mark))
       "
       ^_k_^       _w_ copy      _o_pen       _N_umber-lines            |\\     -,,,--,,_
     _h_   _l_     _p_aste       _t_ype       _e_xchange-point          /,`.-'`'   ..  \-;;,_
       ^_j_^       _d_ kill      _c_lear      _r_eset-region-mark      |,4-  ) )_   .;.(  `'-'
     ^^^^          _u_ndo        _q_uit       ^ ^                     '---''(./..)-'(_\_)
     "
       ("k" rectangle-previous-line)
       ("j" rectangle-next-line)
       ("h" rectangle-backward-char)
       ("l" rectangle-forward-char)
       ("d" kill-rectangle)                    ;; C-x r k
       ("p" yank-rectangle)                    ;; C-x r y
       ("w" copy-rectangle-as-kill)            ;; C-x r M-w
       ("o" open-rectangle)                    ;; C-x r o
       ("t" string-rectangle)                  ;; C-x r t
       ("c" clear-rectangle)                   ;; C-x r c
       ("e" rectangle-exchange-point-and-mark) ;; C-x C-x
       ("N" rectangle-number-lines)            ;; C-x r N
       ("r" (if (region-active-p)
                (deactivate-mark)
              (rectangle-mark-mode 1)))
       ("u" undo nil)
       ("q" nil))      ;; quit
   #+END_SRC

** evil-smartparens
   Add some keybindings for smartparens under evil
   #+BEGIN_SRC emacs-lisp
     (use-package evil-bind-smartparens
       :after smartparens
       :defer t)
   #+END_SRC

* General
  #+BEGIN_SRC emacs-lisp
    (setq system-time-locale "zh_CN.utf-8"
          user-mail-address "yangsheng6810@gmail.com")
  #+END_SRC

* Display
  #+BEGIN_SRC emacs-lisp
    ;; initial window
    (setq initial-frame-alist
          '(
            (width . 100) ; character
            (height . 54) ; lines
            ))

    ;; default/sebsequent window
    (setq default-frame-alist
          '(
            (width . 100) ; character
            (height . 52) ; lines
            ))
    ;; use 24hr format
    (setq display-time-24hr-format t)

    (setq use-default-font-for-symbols nil)

    ;; Colorize strings that represent colors.
    (add-hook 'prog-mode-hook 'rainbow-mode)

    (unless (fboundp 'spacemacs/diminish-undo)
      (defun spacemacs/diminish-undo (mode)
        "Restore the diminished lighter."
        (interactive
         (list (read (completing-read
                      "Restore what diminished mode: "
                      (cons (list "diminished-modes")
                            (mapcar (lambda (x) (list (symbol-name (car x))))
                                    diminished-mode-alist))
                      nil t nil 'diminish-history-symbols))))
        ;; remove the `mode' entry from spacemacs own list
        (setq spacemacs--diminished-minor-modes
              (delq nil (mapcar (lambda (x) (unless (eq (car x) mode) x))
                                spacemacs--diminished-minor-modes)))
        (diminish-undo mode))
      )

    ;; hide common minor modes
    ;; need to first remove mode from spacemacs--diminished-minor-modes
    (use-package diminish
      :defer t
      :after (core-fonts-support which-key)
      :init (spacemacs/diminish-undo 'which-key-mode)
      :diminish which-key-mode)

    (use-package diminish
      :defer t
      :after (core-fonts-support smartparens)
      :init (spacemacs/diminish-undo 'smartparens-mode)
      :diminish smartparens-mode)

    (use-package diminish
      :defer t
      :after (core-fonts-support company)
      :init (spacemacs/diminish-undo 'company-mode)
      :diminish company-mode)

    (use-package diminish
      :defer t
      :after (core-fonts-support importmagic)
      :init (spacemacs/diminish-undo 'importmagic-mode)
      :diminish importmagic-mode)
    (with-eval-after-load 'spaceline
      (spaceline-toggle-buffer-encoding-abbrev-off))
  #+END_SRC
  
* Ergonomic keybindings
  #+BEGIN_SRC emacs-lisp
    ;; Ergonomic keybinding M-<hjkl>
    (mapc (lambda (keymap)
            ;; Normal-mode, hjkl
            (define-key keymap (kbd "M-h") 'evil-backward-char)
            (define-key keymap (kbd "M-l") 'evil-forward-char)
            (define-key keymap (kbd "M-k") 'evil-previous-visual-line)
            (define-key keymap (kbd "M-j") 'evil-next-visual-line)

            ;; Move to beginning/ending of line
            (define-key keymap (kbd "M-H") 'move-beginning-of-line)
            (define-key keymap (kbd "M-L") 'move-end-of-line)
            (define-key keymap (kbd "C-a") 'move-beginning-of-line)
            (define-key keymap (kbd "C-e") 'move-end-of-line)
            ;; Scroll up/down
            (define-key keymap (kbd "M-J") 'evil-scroll-down)
            (define-key keymap (kbd "M-K") 'evil-scroll-up)
            ;; delete-char
            (define-key keymap (kbd "C-d") 'delete-char)
            )
          `(,evil-insert-state-map
            ,evil-normal-state-map))

    ;; fix some keybinding problems
    ;; fix for js2-mode
    (use-package js2-mode
      :defer t
      :bind (:map js2-mode-map
                  ("M-j" . nil)))
    (with-eval-after-load 'org
      (add-hook 'evil-org-mode-hook
                (lambda ()
                  (mapc (lambda (state)
                          (evil-define-key state evil-org-mode-map
                            (kbd "M-h") nil
                            (kbd "M-j") nil
                            (kbd "M-k") nil
                            (kbd "M-l") nil
                            (kbd "M-H") nil
                            (kbd "M-J") nil
                            (kbd "M-K") nil
                            (kbd "M-L") nil
                            ;; actually unset all the following
                            ;; (kbd "M-h") 'org-metaleft
                            ;; (kbd "M-j") 'org-metadown
                            ;; (kbd "M-k") 'org-metaup
                            ;; (kbd "M-l") 'org-metaright
                            ;; (kbd "M-H") 'org-shiftmetaleft
                            ;; (kbd "M-J") 'org-shiftmetadown
                            ;; (kbd "M-K") 'org-shiftmetaup
                            ;; (kbd "M-L") 'org-shiftmetaright
                            ))
                        '(normal insert)))))
  #+END_SRC
  
* org-mode
  #+BEGIN_SRC emacs-lisp
    ;; wrap in with-eval-after-load, see
    ;; http://spacemacs.org/layers/+emacs/org/README.html#important-note
    (with-eval-after-load 'org
      (setq
       ;; place tags directly after headline text, with only one space in between
       org-tags-column 0
       ;; Highlight latex text in org mode
       org-highlight-latex-and-related '(latex script entities)
       ;; do not treat bare '_' as indication of subscript,
       ;; require a_{x} to indicate subscript
       org-use-sub-superscripts '{}
       org-startup-truncated nil
       org-src-window-setup 'current-window
       org-todo-keywords
       '((sequence "TODO(t)" "PUSHED(p@)" "NEXT(n)" "INACTIVE(i@/!)" "WAIT(w@/!)" "|" "DONE(d!)")
         (sequence "|" "CANCLED(c@)"))
       org-startup-truncated nil
       org-M-RET-may-split-line '((default))
       org-extend-today-until 3 ;; before 3 a.m. is still considered "today"
       )
      (org-add-link-type
       "span" #'ignore ; not an 'openable' link
       #'(lambda (class desc format)
           (pcase format
             (`html (format "<span class=\"%s\">%s</span>"
                            (jw/html-escape-attribute class)
                            (or desc "")))
             (_ (or desc "")))))
      ;; actually insert space with pangu-spacing for org-mode, to fix indentation
      ;; in table
      (set (make-local-variable 'pangu-spacing-real-insert-separtor) t)
      (add-to-list 'org-babel-load-languages '(latex . t))
      )
  #+END_SRC

** org-pdfview
   #+BEGIN_SRC emacs-lisp
   (use-package org-pdfview
     :ensure t
     :after (org)
     :config
     (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link))))
     (add-hook
      'pdf-view-mode-hook
      (lambda ()
        (pdf-view-set-slice-from-bounding-box)
        (pdf-view-fit-width-to-window)))
     )
   #+END_SRC
   
** org-gcal
   #+BEGIN_SRC emacs-lisp
         (when (string= system-name "carbon")
           (use-package org-gcal
             :defer t
             :init
             (setq org-gcal-dir (concat dotspacemacs-directory
                                        "org-gcal/"))
             :config
             (setq
              org-gcal-file-alist '(("yangsheng6810@gmail.com" .  "~/Documents/org/gcal.org")))
             ;; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync)))
             ;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
             )
           )
   #+END_SRC

** org-journal
   #+BEGIN_SRC emacs-lisp
     (use-package org-journal
       :init
       (setq org-journal-dir "~/Documents/org/journal/"
             org-journal-date-format "%x %A")
       :config
       (defun org-journal-find-location ()
         ;; Open today's journal, but specify a non-nil prefix argument in order to
         ;; inhibit inserting the heading; org-capture will insert the heading.
         (org-journal-new-entry t)
         ;; Position point on the journal's top-level heading so that org-capture
         ;; will add the new entry as a child entry.
         (goto-char (point-min)))

       (set-keymap-parent spacemacs-org-journal-mode-map spacemacs-org-mode-map)
       (set-keymap-parent spacemacs-org-journal-mode-map-prefix spacemacs-org-mode-map-prefix)
       (set-keymap-parent spacemacs-org-journal-mode-map-root-map spacemacs-org-mode-map-root-map)

       (defun yang/switch-to-journal-today ()
         "Switch to today's org-journal file"
         (interactive)
         (org-journal-new-entry t))

       (spacemacs/set-leader-keys "bj" 'yang/switch-to-journal-today)
       (spacemacs/set-leader-keys "bJ" 'org-journal-new-entry)

       ;; override default function as it prints out lots of messages
       (defun org-journal-update-org-agenda-files ()
         "Adds the current and future journal files to org-agenda-files.
     And cleans out past org-journal files."
         (when org-journal-enable-agenda-integration
           (let ((agenda-files-without-org-journal
                  (seq-filter
                   (lambda (f)
                     ;; (message "DEBUG: %s %s"
                     ;;          (expand-file-name (file-name-directory f))
                     ;;          (expand-file-name (file-name-as-directory org-journal-dir)))
                     (not (and (string= (expand-file-name (file-name-directory f))
                                        (expand-file-name (file-name-as-directory org-journal-dir)))
                               (string-match org-journal-file-pattern (file-name-nondirectory f)))))
                   org-agenda-files))
                 (org-journal-agenda-files
                  (seq-filter
                   ;; skip files that are older than today
                   (lambda (f)
                     (not (time-less-p
                           (org-journal-calendar-date->time
                            (org-journal-file-name->calendar-date
                             (file-name-nondirectory f)))
                           (time-subtract (current-time) (days-to-time 1)))))
                   (directory-files org-journal-dir t
                                    org-journal-file-pattern))))
             (setq org-agenda-files (append agenda-files-without-org-journal
                                            org-journal-agenda-files)))))
       )
   #+END_SRC

** org-agenda
   #+BEGIN_SRC emacs-lisp
     (setq
      org-agenda-files
      '("~/Documents/org/papers.org"
        "~/Documents/org/Computer.org"
        "~/Documents/org/Task.org"
        "~/Documents/org/Notes.org"
        "~/Documents/org/Days.org"
        "~/Documents/org/gcal.org"
        "~/Documents/org/Schedule.org"))

     (add-to-list 'org-agenda-custom-commands
           '("w" "Last week" tags "TIMESTAMP_IA>=\"<-9d>\"" ;; (1) (2) (3) (4)
              ((org-agenda-files '("~/Documents/org/Schedule.org"
                                   "~/Documents/org/Computer.org"
                                   "~/Documents/org/Research.org"
                                   "~/Documents/org/papers.org"))) ;; (5)
             ))
   #+END_SRC
   This shows the current week from today, but also the past three days.
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-span 10
           org-agenda-start-on-weekday nil
           org-agenda-start-day "-3d")
   #+END_SRC

** org clock
   #+BEGIN_SRC emacs-lisp
     (use-package org-timer
       :defer t
       :commands (org-timer-pause-or-continue)
       :init
       (use-package org-timer
         :defer t
         :commands (org-clock-modify-effort-estimate org-info)
         :init
         (message "Defining hydra for org-clock")
         (defhydra hydra-org-clock (:color blue :hint nil)
           "
     ^Clock:^ ^In/out^     ^Edit^   ^Summary^    | ^Timers:^ ^Run^           ^Insert
     -^-^-----^-^----------^-^------^-^----------|--^-^------^-^-------------^------
     (_?_)    _i_n         _e_dit   _g_oto entry | (_z_)     _r_elative      ti_m_e
      ^ ^     _c_ontinue   _q_uit   _d_isplay    |  ^ ^      cou_n_tdown     i_t_em
      ^ ^     _o_ut        ^ ^      _r_eport     |  ^ ^      _p_ause toggle
      ^ ^     ^ ^          ^ ^      ^ ^          |  ^ ^      _s_top
     "
           ("i" org-clock-in)
           ("c" org-clock-in-last)
           ("o" org-clock-out)

           ("e" org-clock-modify-effort-estimate)
           ("q" org-clock-cancel)

           ("g" org-clock-goto)
           ("d" org-clock-display)
           ("r" org-clock-report)
           ("?" (org-info "Clocking commands"))

           ("r" org-timer-start)
           ("n" org-timer-set-timer)
           ("p" org-timer-pause-or-continue)
           ("s" org-timer-stop)

           ("m" org-timer)
           ("t" org-timer-item)
           ("z" (org-info "Timers")))
         (bind-keys ("C-c w" . hydra-org-clock/body))))

     (use-package org-agenda
       :defer t
       :commands (org-agenda-clock-in
                  org-agenda-clock-out
                  org-agenda-clock-cancel
                  org-agenda-clock-goto)
       :init
       (defhydra hydra-org-agenda-clock (:color blue :hint nil)
           "
     clock _i_n   clock _o_ut   _q_uit   _g_oto
     "
         ("i" org-agenda-clock-in)
         ("o" org-agenda-clock-out)
         ("q" org-agenda-clock-cancel)
         ("g" org-agenda-clock-goto))

       ;; use-package :bind does not work with hydra
       :bind (:map org-agenda-mode-map
                  ("C-c w" . hydra-org-agenda-clock/body))
       )
     ;; Resume clocking task when emacs is restarted
     (org-clock-persistence-insinuate)
     ;; Save the running clock and all clock history when exiting Emacs, load it on startup
     (setq org-clock-persist t)
     ;; Show lot of clocking history so it's easy to pick items
     (setq org-clock-history-length 23)
   #+END_SRC

** org-capture
   #+BEGIN_SRC emacs-lisp
     (setq org-capture-templates
           '(
             ("c" "Computer")
             ("ce" "Emacs" entry
              (file+headline "~/Documents/org/Computer.org" "Emacs")
              "* %? \n  %u")
             ("cl" "Linux" entry
              (file+headline "~/Documents/org/Computer.org" "Linux")
              "* %? \n  %u")
             ("cp" "Python" entry
              (file+headline "~/Documents/org/Computer.org" "Python")
              "* %?\n  %u")
             ("cw" "Windows" entry
              (file+headline "~/Documents/org/Computer.org" "Windows")
               "* %? \n  %u")
             ("g" "Calendar" entry
              (file "~/Documents/org/gcal.org")
              "* %?\n  \n  %^T")
             ;; ("j" "Journal entry" entry
             ;;  (function org-journal-find-location)
             ;;  "* %(format-time-string org-journal-time-format)%^{Title}\n  %i%?")
             ("n" "Notes" entry
              (file+olp+datetree "~/Documents/org/Notes.org")
              "" :time-prompt t)
             ("r" "Research" entry
              (file+olp+datetree "~/Documents/org/Research.org")
              "" :prepend t)
             ("s" "Schedule" entry
              (file+olp+datetree "~/Documents/org/Schedule.org")
              "")
             ("t" "Tasks")
             ("tr" "Book Reading Task" entry
              (file+headline "~/Documents/org/Task.org" "Reading")
              "* TODO %^{书名}\n%u\n%a\n" :clock-in t :clock-resume t)
             ("tw" "Work Task" entry
              (file+headline "~/Documents/org/Task.org" "Work")
              "* TODO %^{任务名}\n%u\n%a\n" :clock-in t :clock-resume t)
             ("x" "Exercise" entry
              (file+olp+datetree "~/Documents/org/Exercise.org")
              "" :time-prompt t)))
   #+END_SRC

** hydra for org
   #+BEGIN_SRC emacs-lisp
     (defhydra yang/hydra-org-mode (:color blue :hint nil)
     ;;   "
     ;;      ^Clock:^ ^In/out^     ^Edit^   ^Summary^    | ^Timers:^ ^Run^           ^Insert
     ;;      -^-^-----^-^----------^-^------^-^----------|--^-^------^-^-------------^------
     ;;      (_?_)    _i_n         _e_dit   _g_oto entry | (_z_)     _r_elative      ti_m_e
     ;;       ^ ^     _c_ontinue   _q_uit   _d_isplay    |  ^ ^      cou_n_tdown     i_t_em
     ;;       ^ ^     _o_ut        ^ ^      _r_eport     |  ^ ^      _p_ause toggle
     ;;       ^ ^     ^ ^          ^ ^      ^ ^          |  ^ ^      _s_top
     ;; "
       "
             _l_ store-link   _L_ insert-last-link
     "
                ("l" org-store-link)
                ("L" org-insert-last-stored-link)
       )
     (spacemacs/set-leader-keys "o" 'yang/hydra-org-mode/body)
   #+END_SRC

* LaTeX
  #+BEGIN_SRC emacs-lisp
    ;; LaTeX hook
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (turn-on-reftex)
                (add-to-list 'TeX-command-list '
                             ("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
                (setq TeX-auto-save t)
                (LaTeX-math-mode)
                (imenu-add-menubar-index)
                ;; (setq LaTeX-command-style
                ;;       (quote (("\\`fontspec\\'" "xelatex ")
                ;;               ("" "%(PDF)%(latex) %S%(PDFout)"))))
                ;; (custom-set-variables
                ;;     '(preview-fast-dvips-command "pdftops -origpagesizes %s.pdf %m/preview.ps"))
                (setq TeX-save-query nil)
                (setq TeX-parse-self t)
                (setq TeX-output-view-style
                      (cons '("^pdf$" "." "evince  %o ") TeX-output-view-style))
                ;; (set-default 'preview-default-document-pt 12)
                ;; (set-default 'preview-scale-function 1.2)
                ;; (setq preview-required-option-list
                ;; 	  (quote ("active" "tightpage" "auctex" "xetex" (preview-preserve-counters "counters"))))
                (setq preview-default-option-list
                      (quote ("displaymath" "floats" "graphics" "textmath" "showlabels" "sections" )))
                (TeX-engine-set "default")
                (LaTeX-add-environments
                 "definition"
                 "example"
                 "tikzpicture"
                 "corallary"
                 "align*"
                 "theorem"
                 "proof"
                 "lemma"
                 ;; '("tikzpicture" LaTeX-env-tikz)
                 )
                ;; enable TeX-fold-buffer
                ;; (add-hook 'find-file-hook 'TeX-fold-buffer t t)
                (setq preview-auto-cache-preamble t)
                (rainbow-delimiters-mode-enable)
                (setq fill-column 10000)
                ;; (turn-off-auto-fill)
                ))
  #+END_SRC

** bibtex
   #+BEGIN_SRC emacs-lisp
     (add-hook 'bibtex-mode-hook
               (lambda ()
                  (add-hook 'after-save-hook 'reftex-parse-all nil 'make-it-local)))

   #+END_SRC
* Python
  #+BEGIN_SRC emacs-lisp
    (setq-default python-indent 4)
    ;; bug fix for python-mode
    (setq python-shell-native-complete nil)
    (use-package company-jedi             ;;; company-mode completion back-end for Python JEDI
      :defer t
      :ensure t
      :config
      (add-hook 'python-mode-hook 'jedi:setup)
      (setq jedi:complete-on-dot t)
      (setq jedi:use-shortcuts t)
      (defun config/enable-company-jedi ()
        (add-to-list 'company-backends 'company-jedi))
      (add-hook 'python-mode-hook 'config/enable-company-jedi))
  #+END_SRC

* Git
  #+BEGIN_SRC emacs-lisp
   (setq-default git-magit-status-fullscreen t)
   (add-hook 'magit-diff-mode-hook
             (lambda ()
               (visual-line-mode 1)))
   (add-hook 'magit-status-mode-hook
             (lambda ()
               (visual-line-mode 1)))
    (setq magit-diff-refine-hunk 'all)
    (global-git-commit-mode t)
  #+END_SRC
  
** Close manually opened magit-diff when commit finishes
   #+BEGIN_SRC emacs-lisp
     (defun yang-close-diff-after-commit ()
       (message "in yang-close-diff-after-commit")
       (let ((magit-display-buffer-noselect t)
             (diff-buf (magit-mode-get-buffer 'magit-diff-mode)))
         (if (and diff-buf
                  (get-buffer-window diff-buf))
             (with-current-buffer diff-buf
               (kill-this-buffer)))))

     (add-hook 'with-editor-pre-finish-hook #'yang-close-diff-after-commit)
     (add-hook 'with-editor-pre-cancel-hook #'yang-close-diff-after-commit)
   #+END_SRC
* web-mode
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'web-mode
      (setq
       web-mode-enable-auto-closing t
       web-mode-enable-auto-indentation t
       web-mode-enable-auto-opening t
       web-mode-enable-auto-pairing t
       web-mode-enable-auto-quoting t
       web-mode-enable-css-colorization t
       ;; remove emmet from company-mode backends in web-mode
       company-web-html-emmet-enable nil
       company-minimum-prefix-length 2
       )
      (defun try-emmet-expand-line (args)
        (interactive "P")
        (when emmet-mode
          (emmet-expand-line args)))
      ;; add emmet to hippie-expand backends
      (add-to-list 'hippie-expand-try-functions-list
                   'try-emmet-expand-line)
      )

    (defun jw/html-escape-attribute (value)
      "Entity-escape VALUE and wrap it in quotes."
      ;; http://www.w3.org/TR/2009/WD-html5-20090212/serializing-html-fragments.html
      ;;
      ;; "Escaping a string... consists of replacing any occurrences of
      ;; the "&" character by the string "&amp;", any occurrences of the
      ;; U+00A0 NO-BREAK SPACE character by the string "&nbsp;", and, if
      ;; the algorithm was invoked in the attribute mode, any occurrences
      ;; of the """ character by the string "&quot;"..."
      (let* ((value (replace-regexp-in-string "&" "&amp;" value))
             (value (replace-regexp-in-string "\u00a0" "&nbsp;" value))
             (value (replace-regexp-in-string "\"" "&quot;" value)))
        value))
  #+END_SRC

* Search
  #+BEGIN_SRC emacs-lisp
    (defengine dictcn
      "http://dict.cn/%s"
      :docstring "Search Dict.cn")
    ;; use ivy--regex-plus for ivy search
    (setq ivy-re-builders-alist
          '((t . ivy--regex-plus)))

  #+END_SRC

* buffer-management
  #+BEGIN_SRC emacs-lisp
    (use-package ivy-rich
      :defer t
      :init (setq yang-ivy-rich-parse-remote-project nil)
      :config
      (ivy-rich-mode 1)
      (setq ivy-virtual-abbreviate 'full
            ivy-rich-switch-buffer-align-virtual-buffer t
            ivy-rich-path-style 'abbrev)

      (defun ivy-rich-switch-buffer-in-propject-p (candidate)
        (with-current-buffer
            (get-buffer candidate)
          (and (and (bound-and-true-p projectile-mode)
                    (projectile-project-p))
               (not (and (file-remote-p (or (buffer-file-name) default-directory))
                         (or (not ivy-rich-parse-remote-buffer)
                             (not yang-ivy-rich-parse-remote-project))))))))
  #+END_SRC
  allow ivy to select the content of prompt
  #+BEGIN_SRC emacs-lisp
    (setq ivy-use-selectable-prompt t)
  #+END_SRC
  
* Email
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist
                 '("\\.eml\\'" . (lambda ()
                                   ;; will add something special
                                   (markdown-mode)
                                   )))
  #+END_SRC

* Ranger & Dired  
  #+BEGIN_SRC emacs-lisp
    (use-package ranger
      :defer t
      :bind (:map ranger-mode-map
                  ("C-h" . nil)) ;; C-h was set to toggle dotfiles
      :config
      (progn
        (setq ranger-show-dotfiles nil ;; default not show dotfiles at startup, toggled by zh
              ranger-cleanup-on-disable t ;; kill the buffers when we finish
              )))

    (with-eval-after-load 'dired
      (defun yang-dired-mode-setup ()
        "to be run as hook for `dired-mode'."
        (dired-hide-details-mode 1))
      (add-hook 'dired-mode-hook 'yang-dired-mode-setup)

      ;; use RET to open dir in same buffer
      (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-find-file
      (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory

      (setq dired-recursive-copies 'always)
      )

    (use-package dired-x
      :defer t
      :config
      (progn
        (add-to-list 'dired-omit-extensions ".~undo-tree~")
        (setq-default dired-omit-mode t)))
  #+END_SRC

* Shell
** Eshell  
   #+BEGIN_SRC emacs-lisp
     (setq eshell-cmpl-cycle-completions nil)
     ;; Nicer completion for eshell
     ;; From https://emacs.stackexchange.com/a/27871
     ;; Also we have to put it into shell, because eshell resets eshell-mode-map
     ;; when initialized
     (add-hook 'eshell-mode-hook
               (lambda ()
                 ;; some alias
                 (eshell/alias "ee" "find-file $1")
                 (eshell/alias "ff" "find-file $1")
                 (eshell/alias "d" "dired $1")
                 ;; git status
                 (defun eshell/gst (&rest args)
                   (magit-status (pop args) nil)
                   (eshell/echo))   ;; The echo command suppresses output
                 ;; define clear
                 (defun eshell/clear ()
                   "Clear the eshell buffer."
                   (let ((inhibit-read-only t))
                     (erase-buffer)
                     (eshell-send-input)))
                 (define-key eshell-mode-map (kbd "<tab>")
                   (lambda () (interactive) (pcomplete-std-complete)))))
   #+END_SRC

** multi-term
   #+BEGIN_SRC emacs-lisp
     (setq term-buffer-maximum-size 10000)
     (use-package eterm-256color
       :config
       (add-hook 'term-mode-hook #'eterm-256color-mode))
   #+END_SRC

* pdf-tools
  #+BEGIN_SRC emacs-lisp
    (defun yang/xdg-reopen ()
      (interactive)
      (if (buffer-file-name)
          (call-process-shell-command (concat "xdg-open " (prin1-to-string (buffer-file-name))) nil 0 nil)
        (message "No file available")))
    ;; copied from http://pragmaticemacs.com/emacs/even-more-pdf-tools-tweaks/
    (use-package pdf-tools
      :defer t
      :ensure t
      :bind (:map pdf-view-mode-map
                  ("C-s" . isearch-forward))
      :config
      (setq-default pdf-view-display-size 'fit-page)
      ;; automatically annotate highlights
      (setq pdf-annot-activate-created-annotations t)
      ;; more fine-grained zooming
      (setq pdf-view-resize-factor 1.1)
      ;; set default annotation color
      (setq pdf-annot-default-text-annotation-properties
         '((icon . "Note")
           (color . "#ffff00")
           (label . "Sheng Yang")
           (popup-is-open)))
      (spacemacs/set-leader-keys-for-major-mode
        'pdf-view-mode
        "t b" 'pdf-history-backward
        "t f" 'pdf-history-forward))
  #+END_SRC

* doc-view
  #+BEGIN_SRC emacs-lisp
    ;; doc-view
    (use-package doc-view
      :config (setq doc-view-resolution 144)
      :bind (:map doc-view-mode-map
                  ("h" . image-backward-hscroll)
                  ("l" . image-forward-hscroll)
                  ("J" . doc-view-next-page)
                  ("K" . 'doc-view-previous-page)
                  ))

    (add-hook 'doc-view-mode-hook 'auto-revert-mode)
  #+END_SRC

* HiDPI
  #+BEGIN_SRC emacs-lisp
   (cond ((string-equal system-name "carbon") ; thinkpad X1 carbon
          (progn
            (with-eval-after-load 'org
              (plist-put org-format-latex-options :scale 2.0))
            (setq
             preview-scale-function 2)
            ;; for GUI called by emacs
            (setenv "GDK_SCALE" "2")
            (setenv "GDK_DPI_SCALE" "0.5")
            )))
  #+END_SRC
 
* Lunar Calendar
  #+BEGIN_SRC emacs-lisp
    ;; enable chinese lunar anniversary
    (use-package cal-china
      :defer t
      :commands my--diary-chinese-anniversary
      :config
      (defun my--diary-chinese-anniversary (lunar-month lunar-day &optional year mark)
        (if year
            (let* ((d-date (diary-make-date lunar-month lunar-day year))
                   (a-date (calendar-absolute-from-gregorian d-date))
                   (c-date (calendar-chinese-from-absolute a-date))
                   (cycle (car c-date))
                   (yy (cadr c-date))
                   (y (+ (* 100 cycle) yy)))
              (diary-chinese-anniversary lunar-month lunar-day y mark))
          (diary-chinese-anniversary lunar-month lunar-day year mark))))
  #+END_SRC

* Chinese
** alignment
   #+BEGIN_SRC emacs-lisp
     ;; set up mono font for chinese
     (use-package cnfonts
       :init
       (setq
        cnfonts--current-profile "Monaco"
        cnfonts-directory (concat dotspacemacs-directory "chinese-fonts-setup/"))
       (customize-set-variable 'cnfonts-profiles
                               '("Monaco" "Source Code Pro" "Fira Code"))
       :config
       (setq
        cnfonts--fontnames-fallback
        '(("Monaco" "Consolas" "DejaVu Sans Mono" "Source Code Pro" "Droid Sans Mono"
           "PragmataPro" "Courier" "Courier New" "Ubuntu Mono" "Liberation Mono"
           "MonacoB" "MonacoB2" "Droid Sans Mono Pro" "Lucida Console" "Hack"
           "Bitstream Vera Sans Mono" "Fira Mono" "Free Mono" "Anonymous Pro" "Ubuntu
           Mono" "Fantasque Sans Mono" "Monoid" "Fantasque" "Fira Code" "Noto Sans
           Mono CJK" "FantasqueSansMono" "AnonymousPro" "Noto Mono")
          ("WenQuanYi Micro Hei Mono" "WenQuanYi Zen Hei Mono"
           "文泉驿等宽微米黑" "文泉驿等宽正黑"
           "Source Han Sans CN" "Source Han Serif CN" "Source Han Sans" "Source Han Serif"
           "Noto Sans MOno CJK SC"
           "微软雅黑" "Microsoft Yahei" "Ubuntu Mono"
           "黑体" "SimHei" "宋体" "SimSun" "新宋体" "NSimSun"
           "Hiragino Sans GB")
          ("HanaMinB" "SimSun-ExtB" "MingLiU-ExtB" "PMingLiU-ExtB" "MingLiU_HKSCS-ExtB"))))
   #+END_SRC
*** Fix char width
   #+BEGIN_SRC emacs-lisp
     ;; set char width for certain characters
     (defun blaenk/set-char-widths (alist)
       (while (char-table-parent char-width-table)
         (setq char-width-table (char-table-parent char-width-table)))
       (dolist (pair alist)
         (let ((width (car pair))
               (chars (cdr pair))
               (table (make-char-table nil)))
           (dolist (char chars)
             (set-char-table-range table char width))
           (optimize-char-table table)
           (set-char-table-parent table char-width-table)
           (setq char-width-table table))))

     ;; fix char width
     (blaenk/set-char-widths
      `((1 . (,(string-to-char "“")
              ,(string-to-char "”")
              ,(string-to-char "…")
              ))))
   #+END_SRC
*** Only reload when necessary   
   #+BEGIN_SRC emacs-lisp
     (setq yang-cnfonts-has-started nil)
     (add-hook 'before-make-frame-hook
               (lambda ()
                 ;; (message "in before-make-frame-hook")
                 (setq yang-cnfonts-has-started nil)))

     (defun yang-cnfonts-set-font-first-time (func &rest _args)
       ;; (message "in yang-cnfonts-set-font-first-time")
       (when (or (not (boundp 'yang-cnfonts-has-started))
                 (null yang-cnfonts-has-started))
         ;; (message "call cnfonts-set-font-first-time")
         (setq yang-cnfonts-has-started t)
         (apply func _args)))

     (advice-add 'cnfonts-set-font-first-time
                 :around #'yang-cnfonts-set-font-first-time)
   #+END_SRC
   
*** Enable cnfonts
   #+BEGIN_SRC emacs-lisp
     (cnfonts-enable)
     (cnfonts-set-spacemacs-fallback-fonts)
     (defun yang-server-create-window-system-frame-advice (&rest _)
       (setq yang-cnfonts-has-started nil)
       (cnfonts-set-font-first-time))
     (advice-add 'server-create-window-system-frame
                 :after #'yang-server-create-window-system-frame-advice)
   #+END_SRC
   
*** Fix client problems
   #+BEGIN_SRC emacs-lisp
     (require 'cl)
     (defun yang-check-last-client-frame (frame)
       (when (eq 1 (cl-count-if
                    (lambda (f)
                      (eq
                       (frame-parameter f 'display)
                       (frame-parameter frame 'display)))
                    (visible-frame-list)))
         (setq yang-cnfonts-has-started nil)))

     (add-to-list 'delete-frame-functions #'yang-check-last-client-frame)
   #+END_SRC
** ace-pinyin
   #+BEGIN_SRC emacs-lisp
     (use-package ace-pinyin
       :defer t
       :config
       (setq ace-pinyin--jump-word-timeout 0.3)
       (spacemacs/set-leader-keys "j j" 'ace-pinyin-jump-word)
       )
   #+END_SRC

* Browser
** Using emacs to edit text area
   #+BEGIN_SRC emacs-lisp
    ;; check if the port for atomic-chrome is used or not
    ;; copied from https://github.com/dakrone/atomic-chrome/commit/79a5c17eef37b1e41590fc366cd16f2c4f3d46e4
    ;; append yang to avoid messing up with naming space
    (defun yang-atomic-chrome-server-running-p ()
     "Returns `t' if the atomic-chrome server is currently running,
   `nil' otherwise."
     (let ((retval nil))
       (condition-case ex
           (progn
             (delete-process
              (make-network-process
               :name "atomic-client-test" :host "localhost"
               :noquery t :service "64292"))
             (setq retval t))
         ('error nil))
       retval))
    ;; turn on atomic-chrome
    (unless (yang-atomic-chrome-server-running-p)
      (atomic-chrome-start-server))
   #+END_SRC
** Default use eww for browsing
   #+BEGIN_SRC emacs-lisp
     (setq browse-url-browser-function
           ;; use eww only when from elfeed-mode
           (lambda (URL &rest args)
             (if (string= major-mode "elfeed-search-mode")
                 (eww-browse-url URL args)
               (browse-url-default-browser URL args))))

     ;; open with GUI browser
     (defun yang/eww-reopen-url-gui ()
       "Open current url in GUI browser"
       (interactive)
       (let ((browse-url-generic-program "/usr/bin/xdg-open"))
         (browse-url-generic (eww-copy-page-url))))
     (with-eval-after-load 'eww
       (define-key eww-mode-map (kbd "B") 'yang/eww-reopen-url-gui))
   #+END_SRC

* Bug-fixes
  #+BEGIN_SRC emacs-lisp
    ;; modeline optimization/workarounds
    (when (fboundp 'spacemacs/toggle-mode-line-responsive-off)
      (spacemacs/toggle-mode-line-responsive-off))

     ;; ipython cannot find gurobi license
     (setenv "GRB_LICENSE_FILE" (concat (getenv "HOME") "/.config/gurobi.lic"))

    (defun spacemacs//layout-wait-for-modeline (&rest r)
      "AAAssure the mode-line is loaded before restoring the layouts."
      (advice-remove 'persp-load-state-from-file 'spacemacs//layout-wait-for-modeline)
      (when (and (configuration-layer/package-used-p 'spaceline)
                 (memq (spacemacs/get-mode-line-theme-name) '(spacemacs all-the-icons custom)))
        (require 'spaceline-config)))

    (defun my-reload-modeline (&rest _args)
      (message "in my-reload-modeline")
      (spacemacs-modeline/init-spaceline)
      (advice-remove 'server-create-window-system-frame #'my-reload-modeline))

    ;; (with-eval-after-load 'persp-mode
    ;;   (require 'spaceline)
    ;;   (advice-remove 'persp-load-state-from-file 'spacemacs//layout-wait-for-modeline))

    (advice-add 'server-create-window-system-frame :after #'my-reload-modeline)
  #+END_SRC
** ad-Advice-popwin:create-popup-window: Symbol’s function definition is void: purpose-window-purpose-dedicated-p
   #+BEGIN_SRC emacs-lisp
  (require 'window-purpose-core)
   #+END_SRC
** git-gutter+
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'git-gutter+
       (defun git-gutter+-remote-default-directory (dir file)
         (let* ((vec (tramp-dissect-file-name file))
                (method (tramp-file-name-method vec))
                (user (tramp-file-name-user vec))
                (domain (tramp-file-name-domain vec))
                (host (tramp-file-name-host vec))
                (port (tramp-file-name-port vec))
                )
           (tramp-make-tramp-file-name method user domain host port dir)))

       (defun git-gutter+-remote-file-path (dir file)
         (let ((file (tramp-file-name-localname (tramp-dissect-file-name file))))
           (replace-regexp-in-string (concat "\\`" dir) "" file))))

     ;; the function that has problem
     ;; maybe better to change this function
     ;; (defun git-gutter+-refresh ()
     ;;   (git-gutter+-clear)
     ;;   (let ((file (buffer-file-name)))
     ;;     (when (and file (file-exists-p file))
     ;;       (if (file-remote-p file)
     ;;           (let* ((repo-root (git-gutter+-root-directory file))
     ;;                  (default-directory (git-gutter+-remote-default-directory repo-root file)))
     ;;             (git-gutter+-process-diff (git-gutter+-remote-file-path repo-root file)))
     ;;         (git-gutter+-process-diff (git-gutter+-local-file-path file))))))
   #+END_SRC

* Monitor processes
  =proced= is a major mode like htop. To sort, first press =s=, then =c/m= for cpu/memory
  #+BEGIN_SRC emacs-lisp
    (add-hook 'proced-mode-hook
              (lambda ()
                (proced-toggle-auto-update)))

  #+END_SRC

* elfeed
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'elfeed-search
      (define-key elfeed-search-mode-map (kbd "m") 'elfeed-toggle-star)
      (defalias 'elfeed-toggle-star
        (elfeed-expose #'elfeed-search-toggle-all 'star)))


    ;; use =B= to call gui browser
    (defun yang/elfeed-show-visit-gui ()
      "Wrapper for elfeed-show-visit to use gui browser instead of eww"
      (interactive)
      (let ((browse-url-generic-program "/usr/bin/xdg-open"))
        (elfeed-show-visit t)))

    (defun yang/elfeed-search-browse-url-gui ()
      "Visit the current entry in your browser using `browse-url'.
    If there is a prefix argument, visit the current entry in the
    browser defined by `browse-url-generic-program'."
      (interactive)
      (let ((browse-url-generic-program "/usr/bin/xdg-open"))
        (elfeed-search-browse-url t)))

    (with-eval-after-load 'elfeed
      (define-key elfeed-show-mode-map (kbd "B") 'yang/elfeed-show-visit-gui)
      (define-key elfeed-search-mode-map (kbd "B") 'yang/elfeed-search-browse-url-gui))
  #+END_SRC

* Tramp
  #+BEGIN_SRC emacs-lisp
    (require 'tramp)
    (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
    (setq tramp-default-method "ssh")
  #+END_SRC

** Temp fix
   Already fixed upstream, but not in Arch official repo
   #+BEGIN_SRC emacs-lisp
     (if (not (version< emacs-version "26.0" ))
         (defun term-handle-ansi-terminal-messages (message)
           ;; Handle stored partial message
           (when term-partial-ansi-terminal-message
             (setq message (concat term-partial-ansi-terminal-message message))
             (setq term-partial-ansi-terminal-message nil))

           ;; Is there a command here?
           (while (string-match "\eAnSiT.+\n" message)
             ;; Extract the command code and the argument.
             (let* ((start (match-beginning 0))
                    (command-code (aref message (+ start 6)))
                    (argument
                     (save-match-data
                       (substring message
                                  (+ start 8)
                                  (string-match "\r?\n" message
                                                (+ start 8)))))
                    ignore)
               ;; Delete this command from MESSAGE.
               (setq message (replace-match "" t t message))

               ;; If we recognize the type of command, set the appropriate variable.
               (cond ((= command-code ?c)
                      (setq term-ansi-at-dir argument))
                     ((= command-code ?h)
                      (setq term-ansi-at-host argument))
                     ((= command-code ?u)
                      (setq term-ansi-at-user argument))
                     ;; Otherwise ignore this one.
                     (t
                      (setq ignore t)))

               ;; Update default-directory based on the changes this command made.
               (if ignore
                   nil
                 (setq default-directory
                       (file-name-as-directory
                        (if (and (string= term-ansi-at-host (system-name))
                                 (string= term-ansi-at-user (user-real-login-name)))
                            (expand-file-name term-ansi-at-dir)
                          (if (string= term-ansi-at-user (user-real-login-name))
                              (concat "/-:" term-ansi-at-host ":" term-ansi-at-dir)
                            (concat "/-:" term-ansi-at-user "@" term-ansi-at-host ":"
                                    term-ansi-at-dir)))))

                 ;; I'm not sure this is necessary,
                 ;; but it's best to be on the safe side.
                 (if (string= term-ansi-at-host (system-name))
                     (progn
                       (setq ange-ftp-default-user term-ansi-at-save-user)
                       (setq ange-ftp-default-password term-ansi-at-save-pwd)
                       (setq ange-ftp-generate-anonymous-password term-ansi-at-save-anon))
                   (setq term-ansi-at-save-user ange-ftp-default-user)
                   (setq term-ansi-at-save-pwd ange-ftp-default-password)
                   (setq term-ansi-at-save-anon ange-ftp-generate-anonymous-password)
                   (setq ange-ftp-default-user nil)
                   (setq ange-ftp-default-password nil)
                   (setq ange-ftp-generate-anonymous-password nil)))))
           ;; If there is a partial message at the end of the string, store it
           ;; for future use.
           (when (string-match "\eAnSiT.+$" message)
             (setq term-partial-ansi-terminal-message (match-string 0 message))
             (setq message (replace-match "" t t message)))
           message))
   #+END_SRC

** yadm
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'tramp-methods
                  '("yadm"
                    (tramp-login-program "yadm")
                    (tramp-login-args (("enter")))
                    (tramp-login-env
                     (("SHELL")
                      ("/bin/bash")))
                    (tramp-remote-shell "/bin/sh")
                    (tramp-remote-shell-args ("-c"))))

     (defun yadm-magit-status ()
       (interactive)
       (magit-status "/yadm::"))
   #+END_SRC

* Projectile
  #+BEGIN_SRC emacs-lisp
    (setq shell-file-name "/bin/sh"
          projectile-enable-caching t
          projectile-file-exists-remote-cache-expire nil)
  #+END_SRC
* Debug
** undo-tree
   #+BEGIN_SRC emacs-lisp
     (setq undo-tree-auto-save-history t
           undo-tree-enable-undo-in-region nil
           undo-tree-history-directory-alist
           `(("." .
              ,(concat dotspacemacs-directory ".cache/undo-tree/")))
           )
   #+END_SRC

* Semantic
  #+BEGIN_SRC emacs-lisp
    (cl-defun semanticdb-rescan-directory-1 (pathname &optional (file-regex ".*\\.\\(el\\|el.gz\\)$"))
      (let* ((root (file-name-as-directory pathname))
             (files (directory-files root t )))
        (setq files (delete (format "%s." root) files))
        (setq files (delete (format "%s.." root) files))
        (while files
          (setq file (pop files))
          (message "Parsing %s file." file)
          (if (not(file-accessible-directory-p file))
              ;;if it's a file that matches the regex we seek
              (progn (when (string-match-p file-regex file)
                       (save-excursion
                         (message "Parsing %s file." file)
                         (ignore-errors
                           (semanticdb-file-table-object file t)))
               ))
              ;;else if it's a directory
              (semanticdb-rescan-directory-1 file file-regex)))))

    (defun yang/rescan-semantic-files ()
      (interactive)
      (mapc #'semantic-rescan-directory
            '("/usr/share/emacs/"
              "~/.emacs.d/core/"
              "~/.emacs.d/elpa/"
              "~/.emacs.d/layers/")))

    (defun semantic-rescan-directory (dir)
      (interactive "D")
      (message "Scanning directory %s." dir)
      (semanticdb-rescan-directory-1 dir))

    ;; (semantic-rescan-directory "/home/yangsheng/.emacs.d/elpa/26.1/develop/")
    ;; (semantic-rescan-directory "/usr/share/emacs/26.1/")
    (with-eval-after-load 'semantic
      (add-hook 'semantic-mode-hook
                (lambda ()
                  (dolist (x (default-value 'completion-at-point-functions))
                    (when (string-prefix-p "semantic-" (symbol-name x))
                      (remove-hook 'completion-at-point-functions x))))))
  #+END_SRC

* c++
  #+BEGIN_SRC emacs-lisp
    (add-hook 'c-mode-common-hook
              (lambda ()
                (rainbow-mode -1)))
  #+END_SRC

* neo-tree
  #+BEGIN_SRC emacs-lisp
    ;; use fancy icons
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  #+END_SRC

* persp-mode
  Use =<leader> b l= to show all buffers in current perspective
  #+BEGIN_SRC emacs-lisp
    (use-package persp-mode
      :defer t
      :after ibuffer
      :config
      (spacemacs/set-leader-keys "b l"
        #'(lambda (arg)
            (interactive "P")
            (with-persp-buffer-list () (ibuffer arg)))))

    (setq persp-emacsclient-init-frame-behaviour-override nil
          persp-init-new-frame-behaviour-override -1)
  #+END_SRC
  Switch to the first persp when loading from file
  #+BEGIN_SRC emacs-lisp
    (use-package persp-mode
      :defer t
      :config
      (defun yang-persp-switch-to-persp-after-load (persp-list)
        (message "come to my switch to persp")
        (let ((persp-name (car persp-list)))
          (when persp-name
            (persp-switch persp-name))))
      (advice-add 'persp-load-state-from-file :filter-return 'yang-persp-switch-to-persp-after-load))
  #+END_SRC

* helpful
  #+BEGIN_SRC emacs-lisp
    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    (use-package helpful
      :bind (("C-h k" . helpful-key)
             ;; Look up *F*unctions (excludes macros).
             ;;
             ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
             ;; already links to the manual, if a function is referenced there.
             ("C-h F" . helpful-function)
             ;; Look up *C*ommands.
             ;;
             ;; By default, C-h C is bound to describe `describe-coding-system'. I
             ;; don't find this very useful, but it's frequently useful to only
             ;; look at interactive functions.
             ("C-h C" . helpful-command))
      :config
      ;; (global-set-key (kbd "C-h f") #'helpful-callable)
      (setq counsel-describe-function-function #'helpful-callable)
      ;; (global-set-key (kbd "C-h v") #'helpful-variable)
      (setq counsel-describe-variable-function #'helpful-variable))
  #+END_SRC

* auto-highlight-symbol (ahs)
  #+BEGIN_SRC emacs-lisp
    (setq
     ahs-case-fold-search nil
     ahs-default-range 'ahs-range-whole-buffer
     ahs-idle-interval 0.25
     ahs-idle-timer 0
     ahs-inhibit-face-list nil)
  #+END_SRC

* Helm (legacy)
  #+BEGIN_SRC emacs-lisp
   ;; fix problem with open-junk-file
   (defun remove-helm-functions ()
     (remove-hook 'post-command-hook 'helm--maybe-update-keymap)
     ;; 2015-07-01 The following function was also remaining in the hook.
     ;; This hook was added 14 days ago coinciding breakage.
     ;; https://github.com/emacs-helm/helm/commit/ff7c54d39501d894fdb06e049828b291327540e6
     (remove-hook 'post-command-hook 'helm--update-header-line))



   ;;
   ;; 2015-07-01
   ;; This function itself is not remaining in the post-command-hook?
   ;;
   ;; Candidate hooks for making this happen.
   ;; server-done-hook	Hook run when done editing a buffer for the Emacs server.
   ;; server-mode-hook	Hook run after entering or leaving `server-mode'.
   ;; server-switch-hook	Hook run when switching to a buffer for the Emacs server.
   ;; server-visit-hook	Hook run when visiting a file for the Emacs server.
   ;;
   ;; (add-hook 'server-done-hook   'remove-helm--maybe-update-keymap)
   ;; (add-hook 'server-mode-hook   'remove-helm--maybe-update-keymap)
   ;; (add-hook 'server-switch-hook 'remove-helm--maybe-update-keymap)
   ;; (add-hook 'server-visit-hook  'remove-helm--maybe-update-keymap)
   ;;
   ;; This hacky universal solution works.
   ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Command-Overview.html#Command-Overview
   ;; (add-hook 'post-command-hook 'remove-helm-functions)
   ;; 2015-07-01 Changed to the following.
   (add-hook 'pre-command-hook 'remove-helm-functions)
  #+END_SRC
  
* to be structured
#+BEGIN_SRC emacs-lisp
   ;; (spacemacs/toggle-truncate-lines-on)
   ;; (defadvice preceding-sexp (around evil)
   ;;   "In normal-state, last sexp ends at point."
   ;;   (if (evil-normal-state-p)
   ;;       (save-excursion
   ;;         (unless (or (eobp) (eolp)) (forward-char))
   ;;         ad-do-it)
   ;;     ad-do-it))
   ;; (defadvice pp-last-sexp (around evil)
   ;;   "In normal-state, last sexp ends at point."
   ;;   (if (evil-normal-state-p)
   ;;       (save-excursion
   ;;         (unless (or (eobp) (eolp)) (forward-char))
   ;;         ad-do-it)
   ;;     ad-do-it))
   ;; to search across line breaks

   ;; move most custom variables here
   (setq
    paradox-automatically-star nil
    ;; preview-default-option-list '("displaymath"
    ;;                               "floats"
    ;;                               "graphics"
    ;;                               "textmath"
    ;;                               "sections"
    ;;                               "showlabels"
    ;;                               "sectio") ; seems broken
    ;; preview-gs-options '("-q" "-dDELAYSAFER" "-dNOPAUSE" "-DNOPLATFONTS" "-dPrinted" "-dTextAlphaBits=4" "-dGraphicsAlphaBits=4") ; seems the same as default
    )

#+END_SRC

