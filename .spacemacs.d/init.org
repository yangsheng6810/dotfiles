#+PROPERTY: header-args
* General Editing
  #+BEGIN_SRC emacs-lisp
    ;;; -*- lexical-binding: t -*-
    (setq-default lexical-binding t)

    ;; commented out since it may cause undo-tree corruption
    ;; (setq undo-tree-auto-save-history t)

    (setq word-wrap nil)

    ;; set tab-width
    (setq-default tab-width 8
                  c-basic-offset 4)

    ;; turn off linum-mode for performance
    (global-linum-mode -1)

    ;; turn on highlight-current-line-globally
    (spacemacs/toggle-highlight-current-line-globally-off)

    (global-unset-key (kbd "M-SPC"))
    (global-set-key (kbd "M-SPC") 'set-mark-command)

    (setq delete-by-moving-to-trash t)

    (setq langtool-java-classpath
          "/usr/share/languagetool:/usr/share/java/languagetool/*")

  #+END_SRC
** Moving around
   #+begin_src emacs-lisp
     ;; first recenter to top, then to half-top
     (setq recenter-positions '(0.15 top middle bottom))
   #+end_src
** ispell
   #+begin_src emacs-lisp
     (setq ispell-extra-args '("--sug-mode=ultra")
           flyspell-issue-welcome-flag nil ;; fix flyspell problem
           ispell-dictionary "american")

     ;; to avoid lagging
     (use-package flyspell-lazy
       :ensure t
       :init (setq flyspell-lazy-extra-lazy t)
       :config (flyspell-lazy-mode 1))
   #+end_src
** Search
   #+begin_src emacs-lisp
     (setq isearch-lax-whitespace t
           isearch-regexp-lax-whitespace t
           search-whitespace-regexp "[ \t\r\n]+")
     ;; (setq search-whitespace-regexp "\\s-+")

     (setq-default search-invisible t)

     (defun yang/swiper ()
       "In visual-line-mode, call swiper on visual line when universal prefix is provided, normal swiper otherwise"
       (interactive)
       (let ((visual-line-mode (and visual-line-mode
                                    (not (null current-prefix-arg)))))
         (swiper)))

     (use-package swiper
       :config
       (progn
         (spacemacs/set-leader-keys
           "ss" 'swiper
           "sS" 'spacemacs/swiper-region-or-symbol
           "sb" 'swiper-all
           "sB" 'spacemacs/swiper-all-region-or-symbol)
         (global-set-key "\C-s" 'swiper-isearch)))
   #+end_src
*** Allow ivy to select the content of prompt
    #+BEGIN_SRC emacs-lisp
      (setq ivy-use-selectable-prompt t)
    #+END_SRC
** Evil
   #+begin_src emacs-lisp
     ;; to allow cursor move beyond eol, and do not move back.
     (setq evil-move-beyond-eol t
           evil-move-cursor-back nil
           evil-want-fine-undo t
           evil-ex-interactive-search-highlight nil
           ;; when mouse paste, paste at (point) regardless of where you click
           evil-want-Y-yank-to-eol t
           mouse-yank-at-point t
           ;; move past eol when pressing l at eol
           evil-cross-lines t
           ;; when pasting over some text, the replaced text does not go to clipboard
           evil-kill-on-visual-paste nil)

     ;; stop the behavior that evil consider all inputs done when in insert mode
     ;; as one insertion.

     ;; use isearch instead evil search
     (setq-default evil-search-module "isearch")

     ;; unset some never used keys in evil insert mode
     (let ((evil-keys-to-unset
            '("C-d"                         ; evil-shift-left-line
              "C-k"                         ; evil-insert-digraph
              "C-o"                         ; evil-execute-in-normal-mode
              "C-p"                         ; hippie-expand
              "C-z"                         ; evil-emacs-state
              "C-v"                         ; quoted-insert
              "C-w"                         ; evil-delete-backward-word
              "<delete>"                    ; delete-char (delete char before cursor)
              )))
       (dolist (key evil-keys-to-unset)
         (define-key evil-insert-state-map (kbd key) nil)))

     ;; Show different cursor for different evil mode in terminal
     (evil-terminal-cursor-changer-activate)

   #+end_src
** Rectangle editing
   #+BEGIN_SRC emacs-lisp
     ;; hydra for rectangle editing
     (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                          :color pink
                                          :hint nil
                                          :post (deactivate-mark))
       "
       ^_k_^       _w_ copy      _o_pen       _N_umber-lines            |\\     -,,,--,,_
     _h_   _l_     _p_aste       _t_ype       _e_xchange-point          /,`.-'`'   ..  \-;;,_
       ^_j_^       _d_ kill      _c_lear      _r_eset-region-mark      |,4-  ) )_   .;.(  `'-'
     ^^^^          _u_ndo        _q_uit       ^ ^                     '---''(./..)-'(_\_)
     "
       ("k" rectangle-previous-line)
       ("j" rectangle-next-line)
       ("h" rectangle-backward-char)
       ("l" rectangle-forward-char)
       ("d" kill-rectangle)                    ;; C-x r k
       ("p" yank-rectangle)                    ;; C-x r y
       ("w" copy-rectangle-as-kill)            ;; C-x r M-w
       ("o" open-rectangle)                    ;; C-x r o
       ("t" string-rectangle)                  ;; C-x r t
       ("c" clear-rectangle)                   ;; C-x r c
       ("e" rectangle-exchange-point-and-mark) ;; C-x C-x
       ("N" rectangle-number-lines)            ;; C-x r N
       ("r" (if (region-active-p)
                (deactivate-mark)
              (rectangle-mark-mode 1)))
       ("u" undo nil)
       ("q" nil))      ;; quit
   #+END_SRC

** smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :bind (("C-c k" . yang-smartparens/body)
              :map smartparens-strict-mode-map
              ;; A fill paragraph in strict mode
              ("M-q" . sp-indent-defun))
       :init
       ;; Hydra for Smartparens
       (defhydra yang-smartparens (:hint nil)
         "
     Sexps (quit with _q_)
     ^Nav^            ^Barf/Slurp^                 ^Depth^
     ^---^------------^----------^-----------------^-----^-----------------
     _f_: forward     _→_:          slurp forward   _R_: splice
     _b_: backward    _←_:          barf forward    _r_: raise
     _u_: backward ↑  _C-<right>_:  slurp backward  _↑_: raise backward
     _d_: forward ↓   _C-<left>_:   barf backward   _↓_: raise forward
     _p_: backward ↓
     _n_: forward ↑
     ^Kill^           ^Misc^                       ^Wrap^
     ^----^-----------^----^-----------------------^----^------------------
     _w_: copy        _j_: join                    _(_: wrap with ( )
     _k_: kill        _s_: split                   _{_: wrap with { }
     ^^               _t_: transpose               _'_: wrap with ' '
     ^^               _c_: convolute               _\"_: wrap with \" \"
     ^^               _i_: indent defun"
         ("q" nil)
         ;; Wrapping
         ("(" (lambda (_) (interactive "P") (sp-wrap-with-pair "(")))
         ("{" (lambda (_) (interactive "P") (sp-wrap-with-pair "{")))
         ("'" (lambda (_) (interactive "P") (sp-wrap-with-pair "'")))
         ("\"" (lambda (_) (interactive "P") (sp-wrap-with-pair "\"")))
         ;; Navigation
         ("f" sp-forward-sexp )
         ("b" sp-backward-sexp)
         ("u" sp-backward-up-sexp)
         ("d" sp-down-sexp)
         ("p" sp-backward-down-sexp)
         ("n" sp-up-sexp)
         ;; Kill/copy
         ("w" sp-copy-sexp)
         ("k" sp-kill-sexp)
         ;; Misc
         ("t" sp-transpose-sexp)
         ("j" sp-join-sexp)
         ("s" sp-split-sexp)
         ("c" sp-convolute-sexp)
         ("i" sp-indent-defun)
         ;; Depth changing
         ("R" sp-splice-sexp)
         ("r" sp-splice-sexp-killing-around)
         ("<up>" sp-splice-sexp-killing-backward)
         ("<down>" sp-splice-sexp-killing-forward)
         ;; Barfing/slurping
         ("<right>" sp-forward-slurp-sexp)
         ("<left>" sp-forward-barf-sexp)
         ("C-<left>" sp-backward-barf-sexp)
         ("C-<right>" sp-backward-slurp-sexp)))
   #+END_SRC

** COMMENT recursive-narrow
   #+begin_src emacs-lisp
     ;; (use-package recursive-narrow
     ;;   :commands
     ;;   (recursive-narrow-or-widen-dwim recursive-widen recursive-narrow-to-region)
     ;;   )
     (use-package recursive-narrow)
     (recursive-narrow-mode)
   #+end_src
** Narrow
   #+begin_src emacs-lisp
    ;; from https://demonastery.org/2013/04/emacs-narrow-to-region-indirect/
    (defun narrow-to-region-indirect (start end)
      "Restrict editing in this buffer to the current region, indirectly."
      (interactive "r")
      (deactivate-mark)
      (let ((buf (clone-indirect-buffer nil nil)))
        (with-current-buffer buf
          (narrow-to-region start end))
        (switch-to-buffer buf)))
   #+end_src
** vlf
   deal with very large files
   #+begin_src emacs-lisp
     (use-package vlf-setup)
   #+end_src

** Beginend
   #+begin_src emacs-lisp
     (use-package beginend
       :diminish (beginend-global-mode
                  beginend-bs-mode
                  beginend-prog-mode
                  beginend-compilation-mode))

     (beginend-global-mode)
   #+end_src
** Expand-region
   #+begin_src emacs-lisp
     (setq expand-region-fast-keys-enabled nil)
     (with-eval-after-load 'hydra
       (defhydra yang/hydra-expand (:columns 5)
         "expand-region"
         ("V" er/contract-region "Contract")
         ("v" er/expand-region "Expand")
         ("u" er/mark-url "Mark url")
         ("f" er/mark-defun "Function")
         ("c" er/mark-comment "Comment")
         ("e" evil-iedit-state/iedit-mode-from-expand-region "Edit")
         ("b" (lambda (beg end)
                (interactive "r")
                (let ((str (buffer-substring beg end)))
                  (when (browse-url str)     ; return non-nil when fail
                    (google-this-string nil str t))
                  (er/expand-region 0)))
          "Browse/search" :color blue)
         ("r" (lambda () (interactive) (er/expand-region 0)) "Reset" :color blue))

       (defun yang/expand-region-wrap (arg)
         (interactive "p")
         (er/expand-region arg)
         (yang/hydra-expand/body))

       (spacemacs/set-leader-keys "v" 'yang/expand-region-wrap))
   #+end_src
* General
  #+BEGIN_SRC emacs-lisp
    (setq system-time-locale "zh_CN.utf-8"
          user-mail-address "yangsheng6810@gmail.com")
    (setq exec-path (cons (expand-file-name "~/.pyenv/shims") exec-path))
    (setq yang/at-china nil)
    (when yang/at-china
      (setq url-gateway-method 'socks)
      (setq socks-server '("Default server" "127.0.0.1" 8883 5))
      (setq url-proxy-services
            '(
              ;; ("no_proxy" . "^\\(localhost\\|192\\.168\\..*\\)")
              ("http"     . "127.0.0.1:8123")
              ("https"    . "127.0.0.1:8123")))
      (setq request--url-options
            '("--proxy" "socks5://localhost:8883")))
  #+END_SRC
** Purpose
   #+begin_src emacs-lisp
     (setq purpose-layout-dirs
           (list (concat dotspacemacs-directory "layouts/")))
   #+end_src
** Terminal
   #+begin_src emacs-lisp
     (defun yang/load-theme-according-to-gui ()
       (message "yang: load theme...")
       (message "server name is %s" server-name)
       (when (string-equal "terminal" server-name)
         (load-theme 'spacemacs-dark)))

     (yang/load-theme-according-to-gui)
     (add-hook 'before-make-frame-hook #'yang/load-theme-according-to-gui)
   #+end_src
* Display
  #+BEGIN_SRC emacs-lisp
    ;; initial window
    (setq initial-frame-alist
          '(
            (width . 100) ; character
            (height . 54) ; lines
            ))

    ;; default/sebsequent window
    (setq default-frame-alist
          '(
            (width . 100) ; character
            (height . 52) ; lines
            ))
    ;; use 24hr format
    (setq display-time-24hr-format t)

    (setq use-default-font-for-symbols nil)

    ;; Colorize strings that represent colors.
    (add-hook 'prog-mode-hook 'rainbow-mode)

    (unless (fboundp 'spacemacs/diminish-undo)
      (defun spacemacs/diminish-undo (mode)
        "Restore the diminished lighter."
        (interactive
         (list (read (completing-read
                      "Restore what diminished mode: "
                      (cons (list "diminished-modes")
                            (mapcar (lambda (x) (list (symbol-name (car x))))
                                    diminished-mode-alist))
                      nil t nil 'diminish-history-symbols))))
        ;; remove the `mode' entry from spacemacs own list
        (setq spacemacs--diminished-minor-modes
              (delq nil (mapcar (lambda (x) (unless (eq (car x) mode) x))
                                spacemacs--diminished-minor-modes)))
        (diminish-undo mode))
      )

    ;; hide common minor modes
    ;; need to first remove mode from spacemacs--diminished-minor-modes
    ;; (use-package diminish
    ;;   :defer t
    ;;   :after (core-fonts-support which-key)
    ;;   :init (spacemacs/diminish-undo 'which-key-mode)
    ;;   :diminish which-key-mode)

    (use-package which-key
      :after (core-fonts-support)
      :config (spacemacs/diminish-undo 'which-key-mode)
      :diminish which-key-mode)

    (use-package smartparens
      :after (core-fonts-support)
      :config (spacemacs/diminish-undo 'smartparens-mode)
      :diminish smartparens-mode)

    (use-package company
      :after (core-fonts-support)
      :config (spacemacs/diminish-undo 'company-mode)
      :diminish company-mode)

    (use-package importmagic
      :after (core-fonts-support)
      :config (spacemacs/diminish-undo 'importmagic-mode)
      :diminish importmagic-mode)

    (use-package beacon
      :defer t
      :diminish beacon-mode
      :config
      (defun beacon--visual-current-column ()
        "Get the visual column we are at, takes long lines and visual line mode into account."
        (save-excursion
          (let ((current (point)))
            (beginning-of-visual-line)
            (- current (point)))))

      (defun yang/beacon--after-string-overlay (colors)
        "Put an overlay at point with an after-string property.
    The property's value is a string of spaces with background
    COLORS applied to each one."
        ;; The after-string must not be longer than the remaining columns
        ;; from point to right window-end else it will be wrapped around.
        (let ((colors (seq-take colors (- (window-width) (beacon--visual-current-column) 1))))
          (beacon--ov-put-after-string (beacon--make-overlay 0) colors)))
      (advice-add #'beacon--after-string-overlay :override #'yang/beacon--after-string-overlay)
      )

    (beacon-mode 1)

    (with-eval-after-load 'face-remap
      (diminish 'buffer-face-mode))

    (with-eval-after-load 'spaceline
      (spaceline-toggle-buffer-encoding-abbrev-off))
  #+END_SRC
  
** varable-pitch-mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook
               (lambda ()
                 (variable-pitch-mode 1)))
     (add-hook 'conf-mode-hook
               (lambda ()
                 (variable-pitch-mode -1)) t)

     (set-face-attribute 'org-table nil :inherit 'fixed-pitch)


     (use-package theming
       :defer t
       :init
      (defmacro set-pair-faces (themes consts faces-alist)
        "Macro for pair setting of custom faces.
     THEMES name the pair (theme-one theme-two). CONSTS sets the variables like
       ((sans-font \"Some Sans Font\") ...). FACES-ALIST has the actual faces
     like:
       ((face1 theme-one-attr theme-two-atrr)
        (face2 theme-one-attr nil           )
        (face3 nil            theme-two-attr)
        ...)"
        (defmacro get-proper-faces ()
          `(let* (,@consts)
             (backquote ,faces-alist)))

        `(setq theming-modifications
               ',(mapcar (lambda (theme)
                           `(,theme ,@(cl-remove-if
                                       (lambda (x) (equal x "NA"))
                                       (mapcar (lambda (face)
                                                 (let ((face-name (car face))
                                                       (face-attrs (nth (cl-position theme themes) (cdr face))))
                                                   (if face-attrs
                                                       `(,face-name ,@face-attrs)
                                                     "NA"))) (get-proper-faces)))))
                         themes)))

      (set-pair-faces
       ;; Themes to cycle in
       (doom-molokai spacemacs-light spacemacs-dark)

       ;; Variables
       ((bg-white           "#fbf8ef")
        (bg-light           "#e3e1e0")
        (bg-dark            "#1c1e1f")
        (bg-darker          "#1c1c1c")
        (fg-white           "#ffffff")
        (shade-white        "#efeae9")
        (fg-light           "#655370")
        (dark-cyan          "#008b8b")
        (region-dark        "#2d2e2e")
        (region             "#39393d")
        (slate              "#8FA1B3")
        (keyword            "#f92672")
        (comment            "#525254")
        (builtin            "#fd971f")
        (purple             "#9c91e4")
        (doc                "#727280")
        (type               "#66d9ef")
        (string             "#b6e63e")
        (gray-dark          "#999")
        (gray               "#bbb")
        (sans-font          "Source Sans Pro")
        (serif-font         "Merriweather")
        (et-font            "EtBembo")
        (sans-mono-font     "Souce Code Pro")
        (serif-mono-font "Verily Serif Mono"))
       ;; Settings
       ((variable-pitch
         (:family ,sans-font)
         (:family ,et-font
                  :background nil
                  :foreground ,bg-dark
                  :height 1.2)
         (:family ,et-font
                  :background nil
                  :foreground ,bg-light
                  :height 1.2))
        (org-document-title
         (:inherit variable-pitch
                   :height 1.3
                   :weight normal
                   :foreground ,gray)
         (:inherit nil
                   :family ,et-font
                   :height 1.8
                   :foreground ,bg-dark
                   :underline nil)
         (:inherit nil
                   :family ,et-font
                   :height 1.8
                   :foreground ,bg-light
                   :underline nil))
        (org-document-info
         (:foreground ,gray
                      :slant italic)
         (:height 1.2
                  :slant italic)
         (:height 1.2
                  :slant italic))
        (org-level-1
         (:inherit variable-pitch
                   :height 1.3
                   :weight bold
                   :foreground ,keyword
                   :background ,bg-dark)
         (:inherit nil
                   :family ,et-font
                   :height 1.6
                   :weight normal
                   :slant normal
                   :foreground ,bg-dark)
         (:inherit nil
                   :family ,et-font
                   :height 1.6
                   :weight normal
                   :slant normal
                   :foreground ,bg-light))
        (org-level-2
         (:inherit variable-pitch
                   :weight bold
                   :height 1.2
                   :foreground ,gray
                   :background ,bg-dark)
         (:inherit nil
                   :family ,et-font
                   :weight normal
                   :height 1.3
                   :slant italic
                   :foreground ,bg-dark)
         (:inherit nil
                   :family ,et-font
                   :weight normal
                   :height 1.3
                   :slant italic
                   :foreground ,bg-light))
        (org-level-3
         (:inherit variable-pitch
                   :weight bold
                   :height 1.1
                   :foreground ,slate
                   :background ,bg-dark)
         (:inherit nil
                   :family ,et-font
                   :weight normal
                   :slant italic
                   :height 1.2
                   :foreground ,bg-dark)
         (:inherit nil
                   :family ,et-font
                   :weight normal
                   :slant italic
                   :height 1.2
                   :foreground ,bg-light))
        (org-level-4
         (:inherit variable-pitch
                   :weight bold
                   :height 1.1
                   :foreground ,slate
                   :background ,bg-dark)
         (:inherit nil
                   :family ,et-font
                   :weight normal
                   :slant italic
                   :height 1.1
                   :foreground ,bg-dark)
         (:inherit nil
                   :family ,et-font
                   :weight normal
                   :slant italic
                   :height 1.1
                   :foreground ,bg-light))
        (org-level-5
         (:inherit variable-pitch
                   :weight bold
                   :height 1.1
                   :foreground ,slate
                   :background ,bg-dark)
         nil
         nil)
        (org-level-6
         (:inherit variable-pitch
                   :weight bold
                   :height 1.1
                   :foreground ,slate
                   :background ,bg-dark)
         nil
         nil)
        (org-level-7
         (:inherit variable-pitch
                   :weight bold
                   :height 1.1
                   :foreground ,slate
                   :background ,bg-dark)
         nil
         nil)
        (org-level-8
         (:inherit variable-pitch
                   :weight bold
                   :height 1.1
                   :foreground ,slate
                   :background ,bg-dark)
         nil
         nil)
        (org-headline-done
         (:strike-through t)
         (:family ,et-font
                  :strike-through t)
         (:family ,et-font
                  :strike-through t))
        (org-quote
         (:background ,bg-dark)
         nil
         nil)
        (org-block
         (:background ,bg-dark
                      :inhert fixed-pitch)
         (:background nil
                      :foreground ,bg-dark
                      :inhert fixed-pitch)
         (:background nil
                      :foreground ,bg-light
                      :inhert fixed-pitch))
        (org-block-begin-line
         (:background ,bg-dark)
         (:background nil
                      :height 0.8
                      :family ,sans-mono-font
                      :foreground ,slate)
         (:background nil
                      :height 0.8
                      :family ,sans-mono-font
                      :foreground ,slate))
        (org-block-end-line
         (:background ,bg-dark)
         (:background nil
                      :height 0.8
                      :family ,sans-mono-font
                      :foreground ,slate)
         (:background nil
                      :height 0.8
                      :family ,sans-mono-font
                      :foreground ,slate))
        (org-document-info-keyword
         (:foreground ,comment)
         (:height 0.8
                  :foreground ,gray)
         (:height 0.8
                  :foreground ,gray-dark))
        (org-link
         (:underline nil
                     :weight normal
                     :foreground ,slate)
         (:foreground ,bg-dark)
         (:foreground ,bg-light))
        (org-special-keyword
         (:height 0.9
                  :foreground ,comment)
         (:family ,sans-mono-font
                  :height 0.8)
         (:family ,sans-mono-font
                  :height 0.8))
        (org-todo
         (:foreground ,builtin
                      :background ,bg-dark)
         nil
         nil)
        (org-done
         (:inherit variable-pitch
                   :foreground ,dark-cyan
                   :background ,bg-dark)
         nil
         nil)
        (org-agenda-current-time
         (:foreground ,slate)
         nil
         nil)
        (org-hide
         nil
         (:foreground ,bg-white)
         (:foreground ,bg-darker))
        (org-indent
         (:inherit org-hide)
         (:inherit (org-hide fixed-pitch))
         (:inherit (org-hide fixed-pitch)))
        (org-time-grid
         (:foreground ,comment)
         nil
         nil)
        (org-warning
         (:foreground ,builtin)
         nil
         nil)
        (org-date
         nil
         (:family ,sans-mono-font
                  :height 0.8)
         (:family ,sans-mono-font
                  :height 0.8))
        (org-agenda-structure
         (:height 1.3
                  :foreground ,doc
                  :weight normal
                  :inherit variable-pitch)
         nil
         nil)
        (org-agenda-date
         (:foreground ,doc
                      :inherit variable-pitch)
         ;; (:inherit variable-pitch
         ;;           :height 1.1)
         nil
         nil)
        (org-agenda-date-today
         (:height 1.5
                  :foreground ,keyword
                  :inherit variable-pitch)
         nil
         nil)
        (org-agenda-date-weekend
         (:inherit org-agenda-date)
         nil
         nil)
        (org-scheduled
         (:foreground ,gray)
         nil
         nil)
        (org-upcoming-deadline
         (:foreground ,keyword)
         nil
         nil)
        (org-scheduled-today
         (:foreground ,fg-white)
         nil
         nil)
        (org-scheduled-previously
         (:foreground ,slate)
         nil
         nil)
        (org-agenda-done
         (:inherit nil
                   :strike-through t
                   :foreground ,doc)
         (:strike-through t
                          :foreground ,doc)
         (:strike-through t
                          :foreground ,doc))
        (org-ellipsis
         (:underline nil
                     :foreground ,comment)
         (:underline nil
                     :foreground ,comment)
         (:underline nil
                     :foreground ,comment))
        (org-tag
         (:foreground ,doc)
         (:foreground ,doc)
         (:foreground ,doc))
        (org-table
         (:background nil
                      :inherit fixed-pitch)
         (:family ,serif-mono-font
                  :height 1.0
                  :background ,bg-white
                  :inherit fixed-pitch)
         (:family ,serif-mono-font
                  :height 1.0
                  :background ,bg-darker
                  :inherit fixed-pitch))
        (org-formula
         (:inherit font-lock-builtin-face)
         (:inherit fixed-pitch
                   :family ,serif-mono-font
                   :foreground ,keyword
                   :height 1.0)
         (:inherit fixed-pitch
                   :family ,serif-mono-font
                   :foreground ,keyword
                   :height 1.0))
        (org-code
         (:inherit font-lock-builtin-face)
         (:inherit fixed-pitch
                   :family ,serif-mono-font
                   :foreground ,comment
                   :height 1.0)
         (:inherit fixed-pitch
                   :family ,serif-mono-font
                   :foreground ,comment
                   :height 1.0))
        (font-latex-sectioning-0-face
         (:foreground ,type
                      :height 1.2)
         nil
         nil)
        (font-latex-sectioning-1-face
         (:foreground ,type
                      :height 1.1)
         nil
         nil)
        (font-latex-sectioning-2-face
         (:foreground ,type
                      :height 1.1)
         nil
         nil)
        (font-latex-sectioning-3-face
         (:foreground ,type
                      :height 1.0)
         nil
         nil)
        (font-latex-sectioning-4-face
         (:foreground ,type
                      :height 1.0)
         nil
         nil)
        (font-latex-sectioning-5-face
         (:foreground ,type
                      :height 1.0)
         nil
         nil)
        (font-latex-verbatim-face
         (:foreground ,builtin)
         nil
         nil)))
      )
   #+END_SRC
** Posframe
   #+begin_src emacs-lisp
     ;; (use-package ivy-posframe
     ;;   ;; (push '(spacemacs/ivy-spacemacs-layouts . ivy-posframe-display-at-window-bottom-left) ivy-display-functions-alist)
     ;;   ;; (push '(complete-symbol . ivy-posframe-display-at-point) ivy-display-functions-alist)
     ;;   ;; ;; not enable in swiper since it cause trouble for long lines
     ;;   ;; (push '(swiper . ivy-posframe-display-at-point) ivy-display-functions-alist)
     ;;   ;; (setq ivy-display-function #'ivy-posframe-display)
     ;;   :diminish (ivy-posframe)
     ;;   :config
     ;;   (push '(counsel-M-x . ivy-posframe-display-at-window-bottom-left) ivy-display-functions-alist)
     ;;   (ivy-posframe-enable))

     (use-package company-posframe
       :commands (company-posframe-mode yang/company-posframe-helper)
       :after (company)
       :diminish company-posframe-mode
       :init
       (defun yang/company-posframe-helper (&optional frame)
         (message "Helper for company-posframe called")
         (company-posframe-mode 1))
       (run-with-timer 10 nil #'yang/company-posframe-helper))
   #+end_src

* Ergonomic keybindings
  #+BEGIN_SRC emacs-lisp
    ;; Ergonomic keybinding M-<hjkl>
    (with-eval-after-load 'evil-evilified-state
      (mapc (lambda (keymap)
              ;; Normal-mode, hjkl
              (define-key keymap (kbd "M-h") 'evil-backward-char)
              (define-key keymap (kbd "M-l") 'evil-forward-char)
              (define-key keymap (kbd "M-k") 'evil-previous-visual-line)
              (define-key keymap (kbd "M-j") 'evil-next-visual-line)

              ;; Move to beginning/ending of line
              (define-key keymap (kbd "M-H") 'move-beginning-of-line)
              (define-key keymap (kbd "M-L") 'move-end-of-line)
              (define-key keymap (kbd "C-a") 'move-beginning-of-line)
              (define-key keymap (kbd "C-e") 'move-end-of-line)
              ;; Scroll up/down
              (define-key keymap (kbd "M-J") 'evil-scroll-down)
              (define-key keymap (kbd "M-K") 'evil-scroll-up)
              ;; ;; delete-char
              ;; (define-key keymap (kbd "C-d") 'delete-char)
              )
            `(,evil-insert-state-map
              ,evil-motion-state-map
              ,evil-visual-state-map
              ,evil-evilified-state-map-original)))

    ;; fix some keybinding problems
    ;; fix for js2-mode
    (use-package js2-mode
      :defer t
      :bind (:map js2-mode-map
                  ("M-j" . nil)))

    (evil-define-key '(normal insert motion visual) evil-org-mode-map
      (kbd "M-h") nil
      (kbd "M-j") nil
      (kbd "M-k") nil
      (kbd "M-l") nil
      (kbd "M-H") nil
      (kbd "M-J") nil
      (kbd "M-K") nil
      (kbd "M-L") nil
      ;; actually unset all the following
      ;; (kbd "M-h") 'org-metaleft
      ;; (kbd "M-j") 'org-metadown
      ;; (kbd "M-k") 'org-metaup
      ;; (kbd "M-l") 'org-metaright
      ;; (kbd "M-H") 'org-shiftmetaleft
      ;; (kbd "M-J") 'org-shiftmetadown
      ;; (kbd "M-K") 'org-shiftmetaup
      ;; (kbd "M-L") 'org-shiftmetaright
      )
  #+END_SRC
  
* Emacs-lisp
  #+begin_src emacs-lisp
    (use-package lispy
      :init
      (defun yang/enable-lispy-mode ()
        (lispy-mode 1))
      ;; enable lispy-mode in emacs-lisp-mode
      (add-hook 'emacs-lisp-mode-hook #'yang/enable-lispy-mode)

      ;; enable lispy-mode in minibuffer
      (defun conditionally-enable-lispy ()
        (when (eq this-command 'eval-expression)
          (lispy-mode 1)))
      (add-hook 'minibuffer-setup-hook 'conditionally-enable-lispy)
      :diminish lispy-mode)

  #+end_src
* org-mode
  #+BEGIN_SRC emacs-lisp
    ;; wrap in with-eval-after-load, see
    ;; http://spacemacs.org/layers/+emacs/org/README.html#important-note
    (with-eval-after-load 'org
      (setq
       ;; place tags directly after headline text, with only one space in between
       org-tags-column 0
       ;; Highlight latex text in org mode
       org-highlight-latex-and-related '(latex script entities)
       ;; do not treat bare '_' as indication of subscript,
       ;; require a_{x} to indicate subscript
       org-use-sub-superscripts '{}
       org-startup-truncated nil
       org-src-window-setup 'current-window
       org-todo-keywords
       '((sequence "TODO(t)" "PUSHED(p@)" "NEXT(n)" "INACTIVE(i@/!)" "WAIT(w@/!)" "|" "DONE(d!)")
         (sequence "|" "CANCLED(c@)"))
       org-startup-truncated nil
       org-M-RET-may-split-line '((default))
       org-extend-today-until 3 ;; before 3 a.m. is still considered "today"
       org-refile-targets '((nil :maxlevel . 3)
                            (org-agenda-files :maxlevel . 3))
       )

      ;; restore easy templates, can also use =, i b= to insert
      (require 'org-tempo)
      (add-to-list 'org-structure-template-alist (cons "se" "src emacs-lisp"))

      (org-add-link-type
       "span" #'ignore ; not an 'openable' link
       #'(lambda (class desc format)
           (pcase format
             (`html (format "<span class=\"%s\">%s</span>"
                            (jw/html-escape-attribute class)
                            (or desc "")))
             (_ (or desc "")))))
      ;; ;; actually insert space with pangu-spacing for org-mode, to fix indentation
      ;; ;; in table
      ;; (set (make-local-variable 'pangu-spacing-real-insert-separtor) t)
      (add-to-list 'org-babel-load-languages '(latex . t))

      (defun yang/org-wrap-span (beg end)
        (interactive "r")
        (let ((class-name (read-string "Enter the class for span: ")))
          (save-excursion
            (goto-char end) (insert ")}}}")
            (goto-char beg) (insert (format "{{{SPAN(%s," class-name)))))
      )
  #+END_SRC

** org-pdfview
   #+BEGIN_SRC emacs-lisp
   (use-package org-pdfview
     :ensure t
     :after (org)
     :config
     (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link))))
     (add-hook
      'pdf-view-mode-hook
      (lambda ()
        (pdf-view-set-slice-from-bounding-box)
        (pdf-view-fit-width-to-window)))
     )
   #+END_SRC
   
** org-gcal
   #+BEGIN_SRC emacs-lisp
     (when (string= system-name "carbon")
       (use-package org-gcal
         :defer t
         :init
         (setq org-gcal-dir (concat dotspacemacs-directory
                                    "org-gcal/"))
         :config
         (setq
          org-gcal-file-alist '(("yangsheng6810@gmail.com" .  "~/Documents/org/gcal.org")))

         ;; (defun org-gcal-capture-after-func ()
         ;;   (message "run org-gcal-post-at-point")
         ;;   (org-gcal-post-at-point)
         ;;   (remove-hook 'org-capture-after-finalize-hook #'org-gcal-capture-after-func))

         ;; (defun org-gcal-capture-before-func ()
         ;;   (let* ((buffer-name (prin1-to-string (current-buffer))))
         ;;     (dolist (pair org-gcal-file-alist )
         ;;       (when (and pair (cdr pair)
         ;;                  (string= buffer-file-name (expand-file-name (cdr pair))))
         ;;         (add-hook 'org-capture-after-finalize-hook #'org-gcal-capture-after-func)))))

         ;; (add-hook 'org-capture-before-finalize-hook #'org-gcal-capture-before-func)
         ))
   #+END_SRC

** org-journal
   #+BEGIN_SRC emacs-lisp
     (use-package org-journal
       ;; :init
       ;; (setq org-journal-dir "~/Documents/org/journal/"
       ;;       org-journal-date-format "%x %A")
       :config
       (defun org-journal-find-location ()
         ;; Open today's journal, but specify a non-nil prefix argument in order to
         ;; inhibit inserting the heading; org-capture will insert the heading.
         (org-journal-new-entry t)
         ;; Position point on the journal's top-level heading so that org-capture
         ;; will add the new entry as a child entry.
         (goto-char (point-min)))

       (set-keymap-parent spacemacs-org-journal-mode-map spacemacs-org-mode-map)
       (set-keymap-parent spacemacs-org-journal-mode-map-prefix spacemacs-org-mode-map-prefix)
       (set-keymap-parent spacemacs-org-journal-mode-map-root-map spacemacs-org-mode-map-root-map)

       (defun yang/switch-to-journal-today ()
         "Switch to today's org-journal file"
         (interactive)
         (org-journal-new-entry t))

       (spacemacs/set-leader-keys "bj" 'yang/switch-to-journal-today)
       (spacemacs/set-leader-keys "bJ" 'org-journal-new-entry)

     ;;   ;; override default function as it prints out lots of messages
     ;;   (defun org-journal-update-org-agenda-files ()
     ;;     "Adds the current and future journal files to org-agenda-files.
     ;; And cleans out past org-journal files."
     ;;     (when org-journal-enable-agenda-integration
     ;;       (let ((agenda-files-without-org-journal
     ;;              (seq-filter
     ;;               (lambda (f)
     ;;                 ;; (message "DEBUG: %s %s"
     ;;                 ;;          (expand-file-name (file-name-directory f))
     ;;                 ;;          (expand-file-name (file-name-as-directory org-journal-dir)))
     ;;                 (not (and (string= (expand-file-name (file-name-directory f))
     ;;                                    (expand-file-name (file-name-as-directory org-journal-dir)))
     ;;                           (string-match org-journal-file-pattern (file-name-nondirectory f)))))
     ;;               org-agenda-files))
     ;;             (org-journal-agenda-files
     ;;              (seq-filter
     ;;               ;; skip files that are older than today
     ;;               (lambda (f)
     ;;                 (not (time-less-p
     ;;                       (org-journal-calendar-date->time
     ;;                        (org-journal-file-name->calendar-date
     ;;                         (file-name-nondirectory f)))
     ;;                       (time-subtract (current-time) (days-to-time 1)))))
     ;;               (directory-files org-journal-dir t
     ;;                                org-journal-file-pattern))))
     ;;         (setq org-agenda-files (append agenda-files-without-org-journal
     ;;                                        org-journal-agenda-files)))))
       )
   #+END_SRC

** org-agenda
   :PROPERTIES:
   :ID:       d3110ee0-3505-4775-8d15-ba2b1d9f7f4b
   :END:
   #+BEGIN_SRC emacs-lisp
     (use-package org-agenda
       :init
       (setq org-agenda-files
             '("~/Documents/org/papers.org"
               "~/Documents/org/Tasks.org"
               "~/Documents/org/Birthdays.org"
               "~/Documents/org/gcal.org"
               "~/Documents/org/Schedule.org"))
       :config
       (mapc
        (lambda (value)
          (add-to-list
           'org-agenda-custom-commands value
          ;; nil (lambda (ele1 ele2)
          ;;       (equal (car ele1) (car ele2)))
          ))
        '(
          ("W" "Weekly Review"
           ((agenda "" ((org-agenda-span 7))); review upcoming deadlines and appointments
                                             ; type "l" in the agenda to review logged items
            (stuck "") ; review stuck projects as designated by org-stuck-projects
            ;; (todo "PROJECT") ; review all projects (assuming you use todo keywords to designate projects)
            ;; (todo "MAYBE") ; review someday/maybe items
            (todo "WAIT"))) ; review waiting items
          ("g" . "GTD contexts")
          ("gc" "Computer" tags-todo "computer|linux|emacs"
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
            (org-agenda-overriding-header "Unscheduled computer tasks")))
          ("ge" "Emacs" tags-todo "emacs"
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
            (org-agenda-overriding-header "Unscheduled emacs tasks")))
          ("gh" "Home" tags-todo "home"
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
            (org-agenda-overriding-header "Unscheduled home tasks")))
          ("gl" "Life" tags-todo "life"
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
            (org-agenda-overriding-header "Unscheduled life tasks")))
          ("gp" "Photography" tags-todo "photography|photo"
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
            (org-agenda-overriding-header "Unscheduled photography tasks")))
          ("gr" "Research" tags-todo "research"
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
            (org-agenda-overriding-header "Unscheduled research tasks")))
          ("d" "Upcoming deadlines" agenda ""
           ((org-agenda-entry-types '(:deadline))
            (org-agenda-span 14)
            (org-agenda-time-grid nil)))

          ("r" . "Weekly review")
          ("rw" "Last week"
           ((tags "TIMESTAMP_IA>=\"<-9d>\"+TIMESTAMP_IA<=\"<today>\"/DONE"
                  ((org-agenda-overriding-header "Got inactive in the last week")))
            (tags "TIMESTAMP>=\"<-9d>\"+TIMESTAMP<=\"<today>\"/DONE"
                  ((org-agenda-overriding-header "Happened in the last week")
                   (org-agenda-files '("~/Documents/org/Schedule.org"
                                       "~/Documents/org/Research.org"
                                       "~/Documents/org/gcal.org"
                                       "~/Documents/org/papers.org"
                                       "~/Documents/org/Tasks.org"))))
            (tags "SCHEDULED>=\"<-9d>\"+SCHEDULED<=\"<today>\"/DONE"
                  ((org-agenda-overriding-header "Scheduled and finished in the last week")
                   (org-agenda-repeating-timestamp-show-all t)   ;; ensures that repeating events appear on all relevant dates
                   ))
            (tags "SCHEDULED>=\"<-9d>\"+SCHEDULED<=\"<today>\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Scheduled but didn't finished in the last week")))))
          ("c" "Weekly schedule" agenda ""
           ((org-agenda-span 7)           ;; agenda will start in week view
            (org-agenda-repeating-timestamp-show-all t)   ;; ensures that repeating events appear on all relevant dates
            (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
          )))
   #+END_SRC
   This shows the current week from today, but also the past three days.
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-span 10
           org-agenda-start-on-weekday nil
           org-agenda-start-day "-3d")
   #+END_SRC

** org clock
   #+BEGIN_SRC emacs-lisp
     (use-package org-timer
       :defer t
       :commands (org-timer-pause-or-continue)
       :init
       (use-package org-timer
         :defer t
         :commands (org-clock-modify-effort-estimate org-info)
         :init
         (message "Defining hydra for org-clock")
         (defhydra hydra-org-clock (:color blue :hint nil)
           "
     ^Clock:^ ^In/out^     ^Edit^   ^Summary^    | ^Timers:^ ^Run^           ^Insert
     -^-^-----^-^----------^-^------^-^----------|--^-^------^-^-------------^------
     (_?_)    _i_n         _e_dit   _g_oto entry | (_z_)     _r_elative      ti_m_e
      ^ ^     _c_ontinue   _q_uit   _d_isplay    |  ^ ^      cou_n_tdown     i_t_em
      ^ ^     _o_ut        ^ ^      _r_eport     |  ^ ^      _p_ause toggle
      ^ ^     ^ ^          ^ ^      ^ ^          |  ^ ^      _s_top
     "
           ("i" org-clock-in)
           ("c" org-clock-in-last)
           ("o" org-clock-out)

           ("e" org-clock-modify-effort-estimate)
           ("q" org-clock-cancel)

           ("g" org-clock-goto)
           ("d" org-clock-display)
           ("r" org-clock-report)
           ("?" (org-info "Clocking commands"))

           ("r" org-timer-start)
           ("n" org-timer-set-timer)
           ("p" org-timer-pause-or-continue)
           ("s" org-timer-stop)

           ("m" org-timer)
           ("t" org-timer-item)
           ("z" (org-info "Timers")))
         (bind-keys ("C-c w" . hydra-org-clock/body))))

     (use-package org-agenda
       :defer t
       :commands (org-agenda-clock-in
                  org-agenda-clock-out
                  org-agenda-clock-cancel
                  org-agenda-clock-goto)
       :init
       (defhydra hydra-org-agenda-clock (:color blue :hint nil)
           "
     clock _i_n   clock _o_ut   _q_uit   _g_oto
     "
         ("i" org-agenda-clock-in)
         ("o" org-agenda-clock-out)
         ("q" org-agenda-clock-cancel)
         ("g" org-agenda-clock-goto))

       ;; use-package :bind does not work with hydra
       :bind (:map org-agenda-mode-map
                  ("C-c w" . hydra-org-agenda-clock/body))
       )
     ;; Resume clocking task when emacs is restarted
     (org-clock-persistence-insinuate)
     ;; Save the running clock and all clock history when exiting Emacs, load it on startup
     (setq org-clock-persist t)
     ;; Show lot of clocking history so it's easy to pick items
     (setq org-clock-history-length 23)

     ;; Set default column view headings: Task Total-Time Time-Stamp
     (setq org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA"
           org-agenda-skip-scheduled-if-done t
           org-agenda-skip-deadline-if-done t
           )
   #+END_SRC

** org-capture
   #+BEGIN_SRC emacs-lisp
     (setq org-capture-templates
           '(
             ("c" "Computer")
             ("ce" "Emacs" entry
              (file+headline "~/Documents/org/Computer.org" "Emacs")
              "* %? \n  %u")
             ("cl" "Linux" entry
              (file+headline "~/Documents/org/Computer.org" "Linux")
              "* %? \n  %u")
             ("cp" "Python" entry
              (file+headline "~/Documents/org/Computer.org" "Python")
              "* %?\n  %u")
             ("cw" "Windows" entry
              (file+headline "~/Documents/org/Computer.org" "Windows")
               "* %? \n  %u")
             ("g" "Calendar" entry
              (file "~/Documents/org/gcal.org")
              "* %?\n  \n  %^T")
             ("j" "Journal entry" entry
              (function org-journal-find-location)
              "* %(format-time-string org-journal-time-format)%^{Title}\n  %i%?")
             ("n" "Notes" entry
              (file+olp+datetree "~/Documents/org/Notes.org")
              "" :time-prompt t)
             ("r" "Research" entry
              (file+olp+datetree "~/Documents/org/Research.org")
              "* %?\n  %u" :prepend t :clock-in t :clock-resume t)
             ("s" "Schedule" entry
              (file+olp+datetree "~/Documents/org/Schedule.org")
              "")
             ("t" "Tasks")
             ("tb" "Book" entry
              (file+headline "~/Documents/org/Tasks.org" "Book")
              "* TODO %^{Book title}\n%u\n%a\n" :clock-in t :clock-resume t)
             ("tc" "Computer" entry
              (file+headline "~/Documents/org/Tasks.org" "Computer")
              "* TODO %^{Topic} :computer:\n %u\n %a\n" :clock-in t :clock-resume t)
             ("tf" "Food" entry
              (file+headline "~/Documents/org/Tasks.org" "Food")
              "* TODO %^{Food} :food:\n %u\n %a\n" :clock-in t :clock-resume t)
             ("tr" "Research" entry
              (file+headline "~/Documents/org/Tasks.org" "Research")
              "* TODO %^{Title} :research:\n%u\n%a\n" :clock-in t :clock-resume t)
             ("ti" "Idea" entry
              (file+headline "~/Documents/org/Tasks.org" "Idea")
              "* TODO %^{Idea} :idea:\n%u\n%a\n" :clock-in t :clock-resume t)
             ("tn" "Not grouped" entry
              (file+headline "~/Documents/org/Tasks.org" "Not grouped")
              "* TODO %^{Subject}\n%u\n%a\n" :clock-in t :clock-resume t)
             ("x" "Exercise" entry
              (file+olp+datetree "~/Documents/org/Exercise.org")
              "* %?\n  %u" :time-prompt t)))
   #+END_SRC

** hydra for org
   #+BEGIN_SRC emacs-lisp
     (defhydra yang/hydra-org-mode (:color blue :hint nil)
     ;;   "
     ;;      ^Clock:^ ^In/out^     ^Edit^   ^Summary^    | ^Timers:^ ^Run^           ^Insert
     ;;      -^-^-----^-^----------^-^------^-^----------|--^-^------^-^-------------^------
     ;;      (_?_)    _i_n         _e_dit   _g_oto entry | (_z_)     _r_elative      ti_m_e
     ;;       ^ ^     _c_ontinue   _q_uit   _d_isplay    |  ^ ^      cou_n_tdown     i_t_em
     ;;       ^ ^     _o_ut        ^ ^      _r_eport     |  ^ ^      _p_ause toggle
     ;;       ^ ^     ^ ^          ^ ^      ^ ^          |  ^ ^      _s_top
     ;; "
       "
             _l_ store-link   _L_ insert-last-link   insert _i_d
     "
                ("l" org-store-link)
                ("L" org-insert-last-stored-link)
                ("i" org-id-store-link)
       )
     (spacemacs/set-leader-keys "o" 'yang/hydra-org-mode/body)
   #+END_SRC

** org-refile
   [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][ref]], [[https://github.com/abo-abo/swiper/issues/444][ref]]
   #+BEGIN_SRC emacs-lisp
     (setq org-refile-use-outline-path 'file
           org-outline-path-complete-in-steps nil
           ;; creating new parent
           org-refile-allow-creating-parent-nodes t)
   #+END_SRC
** org-reveal
   #+begin_src emacs-lisp
     ;; (use-package ox-reveal)
   #+end_src

** org-ref
   #+BEGIN_SRC emacs-lisp
     (setq reftex-default-bibliography '("~/Documents/org/bibliography/references.bib"))

     ;; see org-ref for use of these variables
     (setq org-ref-bibliography-notes "~/Documents/org/bibliography/notes.org"
           org-ref-default-bibliography '("~/Documents/org/bibliography/references.bib")
           org-ref-pdf-directory "~/Documents/Library/bibtex-pdfs/")
     (setq bibtex-completion-bibliography "~/Documents/org/bibliography/references.bib"
           bibtex-completion-library-path "~/Documents/Library/bibtex-pdfs"
           bibtex-completion-notes-path "~/Documents/org/bibliography/helm-bibtex-notes")

     (use-package org-ref
       :commands (org-ref-insert-link org-ref-get-bibtex-key-and-file org-ref-bibtex-hydra/body)
       :bind (:map
              org-mode-map
              ("C-c ]" . org-ref-insert-link)
              :map
              bibtex-mode-map
              ("C-c h" . org-ref-bibtex-hydra/body))
       :config
       (org-ref-ivy-cite-completion)
       (defun yang/org-ref-open-pdf-at-point ()
         "Open the pdf for bibtex key under point with xdg-open if it exists."
         (interactive)
         (let* ((results (org-ref-get-bibtex-key-and-file))
                (key (car results))
                (pdf-file (funcall org-ref-get-pdf-filename-function key)))
           (if (file-exists-p pdf-file)
               (call-process-shell-command (concat "xdg-open " pdf-file) nil 0 nil)
             (message "no pdf found for %s" key))))
       (defhydra+ org-ref-cite-hydra ()
         ("P" yang/org-ref-open-pdf-at-point "Open pdf with xdg-open")))

     (use-package parsebib
       :commands (parsebib-find-bibtex-dialect))
   #+END_SRC

* LaTeX
  #+BEGIN_SRC emacs-lisp
    ;; LaTeX hook
    (defun yang/LaTeX-setup ()
      (turn-on-reftex)
      (add-to-list 'TeX-command-list '
                   ("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
      (setq TeX-auto-save t)
      (LaTeX-math-mode)
      (imenu-add-menubar-index)
      ;; (setq LaTeX-command-style
      ;;       (quote (("\\`fontspec\\'" "xelatex ")
      ;;               ("" "%(PDF)%(latex) %S%(PDFout)"))))
      ;; (custom-set-variables
      ;;     '(preview-fast-dvips-command "pdftops -origpagesizes %s.pdf %m/preview.ps"))
      (setq TeX-save-query nil)
      (setq TeX-parse-self t)
      (setq TeX-output-view-style
            (cons '("^pdf$" "." "evince  %o ") TeX-output-view-style))
      ;; (set-default 'preview-default-document-pt 12)
      ;; (set-default 'preview-scale-function 1.2)
      ;; (setq preview-required-option-list
      ;; 	  (quote ("active" "tightpage" "auctex" "xetex" (preview-preserve-counters "counters"))))
      (setq preview-default-option-list
            (quote ("displaymath" "floats" "graphics" "textmath" "showlabels")))
      (TeX-engine-set "default")
      (LaTeX-add-environments
       "definition"
       "example"
       "tikzpicture"
       "corallary"
       "align*"
       "theorem"
       "proof"
       "lemma"
       ;; '("tikzpicture" LaTeX-env-tikz)
       )
      ;; enable TeX-fold-buffer
      (add-hook 'find-file-hook 'TeX-fold-buffer t t)
      (setq preview-auto-cache-preamble t)
      (rainbow-delimiters-mode-enable)
      (setq fill-column 10000)
      ;; (turn-off-auto-fill)
      (olivetti-mode 1)
      ;; (define-key LaTeX-mode-map (kbd "C-s") #'yang/swiper)

      (spacemacs/set-leader-keys-for-major-mode 'latex-mode
        "zc" 'TeX-fold-comment)

      (defun yang/LaTeX-narrow-to-section ()
        (interactive)
        (save-excursion
          (LaTeX-mark-section)
          (narrow-to-region (point) (mark))
          (deactivate-mark)))
      )

    (use-package latex
      :commands (LaTeX-math-mode))
    (add-hook 'LaTeX-mode-hook #'yang/LaTeX-setup)
    (add-hook 'org-mode-hook #'LaTeX-math-mode)
  #+END_SRC

** preview
   adapted from [[https://emacs.stackexchange.com/questions/406/see-latex-code-and-math-preview-at-the-same-time-with-preview-latex][keep old preview visible when editing]]
   #+begin_src emacs-lisp
     (with-eval-after-load 'preview
       (defun yang/preview-inactive-string-adv (func ov)
         "Show old preview when editing source code."
         (when (overlay-get ov 'preview-state)
           (let ((preview-icon (or (car-safe (overlay-get ov 'preview-image)) preview-icon)))
             (overlay-put ov 'preview-old-image preview-icon)
             (funcall func ov))))

       (advice-add #'preview-inactive-string :around #'yang/preview-inactive-string-adv)

       (defun yang/preview-disabled-string-adv (func ov)
         (when (overlay-get ov 'preview-state)
           (let ((preview-icon (or (overlay-get ov 'preview-old-image) preview-icon)))
             (funcall func ov))))

       (advice-add #'preview-disabled-string :around #'yang/preview-disable-string-adv))
   #+end_src
** bibtex
   #+BEGIN_SRC emacs-lisp
     (use-package reftex
       :commands (reftex-parse-all)
       :after (dash s)
       :config
       (defun yang/reftex-get-bib-names (func field entry)
         "Return a list with the full author or editor names in ENTRY.
     If FIELD is empty try \"editor\" field."
         (if (eq #'org-ref-open-bibtex-notes this-command)
             (let ((names (reftex-get-bib-field field entry)))
               (message "This command is %s" this-command)
               (if (equal "" names)
                   (setq names (reftex-get-bib-field "editor" entry)))
               (cl-loop for name in (s-split "[ \t]*\\band\\b[ \t]*" names) collect
                        (let ((name-list (s-split "[ \t]*,[ \t]*" name)))
                          (s-join " " (-concat (-take-last 1 name-list) (-drop-last 1 name-list))))))
           (funcall func field entry)))

       (advice-add #'reftex-get-bib-names :around #'yang/reftex-get-bib-names))

     (add-hook 'bibtex-mode-hook
               (lambda ()
                 (add-hook 'after-save-hook 'reftex-parse-all nil 'make-it-local)))

   #+END_SRC
* Python
  #+BEGIN_SRC emacs-lisp
    (setq-default python-indent 4)
    ;; bug fix for python-mode
    (setq python-shell-native-complete nil)
    (use-package company-jedi             ;;; company-mode completion back-end for Python JEDI
      :defer t
      :ensure t
      :config
      (add-hook 'python-mode-hook 'jedi:setup)
      (setq jedi:complete-on-dot t)
      (setq jedi:use-shortcuts t)
      (defun config/enable-company-jedi ()
        (add-to-list 'company-backends 'company-jedi))
      (add-hook 'python-mode-hook 'config/enable-company-jedi))

    (use-package lsp-mode
      :hook (python-mode . lsp)
      :commands lsp)

    ;; optionally
    (use-package lsp-ui :commands lsp-ui-mode)
    (use-package company-lsp :commands company-lsp)
    (use-package helm-lsp :commands helm-lsp-workspace-symbol)
    (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
    ;; optionally if you want to use debugger
    ;; (use-package dap-mode)
    ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
  #+END_SRC

* Git
  #+BEGIN_SRC emacs-lisp
   (setq-default git-magit-status-fullscreen t)
   (add-hook 'magit-diff-mode-hook
             (lambda ()
               (visual-line-mode 1)))
   (add-hook 'magit-status-mode-hook
             (lambda ()
               (visual-line-mode 1)))
    (setq magit-diff-refine-hunk 'all)
    (global-git-commit-mode t)
  #+END_SRC
  
** Close manually opened magit-diff when commit finishes
   #+BEGIN_SRC emacs-lisp
     (defun yang-close-diff-after-commit ()
       (message "in yang-close-diff-after-commit")
       (let ((magit-display-buffer-noselect t)
             (diff-buf (magit-mode-get-buffer 'magit-diff-mode)))
         (if (and diff-buf
                  (get-buffer-window diff-buf))
             (with-current-buffer diff-buf
               (kill-this-buffer)))))

     (add-hook 'with-editor-pre-finish-hook #'yang-close-diff-after-commit)
     (add-hook 'with-editor-pre-cancel-hook #'yang-close-diff-after-commit)
   #+END_SRC
* web-mode
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'web-mode
      (setq
       web-mode-enable-auto-closing t
       web-mode-enable-auto-indentation t
       web-mode-enable-auto-opening t
       web-mode-enable-auto-pairing t
       web-mode-enable-auto-quoting t
       web-mode-enable-css-colorization t
       ;; remove emmet from company-mode backends in web-mode
       company-web-html-emmet-enable nil
       company-minimum-prefix-length 2
       )
      (defun try-emmet-expand-line (args)
        (interactive "P")
        (when emmet-mode
          (emmet-expand-line args)))
      ;; add emmet to hippie-expand backends
      (add-to-list 'hippie-expand-try-functions-list
                   'try-emmet-expand-line)
      )

    (defun jw/html-escape-attribute (value)
      "Entity-escape VALUE and wrap it in quotes."
      ;; http://www.w3.org/TR/2009/WD-html5-20090212/serializing-html-fragments.html
      ;;
      ;; "Escaping a string... consists of replacing any occurrences of
      ;; the "&" character by the string "&amp;", any occurrences of the
      ;; U+00A0 NO-BREAK SPACE character by the string "&nbsp;", and, if
      ;; the algorithm was invoked in the attribute mode, any occurrences
      ;; of the """ character by the string "&quot;"..."
      (let* ((value (replace-regexp-in-string "&" "&amp;" value))
             (value (replace-regexp-in-string "\u00a0" "&nbsp;" value))
             (value (replace-regexp-in-string "\"" "&quot;" value)))
        value))
  #+END_SRC

* Search
  #+BEGIN_SRC emacs-lisp
    (defengine dictcn
      "http://dict.cn/%s"
      :docstring "Search Dict.cn")
    ;; use ivy--regex-plus for ivy search
    (setq ivy-re-builders-alist
          '((t . ivy--regex-plus)))

  #+END_SRC

* buffer-management
  #+BEGIN_SRC emacs-lisp
    (use-package ivy-rich
      :defer t
      :init (setq yang-ivy-rich-parse-remote-project nil)
      :config
      (ivy-rich-mode 1)
      (setq ivy-virtual-abbreviate 'full
            ivy-rich-switch-buffer-align-virtual-buffer t
            ivy-rich-path-style 'abbrev)

      (defun ivy-rich-switch-buffer-in-propject-p (candidate)
        (with-current-buffer
            (get-buffer candidate)
          (and (and (bound-and-true-p projectile-mode)
                    (projectile-project-p))
               (not (and (file-remote-p (or (buffer-file-name) default-directory))
                         (or (not ivy-rich-parse-remote-buffer)
                             (not yang-ivy-rich-parse-remote-project))))))))
  #+END_SRC
** Jumb to buffer
   #+begin_src emacs-lisp
     (spacemacs/set-leader-keys "bj" #'frog-jump-buffer)
   #+end_src
  
* Email
** General
   #+begin_src emacs-lisp
     (setq mail-interactive t)

     ;; send mail using mail
     (setq send-mail-function 'sendmail-send-it)
     (setq message-send-mail-function 'message-send-mail-with-sendmail)


     (setq message-signature
           "Sheng Yang(杨圣), PhD student
     Computer Science Department
     University of Maryland, College Park
     E-mail: styang@fastmail.com
     E-mail(old): yangsheng6810@gmail.com")

     (add-hook 'message-mode-hook
               (lambda ()
                 (auto-fill-mode -1)))

   #+end_src
** Mu4e
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'mu4e
       (add-hook 'mu4e-headers-mode-hook
                 (lambda ()
                   (pangu-spacing-mode -1)))

       ;; Call EWW to display HTML messages
       (defun jcs-view-in-eww (msg)
         (eww-browse-url (concat "file://" (mu4e~write-body-to-html msg))))

       ;; Arrange to view messages in either the default browser or EWW
       ;; (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
       (add-to-list 'mu4e-view-actions '("Eww view" . jcs-view-in-eww) t)

       ;;rename files when moving
       ;;NEEDED FOR MBSYNC
       (setq mu4e-change-filenames-when-moving t)

       ;; Try to show images
       (setq mu4e-view-show-images t
             mu4e-show-images t
             mu4e-view-image-max-width 800
             mu4e-view-prefer-html t)
       ;; the next are relative to `mu4e-maildir'
       ;; instead of strings, they can be functions too, see
       ;; their docstring or the chapter 'Dynamic folders'
       (setq mu4e-sent-folder   "/gmail/[Gmail]/已发邮件"
             mu4e-drafts-folder "/gmail/[Gmail]/草稿"
             mu4e-trash-folder  "/gmail/[Gmail]/已删除邮件"
             mu4e-update-interval 300)

       (setq mu4e-headers-fields
           '( (:human-date          .  20)    ;; alternatively, use :human-date
              (:flags         .   6)
              (:from          .  22)
              (:subject       .  nil))) ;; alternatively, use :thread-subject

       (setq mu4e-get-mail-command "mbsync gmail")

       (setq mu4e-compose-signature
             "Sheng Yang(杨圣)
     PhD student
     Computer Science Department
     University of Maryland, College Park
     E-mail: yangsheng6810@gmail.com")
     ;;   (setq mu4e-compose-signature
     ;;         "<#part type=text/html>
     ;; <html>
     ;; <body>
     ;; <p><strong>Sheng Yang(杨圣)</strong</p>
     ;; <p>PhD student</p>
     ;; <p>Computer Science Department</p>
     ;; <p>University of Maryland, College Park</p>
     ;; <p>E-mail: <a href=\"mailto:yangsheng6810@gmail.com\">yangsheng6810@gmail.com</a></p>
     ;; </body>
     ;; </html>
     ;; <#/part>")

       ;; ;; make thread into one page
       ;; (use-package mu4e-conversation)

       (use-package mu4e-alert
         :config
         ;; notification using mu4e-alert
         (mu4e-alert-set-default-style 'libnotify))

       ;; save multiple attachments without asking
       (setq mu4e-save-multiple-attachments-without-asking t)

       ;; use single window
       (setq mu4e-split-view 'single-window)

       (defun mu4e-view-toggle-addresses ()
         (interactive)
         (when (not (local-variable-p mu4e-view-show-addresses))
           (make-local-variable 'mu4e-view-show-addresses)
           (let ((temp mu4e-view-show-addresses))
             (setq mu4e-view-show-addresses temp)))
         (setq mu4e-view-show-addresses (null mu4e-view-show-addresses))
         (mu4e-view-refresh))

       ;; send email using org-mode to form html
       (defun htmlize-and-send ()
         "When in an org-mu4e-compose-org-mode message, htmlize and send it."
         (interactive)
         (when (member 'org~mu4e-mime-switch-headers-or-body post-command-hook)
           (org-mime-htmlize)
           (message-send-and-exit)))

       (add-hook 'org-ctrl-c-ctrl-c-hook 'htmlize-and-send t)

       ;; fix C-h
       (evil-define-key 'evilified mu4e-view-mode-map (kbd "C-h") nil)
       (setq mu4e-headers-include-related nil)
     )
   #+END_SRC
** notmuch
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'notmuch
       (setq notmuch-search-oldest-first nil)
       (setq notmuch-fcc-dirs '((".*" . "sent -inbox +sent -unread")))
       (setq notmuch-message-deleted-tags '("+trash" "-inbox" "-unread"))
       (define-key notmuch-show-mode-map "d"
         (lambda ()
           "toggle deleted tag for message"
           (interactive)
           (if (member "trash" (notmuch-show-get-tags))
               (notmuch-show-tag (list "-trash"))
             (notmuch-show-tag (list "+trash")))))

       (spacemacs/set-leader-keys-for-major-mode 'notmuch-show-mode
         "v" 'notmuch-show-reopen-in-browser)
       (add-hook 'notmuch-mua-send-hook #'notmuch-mua-attachment-check)

       (defun notmuch-describe-key (actual-key binding prefix ua-keys tail)
         "Prepend cons cells describing prefix-arg ACTUAL-KEY and ACTUAL-KEY to TAIL

     It does not prepend if ACTUAL-KEY is already listed in TAIL."
         (let ((key-string (concat prefix (key-description actual-key))))
           ;; We don't include documentation if the key-binding is
           ;; over-ridden. Note, over-riding a binding automatically hides the
           ;; prefixed version too.
           (unless (assoc key-string tail)
             (when (and ua-keys (symbolp binding)
                        (get binding 'notmuch-prefix-doc))
               ;; Documentation for prefixed command
               (let ((ua-desc (key-description ua-keys)))
                 (push (cons (concat ua-desc " " prefix (format-kbd-macro actual-key))
                             (get binding 'notmuch-prefix-doc))
                       tail)))
             ;; Documentation for command
             (push (cons key-string
                         (or (and (symbolp binding) (get binding 'notmuch-doc))
                             (and (functionp binding) (notmuch-documentation-first-line binding))))
                   tail)))
         tail)

       (defun notmuch-show-exports-all-attachments (mm-handle directory)
         (let (attachments)
           (notmuch-foreach-mime-part
            (lambda (p)
              (let ((disposition (mm-handle-disposition p))
                    filename
                    cid
                    file-location)
                (message "handle is: %S" p)
                (and (listp disposition)
                     (string-equal "text/html" (mm-handle-media-type p))
                     (message "handle inside is: %S" p)
                     (mm-insert-part p)
                     (set-buffer-file-coding-system 'raw-text))
                (and (listp disposition)
                     ;; (message "p is: %S" p)
                     (or (equal (car disposition) "attachment")
                         (and (equal (car disposition) "inline")
                              (assq 'filename disposition))
                         (mm-handle-id p))
                     (progn
                       (setq filename (mm-handle-filename p))
                       (setq cid (mm-handle-id p))
                       (setq cid (s-chop-suffix ">" (s-chop-prefix "<" cid)))
                       ;; (message "adding: (%S, %S)" cid filename)
                       (add-to-list 'attachments (cons cid filename))
                       ;; (message "added: %S" disposition)
                       ;; (message "filename: %S" (cdadr disposition))
                       (setq file-location (concat directory
                                                   filename))
                       (mm-save-part-to-file p file-location)
                       (message "Saved file %s" file-location)
                       (lexical-let ((file-name file-location))
                         (run-at-time 2 nil
                                      (lambda ()
                                        (ignore-errors (delete-file file-name)))))))))
           mm-handle)
           attachments))

       (defun notmuch-make-temp-file (ext)
         "Create a temporary file with extension EXT. The file will
     self-destruct in a few seconds, enough to open it in another
     program."
         (let ((tmpfile (make-temp-file
                         "notmuch-" nil (concat "." ext))))
           (lexical-let ((filename tmpfile))
             (run-at-time "30 sec" nil
                          (lambda () (ignore-errors (delete-file filename)))))
           tmpfile))

       (defun notmuch-show-reopen-in-browser ()
         "Write the text/html to a temporary file and open it."
         (interactive)
         (with-current-notmuch-show-message
          (let ((mm-handle (mm-dissect-buffer))
                (tmpfile (notmuch-make-temp-file "html"))
                html
                txt
                ;; (html (mu4e-message-field msg :body-html))
                ;; (txt (mu4e-message-field msg :body-txt))
                attachments)
            (with-temp-buffer
              (insert "<head><meta charset=\"UTF-8\"></head>\n")
              (setq attachments
                    (notmuch-show-exports-all-attachments
                     mm-handle temporary-file-directory))
              (message "temp-directory is: %s" temporary-file-directory)
              (write-file tmpfile nil)
              ;; (message "attachments: %S" attachments)
              ;; rewrite attachment urls
              (mapc (lambda (attachment)
                      (goto-char (point-min))
                      (while (re-search-forward (format "src=\"cid:%s\""
                                                        (car attachment)) nil t)
                        (replace-match (format "src=\"%s%s\"" temporary-file-directory
                                               (cdr attachment)))))
                    attachments)
              (save-buffer)
              (browse-url tmpfile)))))

       (setq-default notmuch-refresh-timer nil)

       (defun notmuch-refresh-func ()
         (when (null notmuch-refresh-timer)
           (setq notmuch-refresh-timer
                 (run-at-time
                  10 nil
                  (lambda ()
                    (message "mail-sync.py called")
                    (setq notmuch-refresh-timer nil)
                    (start-process "mail-sync" "*mail-sync*" "mail-sync.py" "--do-gmi"))))))

       ;; sync gmi after tagging
       (add-hook 'notmuch-after-tag-hook #'notmuch-refresh-func)
     )

     (with-eval-after-load 'org-mime
       ;; fix org-mime-htmlize with latex
       (setq org-mime-export-options '(:with-latex dvipng)))
   #+END_SRC
** Sending
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist
                  '("\\.eml\\'" . (lambda ()
                                    ;; will add something special
                                    (markdown-mode))))
     (with-eval-after-load 'markdown-mode
       (evil-define-key '(normal insert motion visual) markdown-mode-map
         (kbd "M-h") nil
         (kbd "M-j") nil
         (kbd "M-k") nil
         (kbd "M-l") nil
         (kbd "M-H") nil
         (kbd "M-J") nil
         (kbd "M-K") nil
         (kbd "M-L") nil))
   #+END_SRC

* Ranger & Dired  
  #+BEGIN_SRC emacs-lisp
    (use-package ranger
      :defer t
      :bind (:map ranger-mode-map
                  ("C-h" . nil)) ;; C-h was set to toggle dotfiles
      :config
      (progn
        (setq ranger-show-dotfiles nil ;; default not show dotfiles at startup, toggled by zh
              ranger-cleanup-on-disable nil ;; kill the buffers when we finish
              )))

    (with-eval-after-load 'dired
      (defun yang-dired-mode-setup ()
        "to be run as hook for `dired-mode'."
        (dired-hide-details-mode 1)
        (dired-omit-mode 1)
        )
      (add-hook 'dired-mode-hook 'yang-dired-mode-setup)

      ;; use RET to open dir in same buffer
      (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file) ; was dired-find-file
      (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))  ; was dired-up-directory

      (setq dired-recursive-copies 'always)
      (add-to-list 'completion-ignored-extensions ".synctex.gz")
      (setq counsel-find-file-ignore-regexp (concat (regexp-opt completion-ignored-extensions) "$"))

      ;; from https://oremacs.com/2016/02/24/dired-rsync/
      (defun dired-do-rsync (dest)
        (interactive
         (list
          (expand-file-name
           (read-file-name
            "Rsync to:"
            (dired-dwim-target-directory)))))
        ;; store all selected files into "files" list
        (let ((files (dired-get-marked-files
                      nil current-prefix-arg))
              ;; the rsync command
              (tmtxt/rsync-command
               "rsync -arv --progress "))
          ;; add all selected file names as arguments
          ;; to the rsync command
          (dolist (file files)
            (setq tmtxt/rsync-command
                  (concat tmtxt/rsync-command
                          (shell-quote-argument file)
                          " ")))
          ;; append the destination
          (setq tmtxt/rsync-command
                (concat tmtxt/rsync-command
                        (shell-quote-argument dest)))
          ;; run the async shell command
          (async-shell-command tmtxt/rsync-command "*rsync*")
          ;; finally, switch to that window
          (other-window 1)))
      )

    (use-package dired-x
      :defer t
      :config
      (progn
        (add-to-list 'dired-omit-extensions ".~undo-tree~")
        (setq-default dired-omit-mode t)))
  #+END_SRC

* Shell
** Eshell  
   #+BEGIN_SRC emacs-lisp
     (setq eshell-cmpl-cycle-completions nil)
     ;; Nicer completion for eshell
     ;; From https://emacs.stackexchange.com/a/27871
     ;; Also we have to put it into shell, because eshell resets eshell-mode-map
     ;; when initialized
     (add-hook 'eshell-mode-hook
               (lambda ()
                 ;; some alias
                 (eshell/alias "ee" "find-file $1")
                 (eshell/alias "ff" "find-file $1")
                 (eshell/alias "d" "dired $1")
                 ;; git status
                 (defun eshell/gst (&rest args)
                   (magit-status (pop args) nil)
                   (eshell/echo))   ;; The echo command suppresses output
                 ;; define clear
                 (defun eshell/clear ()
                   "Clear the eshell buffer."
                   (let ((inhibit-read-only t))
                     (erase-buffer)
                     (eshell-send-input)))
                 (define-key eshell-mode-map (kbd "<tab>")
                   (lambda () (interactive) (pcomplete-std-complete)))))
   #+END_SRC

** multi-term
   #+BEGIN_SRC emacs-lisp
     (setq term-buffer-maximum-size 10000)
     (use-package eterm-256color
       :init
       (add-hook 'term-mode-hook #'eterm-256color-mode))

     (evil-define-key 'normal term-raw-map (kbd "<mouse-2>") 'term-mouse-paste)
     (evil-define-key 'insert term-raw-map (kbd "<mouse-2>") 'term-mouse-paste)
     (evil-define-key 'normal term-raw-map (kbd "C-a") 'term-send-home)
     (evil-define-key 'insert term-raw-map (kbd "C-a") 'term-send-home)
     (evil-define-key 'normal term-raw-map (kbd "C-e") 'term-send-end)
     (evil-define-key 'insert term-raw-map (kbd "C-e") 'term-send-end)
   #+END_SRC

* pdf-tools
  #+BEGIN_SRC emacs-lisp
    (defun yang/xdg-reopen ()
      (interactive)
      (if (buffer-file-name)
          (call-process-shell-command (concat "xdg-open " (prin1-to-string (buffer-file-name))) nil 0 nil)
        (message "No file available")))
    ;; copied from http://pragmaticemacs.com/emacs/even-more-pdf-tools-tweaks/
    (use-package pdf-tools
      :defer t
      :ensure t
      :bind (:map pdf-view-mode-map
                  ("C-s" . isearch-forward))
      :config
      (setq-default pdf-view-display-size 'fit-page)
      ;; automatically annotate highlights
      (setq pdf-annot-activate-created-annotations t)
      ;; more fine-grained zooming
      (setq pdf-view-resize-factor 1.1)
      ;; set default annotation color
      (setq pdf-annot-default-text-annotation-properties
         '((icon . "Note")
           (color . "#ffff00")
           (label . "Sheng Yang")
           (popup-is-open)))
      (spacemacs/set-leader-keys-for-major-mode
        'pdf-view-mode
        "t b" 'pdf-history-backward
        "t f" 'pdf-history-forward))
  #+END_SRC

* doc-view
  #+BEGIN_SRC emacs-lisp
    ;; doc-view
    (use-package doc-view
      :config (setq doc-view-resolution 144)
      :bind (:map doc-view-mode-map
                  ("h" . image-backward-hscroll)
                  ("l" . image-forward-hscroll)
                  ("J" . doc-view-next-page)
                  ("K" . 'doc-view-previous-page)
                  ))

    (add-hook 'doc-view-mode-hook 'auto-revert-mode)
  #+END_SRC

* HiDPI
  #+BEGIN_SRC emacs-lisp
   (cond ((string-equal system-name "carbon") ; thinkpad X1 carbon
          (progn
            (with-eval-after-load 'org
              (plist-put org-format-latex-options :scale 2.5))
            (setq
             preview-scale-function 2.5)
            ;; for GUI called by emacs
            (setenv "GDK_SCALE" "2")
            (setenv "GDK_DPI_SCALE" "0.5")
            )))
  #+END_SRC
 
* Lunar Calendar
  #+BEGIN_SRC emacs-lisp
    ;; enable chinese lunar anniversary
    (use-package cal-china
      :defer t
      :commands my--diary-chinese-anniversary
      :config
      (defun my--diary-chinese-anniversary (lunar-month lunar-day &optional year mark)
        (if year
            (let* ((d-date (diary-make-date lunar-month lunar-day year))
                   (a-date (calendar-absolute-from-gregorian d-date))
                   (c-date (calendar-chinese-from-absolute a-date))
                   (cycle (car c-date))
                   (yy (cadr c-date))
                   (y (+ (* 100 cycle) yy)))
              (diary-chinese-anniversary lunar-month lunar-day y mark))
          (diary-chinese-anniversary lunar-month lunar-day year mark))))
  #+END_SRC

* Chinese
** pangu-spacing
   #+begin_src emacs-lisp
     (use-package pangu-spacing
       :config
       (global-pangu-spacing-mode -1)
       (defun yang/pangu-spacing-mode-on ()
         (pangu-spacing-mode 1))
       (defun yang/pangu-spacing-mode-off ()
         (pangu-spacing-mode -1))
       ;; only open for org-mode
       (add-hook 'org-mode-hook
                 #'yang/pangu-spacing-mode-on))
   #+end_src
** alignment
   #+BEGIN_SRC emacs-lisp
     ;; set up mono font for chinese
     (use-package cnfonts
       :init
       (setq
        cnfonts--current-profile "Monaco"
        cnfonts-directory (concat dotspacemacs-directory "chinese-fonts-setup/")
        cnfonts-use-face-font-rescale nil)
       (customize-set-variable 'cnfonts-profiles
                               '("Monaco" "Source Code Pro" "Fira Code"))
       :config
       (setq
        cnfonts--fontnames-fallback
        '(("Monaco" "Consolas" "DejaVu Sans Mono" "Source Code Pro" "Droid Sans Mono"
           "PragmataPro" "Courier" "Courier New" "Ubuntu Mono" "Liberation Mono"
           "MonacoB" "MonacoB2" "Droid Sans Mono Pro" "Lucida Console" "Hack"
           "Bitstream Vera Sans Mono" "Fira Mono" "Free Mono" "Anonymous Pro" "Ubuntu
           Mono" "Fantasque Sans Mono" "Monoid" "Fantasque" "Fira Code" "Noto Sans
           Mono CJK" "FantasqueSansMono" "AnonymousPro" "Noto Mono")
          ("WenQuanYi Micro Hei Mono" "WenQuanYi Zen Hei Mono"
           "文泉驿等宽微米黑" "文泉驿等宽正黑"
           "Source Han Sans CN" "Source Han Serif CN" "Source Han Sans" "Source Han Serif"
           "Noto Sans MOno CJK SC"
           "微软雅黑" "Microsoft Yahei" "Ubuntu Mono"
           "黑体" "SimHei" "宋体" "SimSun" "新宋体" "NSimSun"
           "Hiragino Sans GB")
          ("HanaMinB" "SimSun-ExtB" "MingLiU-ExtB" "PMingLiU-ExtB" "MingLiU_HKSCS-ExtB"))))
   #+END_SRC
*** Fix char width
   #+BEGIN_SRC emacs-lisp
     ;; set char width for certain characters
     (defun blaenk/set-char-widths (alist)
       (while (char-table-parent char-width-table)
         (setq char-width-table (char-table-parent char-width-table)))
       (dolist (pair alist)
         (let ((width (car pair))
               (chars (cdr pair))
               (table (make-char-table nil)))
           (dolist (char chars)
             (set-char-table-range table char width))
           (optimize-char-table table)
           (set-char-table-parent table char-width-table)
           (setq char-width-table table))))

     ;; fix char width
     (blaenk/set-char-widths
      `((1 . (,(string-to-char "“")
              ,(string-to-char "”")
              ,(string-to-char "…")
              ;; character used in mu4e
              ,(string-to-char "⚓")
              ,(string-to-char "⎕")
              ))))

     (blaenk/set-char-widths
      `((1 . (,(string-to-char "“")
              ,(string-to-char "”")
              ,(string-to-char "…")
              ;; character used in mu4e
              ,(string-to-char "⚓")
              ,(string-to-char "⎕")
              ))))

   #+END_SRC
*** Only reload when necessary   
   #+BEGIN_SRC emacs-lisp
     (setq yang-cnfonts-has-started nil)
     (add-hook 'before-make-frame-hook
               (lambda ()
                 ;; (message "in before-make-frame-hook")
                 (setq yang-cnfonts-has-started nil)))

     (defun yang-cnfonts-set-font-first-time (func &rest _args)
       ;; (message "in yang-cnfonts-set-font-first-time")
       (when (or (not (boundp 'yang-cnfonts-has-started))
                 (null yang-cnfonts-has-started))
         ;; (message "call cnfonts-set-font-first-time")
         (setq yang-cnfonts-has-started t)
         (apply func _args)
         (when (display-graphic-p)
           ;; (fontset-name-p "fontset-default")
           ;; (set-face-font 'fixed-pitch "fontset-default")
           (set-face-attribute 'fixed-pitch nil :font "fontset-default" :family "Monaco"))
         ))

     (advice-add 'cnfonts-set-font-first-time
                 :around #'yang-cnfonts-set-font-first-time)
   #+END_SRC
   
*** Enable cnfonts
   #+BEGIN_SRC emacs-lisp
     (cnfonts-enable)
     (cnfonts-set-spacemacs-fallback-fonts)
     (defun yang-server-create-window-system-frame-advice (&rest _)
       (setq yang-cnfonts-has-started nil)
       (cnfonts-set-font-first-time))
     (advice-add 'server-create-window-system-frame
                 :after #'yang-server-create-window-system-frame-advice)
   #+END_SRC
   
*** Fix client problems
   #+BEGIN_SRC emacs-lisp
     (require 'cl)
     (defun yang-check-last-client-frame (frame)
       (when (eq 1 (cl-count-if
                    (lambda (f)
                      (eq
                       (frame-parameter f 'display)
                       (frame-parameter frame 'display)))
                    (visible-frame-list)))
         (setq yang-cnfonts-has-started nil)))

     (add-to-list 'delete-frame-functions #'yang-check-last-client-frame)
   #+END_SRC
** ace-pinyin
   #+BEGIN_SRC emacs-lisp
     (use-package ace-pinyin
       :defer t
       :config
       (setq ace-pinyin--jump-word-timeout 0.3)
       (spacemacs/set-leader-keys "j j" 'ace-pinyin-jump-char-2)
       ;; (spacemacs/set-leader-keys "j j" (lambda () (interactive) (ace-pinyin-jump-word t)))
       )
   #+END_SRC

* Browser
** Using emacs to edit text area
   #+BEGIN_SRC emacs-lisp
     ;; check if the port for atomic-chrome is used or not
     ;; copied from https://github.com/dakrone/atomic-chrome/commit/79a5c17eef37b1e41590fc366cd16f2c4f3d46e4
     ;; append yang to avoid messing up with naming space
     (when (string= system-name "carbon")
       (defun yang-atomic-chrome-server-running-p ()
         "Returns `t' if the atomic-chrome server is currently running,
     `nil' otherwise."
         (let ((retval nil))
           (condition-case ex
               (progn
                 (delete-process
                  (make-network-process
                   :name "atomic-client-test" :host "localhost"
                   :noquery t :service "64292"))
                 (setq retval t))
             ('error nil))
           retval))
       ;; turn on atomic-chrome
       (unless (yang-atomic-chrome-server-running-p)
         (atomic-chrome-start-server)))
   #+END_SRC
** Default use eww for browsing
   #+BEGIN_SRC emacs-lisp
     (setq browse-url-browser-function
           ;; use eww only when from elfeed-mode
           (lambda (URL &rest args)
             (if (string= major-mode "elfeed-search-mode")
                 (eww-browse-url URL args)
               (browse-url-default-browser URL args))))

     ;; open with GUI browser
     (defun yang/eww-reopen-url-gui ()
       "Open current url in GUI browser"
       (interactive)
       (let ((browse-url-generic-program "/usr/bin/xdg-open"))
         (browse-url-generic (eww-copy-page-url))))
     (with-eval-after-load 'eww
       (define-key eww-mode-map (kbd "B") 'yang/eww-reopen-url-gui))
   #+END_SRC

* Bug-fixes
  #+BEGIN_SRC emacs-lisp
    ;; modeline optimization/workarounds
    (when (fboundp 'spacemacs/toggle-mode-line-responsive-off)
      (spacemacs/toggle-mode-line-responsive-off))

     ;; ipython cannot find gurobi license
     (setenv "GRB_LICENSE_FILE" (concat (getenv "HOME") "/.config/gurobi.lic"))

    (defun spacemacs//layout-wait-for-modeline (&rest r)
      "AAAssure the mode-line is loaded before restoring the layouts."
      (advice-remove 'persp-load-state-from-file 'spacemacs//layout-wait-for-modeline)
      (when (and (configuration-layer/package-used-p 'spaceline)
                 (memq (spacemacs/get-mode-line-theme-name) '(spacemacs all-the-icons custom)))
        (require 'spaceline-config)))

    (defun my-reload-modeline (&rest _args)
      (message "in my-reload-modeline")
      (spacemacs-modeline/init-spaceline)
      (advice-remove 'server-create-window-system-frame #'my-reload-modeline))

    ;; (with-eval-after-load 'persp-mode
    ;;   (require 'spaceline)
    ;;   (advice-remove 'persp-load-state-from-file 'spacemacs//layout-wait-for-modeline))

    (advice-add 'server-create-window-system-frame :after #'my-reload-modeline)
  #+END_SRC
** ad-Advice-popwin:create-popup-window: Symbol's function definition is void: purpose-window-purpose-dedicated-p
   #+BEGIN_SRC emacs-lisp
  (require 'window-purpose-core)
   #+END_SRC
** git-gutter+
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'git-gutter+
       (defun git-gutter+-remote-default-directory (dir file)
         (let* ((vec (tramp-dissect-file-name file))
                (method (tramp-file-name-method vec))
                (user (tramp-file-name-user vec))
                (domain (tramp-file-name-domain vec))
                (host (tramp-file-name-host vec))
                (port (tramp-file-name-port vec))
                )
           (tramp-make-tramp-file-name method user domain host port dir)))

       (defun git-gutter+-remote-file-path (dir file)
         (let ((file (tramp-file-name-localname (tramp-dissect-file-name file))))
           (replace-regexp-in-string (concat "\\`" dir) "" file))))

     ;; the function that has problem
     ;; maybe better to change this function
     ;; (defun git-gutter+-refresh ()
     ;;   (git-gutter+-clear)
     ;;   (let ((file (buffer-file-name)))
     ;;     (when (and file (file-exists-p file))
     ;;       (if (file-remote-p file)
     ;;           (let* ((repo-root (git-gutter+-root-directory file))
     ;;                  (default-directory (git-gutter+-remote-default-directory repo-root file)))
     ;;             (git-gutter+-process-diff (git-gutter+-remote-file-path repo-root file)))
     ;;         (git-gutter+-process-diff (git-gutter+-local-file-path file))))))
   #+END_SRC

* Monitor processes
  =proced= is a major mode like htop. To sort, first press =s=, then =c/m= for cpu/memory
  #+BEGIN_SRC emacs-lisp
    (add-hook 'proced-mode-hook
              (lambda ()
                (proced-toggle-auto-update +1)))

  #+END_SRC

* elfeed
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'elfeed-search
      (define-key elfeed-search-mode-map (kbd "m") 'elfeed-toggle-star)
      (defalias 'elfeed-toggle-star
        (elfeed-expose #'elfeed-search-toggle-all 'star)))


    ;; use =B= to call gui browser
    (defun yang/elfeed-show-visit-gui ()
      "Wrapper for elfeed-show-visit to use gui browser instead of eww"
      (interactive)
      (let ((browse-url-generic-program "/usr/bin/xdg-open"))
        (elfeed-show-visit t)))

    (defun yang/elfeed-search-browse-url-gui ()
      "Visit the current entry in your browser using `browse-url'.
    If there is a prefix argument, visit the current entry in the
    browser defined by `browse-url-generic-program'."
      (interactive)
      (let ((browse-url-generic-program "/usr/bin/xdg-open"))
        (elfeed-search-browse-url t)))

    (with-eval-after-load 'elfeed
      (define-key elfeed-show-mode-map (kbd "B") 'yang/elfeed-show-visit-gui)
      (define-key elfeed-search-mode-map (kbd "B") 'yang/elfeed-search-browse-url-gui))
  #+END_SRC

* Tramp
  #+BEGIN_SRC emacs-lisp
    (require 'tramp)
    (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
    (setq tramp-default-method "ssh")
  #+END_SRC

** Temp fix
   Already fixed upstream, but not in Arch official repo
   #+BEGIN_SRC emacs-lisp
     (if (not (version< emacs-version "26.0" ))
         (defun term-handle-ansi-terminal-messages (message)
           ;; Handle stored partial message
           (when term-partial-ansi-terminal-message
             (setq message (concat term-partial-ansi-terminal-message message))
             (setq term-partial-ansi-terminal-message nil))

           ;; Is there a command here?
           (while (string-match "\eAnSiT.+\n" message)
             ;; Extract the command code and the argument.
             (let* ((start (match-beginning 0))
                    (command-code (aref message (+ start 6)))
                    (argument
                     (save-match-data
                       (substring message
                                  (+ start 8)
                                  (string-match "\r?\n" message
                                                (+ start 8)))))
                    ignore)
               ;; Delete this command from MESSAGE.
               (setq message (replace-match "" t t message))

               ;; If we recognize the type of command, set the appropriate variable.
               (cond ((= command-code ?c)
                      (setq term-ansi-at-dir argument))
                     ((= command-code ?h)
                      (setq term-ansi-at-host argument))
                     ((= command-code ?u)
                      (setq term-ansi-at-user argument))
                     ;; Otherwise ignore this one.
                     (t
                      (setq ignore t)))

               ;; Update default-directory based on the changes this command made.
               (if ignore
                   nil
                 (setq default-directory
                       (file-name-as-directory
                        (if (and (string= term-ansi-at-host (system-name))
                                 (string= term-ansi-at-user (user-real-login-name)))
                            (expand-file-name term-ansi-at-dir)
                          (if (string= term-ansi-at-user (user-real-login-name))
                              (concat "/-:" term-ansi-at-host ":" term-ansi-at-dir)
                            (concat "/-:" term-ansi-at-user "@" term-ansi-at-host ":"
                                    term-ansi-at-dir)))))

                 ;; I'm not sure this is necessary,
                 ;; but it's best to be on the safe side.
                 (if (string= term-ansi-at-host (system-name))
                     (progn
                       (setq ange-ftp-default-user term-ansi-at-save-user)
                       (setq ange-ftp-default-password term-ansi-at-save-pwd)
                       (setq ange-ftp-generate-anonymous-password term-ansi-at-save-anon))
                   (setq term-ansi-at-save-user ange-ftp-default-user)
                   (setq term-ansi-at-save-pwd ange-ftp-default-password)
                   (setq term-ansi-at-save-anon ange-ftp-generate-anonymous-password)
                   (setq ange-ftp-default-user nil)
                   (setq ange-ftp-default-password nil)
                   (setq ange-ftp-generate-anonymous-password nil)))))
           ;; If there is a partial message at the end of the string, store it
           ;; for future use.
           (when (string-match "\eAnSiT.+$" message)
             (setq term-partial-ansi-terminal-message (match-string 0 message))
             (setq message (replace-match "" t t message)))
           message))
   #+END_SRC

** yadm
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'tramp-methods
                  '("yadm"
                    (tramp-login-program "yadm")
                    (tramp-login-args (("enter")))
                    (tramp-login-env
                     (("SHELL")
                      ("/bin/bash")))
                    (tramp-remote-shell "/bin/sh")
                    (tramp-remote-shell-args ("-c"))
                    (tramp-connection-timeout 10)))

     (defun yadm-magit-status ()
       (interactive)
       (magit-status "/yadm::"))
   #+END_SRC

* Projectile
  #+BEGIN_SRC emacs-lisp
    (setq shell-file-name "/bin/sh"
          projectile-enable-caching t
          projectile-file-exists-remote-cache-expire nil)
  #+END_SRC
* Debug
** undo-tree
   #+BEGIN_SRC emacs-lisp
     (setq undo-tree-auto-save-history t
           undo-tree-enable-undo-in-region nil
           undo-tree-history-directory-alist
           `(("." .
              ,(concat dotspacemacs-directory ".cache/undo-tree/")))
           )

     (when (string= system-name "carbon")
       (load "~/git/undo-tree/undo-tree.el")
       )
   #+END_SRC

* Semantic
  #+BEGIN_SRC emacs-lisp
    (cl-defun semanticdb-rescan-directory-1 (pathname &optional (file-regex ".*\\.\\(el\\|el.gz\\|h\\|hpp\\)$"))
      (let* ((root (file-name-as-directory pathname))
             (files (directory-files root t ))
             (dotspacemacs-large-file-size 50))
        (setq files (delete (format "%s." root) files))
        (setq files (delete (format "%s.." root) files))
        (while files
          (setq file (pop files))
          (message "Parsing %s file." file)
          (if (not(file-accessible-directory-p file))
              ;;if it's a file that matches the regex we seek
              (progn (when (string-match-p file-regex file)
                       (save-excursion
                         (message "Parsing %s file." file)
                         (ignore-errors
                           ;; (semanticdb-create-table-for-file-not-in-buffer file)
                           (semanticdb-file-table-object file t)))
               ))
              ;;else if it's a directory
              (semanticdb-rescan-directory-1 file file-regex)))))

    (defun yang/rescan-semantic-files ()
      (interactive)
      (mapc #'semantic-rescan-directory
            '("/usr/share/emacs/"
              "~/.emacs.d/core/"
              "~/.emacs.d/elpa/"
              "~/.emacs.d/layers/")))

    (defun semantic-rescan-directory (dir)
      (interactive "D")
      (message "Scanning directory %s." dir)
      (semanticdb-rescan-directory-1 (expand-file-name dir)))

    ;; (semantic-rescan-directory "/home/yangsheng/.emacs.d/elpa/26.1/develop/")
    ;; (semantic-rescan-directory "/usr/share/emacs/26.1/")
    (with-eval-after-load 'semantic
      (add-hook 'semantic-mode-hook
                (lambda ()
                  (dolist (x (default-value 'completion-at-point-functions))
                    (when (string-prefix-p "semantic-" (symbol-name x))
                      (remove-hook 'completion-at-point-functions x))))))
  #+END_SRC

* c++
  #+BEGIN_SRC emacs-lisp
    (add-hook 'c-mode-common-hook
              (lambda ()
                (rainbow-mode -1)))
  #+END_SRC

* neo-tree
  #+BEGIN_SRC emacs-lisp
    ;; use fancy icons
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  #+END_SRC

* persp-mode
  
** ibuffer for current layout
   Use =<leader> b l= to show all buffers in current perspective
   #+BEGIN_SRC emacs-lisp
     (use-package persp-mode
       :defer t
       :after ibuffer
       :config
       (spacemacs/set-leader-keys "b l"
         #'(lambda (arg)
             (interactive "P")
             (with-persp-buffer-list () (ibuffer arg)))))

     (with-eval-after-load 'ibuffer
       (define-ibuffer-op ibuffer-do-remove-persp ()
         "Remove marked buffers from current persp."
         (:opstring "removed from current persp"
                    :active-opstring "remove from current persp"
                    :dangerous t
                    :complex t
                    :modifier-p t)
         (if (persp-remove-buffer buf)
             'kill
           nil))

       (define-key ibuffer-mode-map (kbd "R") 'ibuffer-do-remove-persp))

     (setq persp-emacsclient-init-frame-behaviour-override nil
           persp-init-new-frame-behaviour-override -1)
   #+END_SRC
** Switch to the first persp when loading from file
   #+BEGIN_SRC emacs-lisp
     (use-package persp-mode
       :defer t
       :config
       (defun yang-persp-switch-to-persp-after-load (persp-list)
         (message "come to my switch to persp")
         (let ((persp-name (car persp-list)))
           (when persp-name
             (persp-switch persp-name))))
       (advice-add 'persp-load-state-from-file :filter-return 'yang-persp-switch-to-persp-after-load))
   #+END_SRC

* helpful
  #+BEGIN_SRC emacs-lisp
    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    (use-package helpful
      :init
      ;; (global-set-key (kbd "C-h f") #'helpful-callable)
      (setq counsel-describe-function-function #'helpful-callable)
      ;; (global-set-key (kbd "C-h v") #'helpful-variable)
      (setq counsel-describe-variable-function #'helpful-variable)
      :bind (("C-h k" . helpful-key)
             ;; Look up *F*unctions (excludes macros).
             ;;
             ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
             ;; already links to the manual, if a function is referenced there.
             ("C-h F" . helpful-function)
             ;; Look up *C*ommands.
             ;;
             ;; By default, C-h C is bound to describe `describe-coding-system'. I
             ;; don't find this very useful, but it's frequently useful to only
             ;; look at interactive functions.
             ("C-h C" . helpful-command))
      :config
      (defun helpful--advise-info (function)
        (let* ((flist (indirect-function function))
               (docfun nil)
               (docstring nil))
          (if (eq 'macro (car-safe flist)) (setq flist (cdr flist)))
          (while (advice--p flist)
            (let ((doc (aref flist 4))
                  (where (advice--where flist)))
              ;; Hack attack!  For advices installed before calling
              ;; Snarf-documentation, the integer offset into the DOC file will not
              ;; be installed in the "core unadvised function" but in the advice
              ;; object instead!  So here we try to undo the damage.
              (if (integerp doc) (setq docfun flist))
              (setq docstring
                    (concat
                     docstring
                     (propertize (format "%s advice: " where)
                                 'face 'warning)
                     (let ((fun (advice--car flist)))
                       (if (symbolp fun) (format-message "`%S'" fun)
                         (let* ((name (cdr (assq 'name (advice--props flist))))
                                (doc (documentation fun t))
                                (usage (help-split-fundoc doc function)))
                           (if usage (setq doc (cdr usage)))
                           (if name
                               (if doc
                                   (format "%s\n%s" name doc)
                                 (format "%s" name))
                             (or doc "No documentation")))))
                     "\n")))
            (setq flist (advice--cdr flist)))
          docstring))


      (defun helpful-update ()
        "Update the current *Helpful* buffer to the latest
    state of the current symbol."
        (interactive)
        (cl-assert (not (null helpful--sym)))
        (unless (buffer-live-p helpful--associated-buffer)
          (setq helpful--associated-buffer nil))
        (helpful--ensure-loaded)
        (-let* ((val
                 ;; Look at the value before setting `inhibit-read-only', so
                 ;; users can see the correct value of that variable.
                 (unless helpful--callable-p
                   (helpful--sym-value helpful--sym helpful--associated-buffer)))
                (inhibit-read-only t)
                (start-line (line-number-at-pos))
                (start-column (current-column))
                (primitive-p (helpful--primitive-p helpful--sym helpful--callable-p))
                (canonical-sym (helpful--canonical-symbol helpful--sym helpful--callable-p))
                (look-for-src (or (not primitive-p)
                                  find-function-C-source-directory))
                ((buf pos opened)
                 (if look-for-src
                     (helpful--definition helpful--sym helpful--callable-p)
                   '(nil nil nil)))
                (source (when look-for-src
                          (helpful--source helpful--sym helpful--callable-p buf pos)))
                (source-path (when buf
                               (buffer-file-name buf)))
                (references (helpful--calculate-references
                             helpful--sym helpful--callable-p
                             source-path))
                (aliases (helpful--aliases helpful--sym helpful--callable-p)))

          (erase-buffer)

          (insert (helpful--summary helpful--sym helpful--callable-p buf pos))

          (when (helpful--obsolete-info helpful--sym helpful--callable-p)
            (insert
             "\n\n"
             (helpful--format-obsolete-info helpful--sym helpful--callable-p)))

          (when (and helpful--callable-p
                     (not (helpful--kbd-macro-p helpful--sym)))
            (helpful--insert-section-break)
            (insert
             (helpful--heading "Signature")
             (helpful--syntax-highlight (helpful--signature helpful--sym))))

          (when (not helpful--callable-p)
            (helpful--insert-section-break)
            (let* ((sym helpful--sym)
                   (multiple-views-p
                    (or (stringp val)
                        (keymapp val)
                        (and (s-ends-with-p "-hook" (symbol-name sym))
                             (consp val)))))
              (insert
               (helpful--heading
                (cond
                 ;; Buffer-local variable and we're looking at the value in
                 ;; a specific buffer.
                 ((and
                   helpful--associated-buffer
                   (local-variable-p sym helpful--associated-buffer))
                  (format "Value in %s"
                          (helpful--button
                           (format "#<buffer %s>" (buffer-name helpful--associated-buffer))
                           'helpful-buffer-button
                           'buffer helpful--associated-buffer
                           'position pos)))
                 ;; Buffer-local variable but default/global value.
                 ((local-variable-if-set-p sym)
                  "Global Value")
                 ;; This variable is not buffer-local.
                 (t "Value")))
               (cond
                (helpful--view-literal
                 (helpful--syntax-highlight (helpful--pretty-print val)))
                ;; Allow strings to be viewed with properties rendered in
                ;; Emacs, rather than as a literal.
                ((stringp val)
                 val)
                ;; Allow keymaps to be viewed with keybindings shown and
                ;; links to the commands bound.
                ((keymapp val)
                 (helpful--format-keymap val))
                ((and (s-ends-with-p "-hook" (symbol-name sym))
                      (consp val))
                 (helpful--format-hook val))
                (t
                 (helpful--pretty-print val)))
               "\n\n")
              (when multiple-views-p
                (insert (helpful--make-toggle-literal-button) " "))

              (when (local-variable-if-set-p sym)
                (insert
                 (helpful--button
                  "Buffer values"
                  'helpful-associated-buffer-button
                  'symbol sym
                  'prompt-p t)
                 " "
                 (helpful--button
                  "Global value"
                  'helpful-associated-buffer-button
                  'symbol sym
                  'prompt-p nil)
                 " "))
              (when (memq (helpful--sym-value helpful--sym helpful--associated-buffer) '(nil t))
                (insert (helpful--make-toggle-button helpful--sym helpful--associated-buffer) " "))
              (insert (helpful--make-set-button helpful--sym helpful--associated-buffer))
              (when (custom-variable-p helpful--sym)
                (insert " " (helpful--make-customize-button helpful--sym)))))

          (-when-let (docstring (helpful--docstring helpful--sym helpful--callable-p))
            (helpful--insert-section-break)
            (insert
             (helpful--heading "Documentation")
             (helpful--format-docstring docstring))
            (when (helpful--in-manual-p helpful--sym)
              (insert "\n\n")
              (insert (helpful--make-manual-button helpful--sym))))

          ;; Show keybindings.
          ;; TODO: allow users to conveniently add and remove keybindings.
          (when (commandp helpful--sym)
            (helpful--insert-section-break)
            (insert
             (helpful--heading "Key Bindings")
             (helpful--format-keys helpful--sym aliases)))

          (helpful--insert-section-break)

          (insert
           (helpful--heading "References")
           (let ((src-button
                  (when source-path
                    (helpful--navigate-button
                     (file-name-nondirectory source-path)
                     source-path
                     (or pos
                         0)))))
             (cond
              ((and source-path references)
               (format "References in %s:\n%s"
                       src-button
                       (helpful--format-position-heads references source-path)))
              ((and source-path primitive-p)
               (format
                "Finding references in a .%s file is not supported."
                (f-ext source-path)))
              (source-path
               (format "%s is unused in %s."
                       helpful--sym
                       src-button))
              ((and primitive-p (null find-function-C-source-directory))
               "C code is not yet loaded.")
              (t
               "Could not find source file.")))
           "\n\n"
           (helpful--make-references-button helpful--sym helpful--callable-p))

          (when (and helpful--callable-p source (not primitive-p))
            (insert
             " "
             (helpful--make-callees-button helpful--sym source)))

          (when (helpful--advised-p helpful--sym)
            (helpful--insert-section-break)
            (insert
             (helpful--heading "Advice")
             ;; (format "This %s is advised."
             ;;         (if (macrop helpful--sym) "macro" "function"))
             (helpful--advise-info helpful--sym)
             ))

          (let ((can-edebug
                 (helpful--can-edebug-p helpful--sym helpful--callable-p buf pos))
                (can-trace
                 (and (symbolp helpful--sym)
                      helpful--callable-p
                      ;; Tracing uses advice, and you can't apply advice to
                      ;; primitive functions that are replaced with special
                      ;; opcodes. For example, `narrow-to-region'.
                      (not (plist-get (symbol-plist helpful--sym) 'byte-opcode))))
                (can-disassemble
                 (and helpful--callable-p (not primitive-p)))
                (can-forget
                 (and (not (special-form-p helpful--sym))
                      (not primitive-p))))
            (when (or can-edebug can-trace can-disassemble can-forget)
              (helpful--insert-section-break)
              (insert (helpful--heading "Debugging")))
            (when can-edebug
              (insert
               (helpful--make-edebug-button helpful--sym)))
            (when can-trace
              (when can-edebug
                (insert " "))
              (insert
               (helpful--make-tracing-button helpful--sym)))

            (when (and
                   (or can-edebug can-trace)
                   (or can-disassemble can-forget))
              (insert "\n"))

            (when can-disassemble
              (insert (helpful--make-disassemble-button helpful--sym)))

            (when can-forget
              (when can-disassemble
                (insert " "))
              (insert (helpful--make-forget-button helpful--sym helpful--callable-p))))

          (when aliases
            (helpful--insert-section-break)
            (insert
             (helpful--heading "Aliases")
             (s-join "\n" (--map (helpful--format-alias it helpful--callable-p)
                                 aliases))))

          (helpful--insert-section-break)

          (insert
           (helpful--heading
            (if (eq helpful--sym canonical-sym)
                "Source Code"
              "Alias Source Code"))
           (cond
            (source-path
             (concat
              (propertize (format "%s Defined in " (if primitive-p "//" ";;"))
                          'face 'font-lock-comment-face)
              (helpful--navigate-button
               (f-abbrev source-path)
               source-path
               pos)
              "\n"))
            (primitive-p
             (concat
              (propertize
               "C code is not yet loaded."
               'face 'font-lock-comment-face)
              "\n\n"
              (helpful--button
               "Set C source directory"
               'helpful-c-source-directory)))
            (t
             "")))
          (when source
            (insert
             (cond
              ((stringp source)
               (let ((mode (when primitive-p
                             (pcase (file-name-extension source-path)
                               ("c" 'c-mode)
                               ("rs" (when (fboundp 'rust-mode) 'rust-mode))))))
                 (helpful--syntax-highlight source mode)))
              ((and (consp source) (eq (car source) 'closure))
               (helpful--syntax-highlight
                (concat ";; Closure converted to defun by helpful.\n"
                        (helpful--pretty-print
                         (helpful--format-closure helpful--sym source)))))
              (t
               (helpful--syntax-highlight
                (concat
                 (if (eq helpful--sym canonical-sym)
                     ";; Could not find source code, showing raw function object.\n"
                   ";; Could not find alias source code, showing raw function object.\n")
                 (helpful--pretty-print source)))))))

          (helpful--insert-section-break)

          (-when-let (formatted-props (helpful--format-properties helpful--sym))
            (insert
             (helpful--heading "Symbol Properties")
             formatted-props))

          (goto-char (point-min))
          (forward-line (1- start-line))
          (forward-char start-column)

          (when opened
            (kill-buffer buf))))
      )
  #+END_SRC

* auto-highlight-symbol (ahs)
  #+BEGIN_SRC emacs-lisp
    (setq
     ahs-case-fold-search nil
     ahs-default-range 'ahs-range-whole-buffer
     ahs-idle-interval 0.25
     ahs-idle-timer 0
     ahs-inhibit-face-list nil)
  #+END_SRC

* misc
** Migrating to org-ref
   #+begin_src emacs-lisp
     (defun yang/move-pdf-to-archive ()
       (interactive)
       (save-excursion
         (save-restriction
           (org-narrow-to-subtree)
           (goto-char (point-min))
           (while (char-equal ?* (following-char))
             (forward-char))
           (while (char-equal ?  (following-char))
             (forward-char))
           (let* ((ele (org-element-context))
                  (path (org-element-property :path ele))
                  (name (buffer-substring (org-element-property :contents-begin ele)
                                          (org-element-property :contents-end ele)))
                  (dest-dir org-ref-pdf-directory)
                  filename
                  beg end)
             (setq path (s-replace-regexp (rx "::" (one-or-more digit)) "" path))
             (save-excursion
               (search-forward "cite:")
               (setq beg (point))
               (end-of-line)
               (setq end (point))
               (setq filename (buffer-substring beg end))
               )
             (message "path is -%s-, name is -%s-, filename is -%s-" path name filename)
             (when (f-exists-p path)
               (f-move path (concat dest-dir filename ".pdf"))
               (kill-line)
               (insert name))))))

     (defun yang/parse-authors ()
       (interactive)
       (save-excursion
         (let* ((beg (progn (move-beginning-of-line 1)
                            (point)))
                (end (progn (move-end-of-line 1)
                            (point)))
                (line-string (buffer-substring beg end))
                (new-string (s-join
                             ", "
                             (mapcar (lambda (ss)
                                       (let ((first)
                                             (last)
                                             (name (s-split "," ss)))
                                         (setq first (s-trim (nth 1 name))
                                               last (s-trim (nth 0 name)))
                                         (format "%s %s" first last)))
                                     (s-with line-string
                                       s-trim
                                       (s-chop-prefix "author")
                                       s-trim-left
                                       (s-chop-prefix "=")
                                       s-trim-left
                                       (s-chop-prefix "{")
                                       (s-chop-suffix "},")
                                       (s-split " and "))
                                     ))))
           (move-beginning-of-line 1)
           (kill-region beg end)
           (message "new-string %s" new-string)
           (insert (format ":author: %s" new-string)))))
   #+end_src

* Helm (legacy)
  #+BEGIN_SRC emacs-lisp
   ;; fix problem with open-junk-file
   (defun remove-helm-functions ()
     (remove-hook 'post-command-hook 'helm--maybe-update-keymap)
     ;; 2015-07-01 The following function was also remaining in the hook.
     ;; This hook was added 14 days ago coinciding breakage.
     ;; https://github.com/emacs-helm/helm/commit/ff7c54d39501d894fdb06e049828b291327540e6
     (remove-hook 'post-command-hook 'helm--update-header-line))



   ;;
   ;; 2015-07-01
   ;; This function itself is not remaining in the post-command-hook?
   ;;
   ;; Candidate hooks for making this happen.
   ;; server-done-hook	Hook run when done editing a buffer for the Emacs server.
   ;; server-mode-hook	Hook run after entering or leaving `server-mode'.
   ;; server-switch-hook	Hook run when switching to a buffer for the Emacs server.
   ;; server-visit-hook	Hook run when visiting a file for the Emacs server.
   ;;
   ;; (add-hook 'server-done-hook   'remove-helm--maybe-update-keymap)
   ;; (add-hook 'server-mode-hook   'remove-helm--maybe-update-keymap)
   ;; (add-hook 'server-switch-hook 'remove-helm--maybe-update-keymap)
   ;; (add-hook 'server-visit-hook  'remove-helm--maybe-update-keymap)
   ;;
   ;; This hacky universal solution works.
   ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Command-Overview.html#Command-Overview
   ;; (add-hook 'post-command-hook 'remove-helm-functions)
   ;; 2015-07-01 Changed to the following.
   (add-hook 'pre-command-hook 'remove-helm-functions)
  #+END_SRC
  
* to be structured
#+BEGIN_SRC emacs-lisp
   ;; (spacemacs/toggle-truncate-lines-on)
   ;; (defadvice preceding-sexp (around evil)
   ;;   "In normal-state, last sexp ends at point."
   ;;   (if (evil-normal-state-p)
   ;;       (save-excursion
   ;;         (unless (or (eobp) (eolp)) (forward-char))
   ;;         ad-do-it)
   ;;     ad-do-it))
   ;; (defadvice pp-last-sexp (around evil)
   ;;   "In normal-state, last sexp ends at point."
   ;;   (if (evil-normal-state-p)
   ;;       (save-excursion
   ;;         (unless (or (eobp) (eolp)) (forward-char))
   ;;         ad-do-it)
   ;;     ad-do-it))
   ;; to search across line breaks

   ;; move most custom variables here
   (setq
    paradox-automatically-star nil
    ;; preview-default-option-list '("displaymath"
    ;;                               "floats"
    ;;                               "graphics"
    ;;                               "textmath"
    ;;                               "sections"
    ;;                               "showlabels"
    ;;                               "sectio") ; seems broken
    ;; preview-gs-options '("-q" "-dDELAYSAFER" "-dNOPAUSE" "-DNOPLATFONTS" "-dPrinted" "-dTextAlphaBits=4" "-dGraphicsAlphaBits=4") ; seems the same as default
    )

#+END_SRC

