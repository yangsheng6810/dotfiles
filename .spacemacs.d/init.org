#+PROPERTY: header-args
* Framework Compatibility
  #+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
;; enable lexical binding
(setq-default lexical-binding t)
;; In spacemacs, IS-SPACEMACS is t. In doom, IS-DOOM is t
(defconst IS-SPACEMACS (boundp 'dotspacemacs-directory) "Returns t if in spacemacs, nil otherwise")
(defconst IS-DOOM (boundp 'doom-emacs-dir) "Returns t if in doom emacs, nil otherwise")
(defvar yang/dotemacs-framework 'nil)
(defvar yang/dotemacs-dir "~/.emacs.d/")
(when IS-SPACEMACS
  (setq yang/dotemacs-framework 'spacemacs
        yang/dotemacs-dir dotspacemacs-directory))
(when IS-DOOM
  (setq yang/dotemacs-framework 'doom
        yang/dotemacs-dir doom-private-dir))

;; Uniform interface to edit leader key
(defmacro yang/set-leader-key (&rest args)
  (pcase yang/dotemacs-framework
    ('doom `(general-def
              :keymaps 'doom-leader-map
              ,@args))
    ('spacemacs `(spacemacs/set-leader-keys
                  ,@args))))

(defmacro yang/with-spacemacs (&rest body)
  (declare (indent 0) (debug t))
  (when IS-SPACEMACS
    `(progn
       ,@body)))

(defmacro yang/with-doom (&rest body)
  (declare (indent 0) (debug t))
  (when IS-DOOM
    `(progn
       ,@body)))

(when (not IS-DOOM)
  (defmacro after! (package &rest body)
  "Evaluate BODY after PACKAGE have loaded.

PACKAGE is a symbol or list of them. These are package names, not modes,
functions or variables. It can be:

- An unquoted package symbol (the name of a package)
    (after! helm BODY...)
- An unquoted list of package symbols (i.e. BODY is evaluated once both magit
  and git-gutter have loaded)
    (after! (magit git-gutter) BODY...)
- An unquoted, nested list of compound package lists, using any combination of
  :or/:any and :and/:all
    (after! (:or package-a package-b ...)  BODY...)
    (after! (:and package-a package-b ...) BODY...)
    (after! (:and package-a (:or package-b package-c) ...) BODY...)
  Without :or/:any/:and/:all, :and/:all are implied.

This is a wrapper around `eval-after-load' that:

1. Suppresses warnings for disabled packages at compile-time
2. No-ops for package that are disabled by the user (via `package!')
3. Supports compound package statements (see below)
4. Prevents eager expansion pulling in autoloaded macros all at once"
  (declare (indent defun) (debug t))
  (if (symbolp package)
      (unless (memq package (bound-and-true-p doom-disabled-packages))
        (list (if (or (not (bound-and-true-p byte-compile-current-file))
                      (require package nil 'noerror))
                  #'progn
                #'with-no-warnings)
              (let ((body (macroexp-progn body)))
                `(if (featurep ',package)
                     ,body
                   ;; We intentionally avoid `with-eval-after-load' to prevent
                   ;; eager macro expansion from pulling (or failing to pull) in
                   ;; autoloaded macros/packages.
                   (eval-after-load ',package ',body)))))
    (let ((p (car package)))
      (cond ((not (keywordp p))
             `(after! (:and ,@package) ,@body))
            ((memq p '(:or :any))
             (macroexp-progn
              (cl-loop for next in (cdr package)
                       collect `(after! ,next ,@body))))
            ((memq p '(:and :all))
             (dolist (next (cdr package))
               (setq body `((after! ,next ,@body))))
             (car body)))))))
#+END_SRC
** Disable tool-bar and menu-bar
#+BEGIN_SRC emacs-lisp
(when (version< emacs-version "27.0")
  (when tool-bar-mode
    (tool-bar-mode -1))
  (when menu-bar-mode
    (menu-bar-mode -1)))
#+END_SRC

* General Editing
  #+BEGIN_SRC emacs-lisp
    ;; commented out since it may cause undo-tree corruption
    ;; (setq undo-tree-auto-save-history t)

    (setq word-wrap nil
          require-final-newline 'visit-save)

    ;; set tab-width
    (setq-default tab-width 8
                  c-basic-offset 4)

    ;; turn off linum-mode for performance
    ;;
    (after! linum
      (global-linum-mode -1))

    ;; turn on highlight-current-line-globally
    (yang/with-spacemacs
      (spacemacs/toggle-highlight-current-line-globally-off))

    (global-unset-key (kbd "M-SPC"))
    (global-set-key (kbd "M-SPC") 'set-mark-command)

    ;; M-; for comment/uncomment
    (after! (general newcomment)
      (general-def
        :keymaps 'general-override-mode-map
        "M-;" 'comment-dwim))

    (setq delete-by-moving-to-trash t)

    (use-package langtool
      :defer t
      :init
      (setq langtool-java-classpath
            "/usr/share/languagetool:/usr/share/java/languagetool/*"))

    (yang/with-spacemacs
      (tool-bar-mode -1)
      (menu-bar-mode -1))

    (yang/with-doom
      (remove-hook 'text-mode-hook #'auto-fill-mode))
  #+END_SRC

** Moving around
    #+begin_src emacs-lisp
     ;; first recenter to top, then to half-top
     (setq recenter-positions '(0.15 top middle bottom))
   #+end_src
   
** ispell
    #+begin_src emacs-lisp
(after! ispell
  (setq ispell-extra-args '("--sug-mode=ultra")
        ;; flyspell-issue-welcome-flag nil ;; fix flyspell problem
        ispell-dictionary "american"))

     ;; ;; to avoid lagging
     ;; (use-package flyspell-lazy
     ;;   :init (setq flyspell-lazy-extra-lazy t)
     ;;   :config (flyspell-lazy-mode 1))
   #+end_src

** Search
   #+begin_src emacs-lisp
     (use-package isearch
       :init
       (setq isearch-lax-whitespace t
             isearch-regexp-lax-whitespace t
             search-whitespace-regexp "[ \t\r\n]+")
       ;; (setq search-whitespace-regexp "\\s-+")

       (setq-default search-invisible t))

     ;; a better idea is to use :general
     (use-package swiper
       :defer t
       :general ("C-s"  #'swiper-isearch)
       :config
       (defun yang/swiper ()
         "In visual-line-mode, call swiper on visual line when
     universal prefix is provided, normal swiper otherwise"
         (interactive)
         (let ((visual-line-mode (and visual-line-mode
                                      (not (null current-prefix-arg)))))
           (swiper))))

     (yang/with-spacemacs
         (yang/set-leader-key
          "ss" #'swiper
          "sS" #'spacemacs/swiper-region-or-symbol
          "sb" #'swiper-all
          "sB" #'spacemacs/swiper-all-region-or-symbol))
   #+end_src

*** Allow ivy to select the content of prompt
    #+BEGIN_SRC emacs-lisp
(after! ivy
  (setq ivy-use-selectable-prompt t))
    #+END_SRC

** Evil
   #+begin_src emacs-lisp
     (use-package evil
       :init
       ;; to allow cursor move beyond eol, and do not move back.
       (setq evil-move-beyond-eol t
             evil-move-cursor-back nil
             evil-want-fine-undo t
             evil-ex-interactive-search-highlight nil
             ;; when mouse paste, paste at (point) regardless of where you click
             evil-want-Y-yank-to-eol t
             mouse-yank-at-point t
             ;; move past eol when pressing l at eol
             evil-cross-lines t
             ;; when pasting over some text, the replaced text does not go to clipboard
             evil-kill-on-visual-paste nil)

       ;; stop the behavior that evil consider all inputs done when in insert mode
       ;; as one insertion.

       ;; use isearch instead evil search
       (setq-default evil-search-module "isearch")

       (general-def
         :states '(insert)
         "C-d" nil                          ; evil-shift-left-line
         "C-k" nil                          ; evil-insert-digraph
         "C-o" nil                          ; evil-execute-in-normal-mode
         "C-p" nil                          ; hippie-expand
         "C-z" nil                          ; evil-emacs-state
         "C-v" nil                          ; quoted-insert
         "C-w" nil                          ; evil-delete-backward-word
         "<delete>" nil                     ; delete-char (delete char before cursor)
         )
       (general-def
         :keymaps 'evil-surround-mode-map
         :states '(operator visual)
         "s" #'evil-surround-edit
         "S" #'evil-Surround-edit)
       ;; fix doom inconsistent behavior
       (general-def
         :prefix "C-x"
         :states '(insert)
         "C-l" nil
         "C-k" nil
         "C-f" nil
         "C-]" nil
         "s" nil
         "C-s" nil
         "C-o" nil
         "C-n" nil
         "C-p" nil)
       )

     ;; Show different cursor for different evil mode in terminal
     (use-package evil-terminal-cursor-changer
       :config
       (evil-terminal-cursor-changer-activate))

          (setq mouse-yank-at-point t)
   #+end_src

** Rectangle editing
   #+BEGIN_SRC emacs-lisp
     ;; hydra for rectangle editing
     (use-package rect
       :bind (("C-c h r" . hydra-rectangle/body))
       :init
       (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                                            :color pink
                                            :hint nil
                                            :post (deactivate-mark))
         "
       ^_k_^       _w_ copy      _o_pen       _N_umber-lines            |\\     -,,,--,,_
     _h_   _l_     _p_aste       _t_ype       _i_sert-sring             /,`.-'`'   ..  \-;;,_
       ^_j_^       _d_ kill      _c_lear      _e_xchange-point         |,4-  ) )_   .;.(  `'-'
     ^^^^          _u_ndo        _q_uit       _r_eset-region-mark     '---''(./..)-'(_\_)
     "
         ("k" rectangle-previous-line)
         ("j" rectangle-next-line)
         ("h" rectangle-backward-char)
         ("l" rectangle-forward-char)
         ("i" string-insert-rectangle)
         ("d" kill-rectangle)                  ;; C-x r k
         ("p" yank-rectangle)                  ;; C-x r y
         ("w" copy-rectangle-as-kill)          ;; C-x r M-w
         ("o" open-rectangle)                  ;; C-x r o
         ("t" string-rectangle)                ;; C-x r t
         ("c" clear-rectangle)                 ;; C-x r c
         ("e" rectangle-exchange-point-and-mark) ;; C-x C-x
         ("N" rectangle-number-lines)            ;; C-x r N
         ("r" (if (region-active-p)
                  (deactivate-mark)
                (rectangle-mark-mode 1)))
         ("u" undo nil)
         ;; quit
         ("q" nil)))
   #+END_SRC

** smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :bind (("C-c h k" . yang-smartparens/body)
              :map smartparens-strict-mode-map
              ;; A fill paragraph in strict mode
              ("M-q" . sp-indent-defun))
       :init
       ;; Hydra for Smartparens
       (defhydra yang-smartparens (:hint nil)
         "
     Sexps (quit with _q_)
     ^Nav^            ^Barf/Slurp^                 ^Depth^
     ^---^------------^----------^-----------------^-----^-----------------
     _f_: forward     _→_:          slurp forward   _R_: splice
     _b_: backward    _←_:          barf forward    _r_: raise
     _u_: backward ↑  _C-<right>_:  slurp backward  _↑_: raise backward
     _d_: forward ↓   _C-<left>_:   barf backward   _↓_: raise forward
     _p_: backward ↓
     _n_: forward ↑
     ^Kill^           ^Misc^                       ^Wrap^
     ^----^-----------^----^-----------------------^----^------------------
     _w_: copy        _j_: join                    _(_: wrap with ( )
     _k_: kill        _s_: split                   _{_: wrap with { }
     ^^               _t_: transpose               _'_: wrap with ' '
     ^^               _c_: convolute               _\"_: wrap with \" \"
     ^^               _i_: indent defun"
         ("q" nil)
         ;; Wrapping
         ("(" (lambda (_) (interactive "P") (sp-wrap-with-pair "(")))
         ("{" (lambda (_) (interactive "P") (sp-wrap-with-pair "{")))
         ("'" (lambda (_) (interactive "P") (sp-wrap-with-pair "'")))
         ("\"" (lambda (_) (interactive "P") (sp-wrap-with-pair "\"")))
         ;; Navigation
         ("f" sp-forward-sexp )
         ("b" sp-backward-sexp)
         ("u" sp-backward-up-sexp)
         ("d" sp-down-sexp)
         ("p" sp-backward-down-sexp)
         ("n" sp-up-sexp)
         ;; Kill/copy
         ("w" sp-copy-sexp)
         ("k" sp-kill-sexp)
         ;; Misc
         ("t" sp-transpose-sexp)
         ("j" sp-join-sexp)
         ("s" sp-split-sexp)
         ("c" sp-convolute-sexp)
         ("i" sp-indent-defun)
         ;; Depth changing
         ("R" sp-splice-sexp)
         ("r" sp-splice-sexp-killing-around)
         ("<up>" sp-splice-sexp-killing-backward)
         ("<down>" sp-splice-sexp-killing-forward)
         ;; Barfing/slurping
         ("<right>" sp-forward-slurp-sexp)
         ("<left>" sp-forward-barf-sexp)
         ("C-<left>" sp-backward-barf-sexp)
         ("C-<right>" sp-backward-slurp-sexp)))
   #+END_SRC

** recursive-narrow
   #+begin_src emacs-lisp
(use-package recursive-narrow
  :commands
  (recursive-narrow-or-widen-dwim
   recursive-widen
   recursive-narrow-to-region)
  :config
  (defun yang/recursive-narrow (func)
    (interactive)
    (recursive-narrow-save-position (funcall func)))
  (advice-add #'org-narrow-to-subtree :around #'yang/recursive-narrow)
  (advice-add #'org-narrow-to-block :around #'yang/recursive-narrow)
  (advice-add #'org-narrow-to-element :around #'yang/recursive-narrow))
   #+end_src

** Narrow
   #+begin_src emacs-lisp
    ;; from https://demonastery.org/2013/04/emacs-narrow-to-region-indirect/
    (defun narrow-to-region-indirect (start end)
      "Restrict editing in this buffer to the current region, indirectly."
      (interactive "r")
      (deactivate-mark)
      (let ((buf (clone-indirect-buffer nil nil)))
        (with-current-buffer buf
          (narrow-to-region start end))
        (switch-to-buffer buf)))
   #+end_src

** vlf
   deal with very large files
   #+begin_src emacs-lisp
(use-package vlf-setup
  :defer t)
   #+end_src

** Beginend
   #+begin_src emacs-lisp
     (use-package beginend
       :defer t
       :diminish (beginend-global-mode
                  beginend-bs-mode
                  beginend-prog-mode
                  beginend-org-mode
                  beginend-outline-mode
                  beginend-compilation-mode)
       :config
       (beginend-global-mode))
   #+end_src

** Expand-region
   #+begin_src emacs-lisp
(after! expand-region
  (setq expand-region-fast-keys-enabled nil))

(after! hydra
  (defhydra yang/hydra-expand (:columns 5)
    "expand-region"
    ("V" er/contract-region "Contract")
    ("v" er/expand-region "Expand")
    ("u" er/mark-url "Mark url")
    ("f" er/mark-defun "Function")
    ("c" er/mark-comment "Comment")
    ("e" evil-iedit-state/iedit-mode-from-expand-region "Edit")
    ("b" (lambda (beg end)
           (interactive "r")
           (let ((str (buffer-substring beg end)))
             (when (browse-url str)     ; return non-nil when fail
               (google-this-string nil str t))
             (er/expand-region 0)))
     "Browse/search" :color blue)
    ("r" (lambda () (interactive) (er/expand-region 0)) "Reset" :color blue)
    ("C-g" (lambda () (interactive) (er/expand-region 0)) "Reset" :color blue))
  (yang/with-doom
    (general-def
      :keymaps 'doom-leader-map
      "v" #'yang/hydra-expand/body)))
   #+end_src

*** Temp fix
    #+begin_src emacs-lisp
      (yang/with-spacemacs
        (defun yang/fix-expand-region ()
          (interactive)
          (let* ((file (symbol-file #'er/save-org-mode-excursion)))
            ;; (byte-force-recompile dir)
            (byte-recompile-file file t)
            (load-file file))))
    #+end_src

* General
  #+BEGIN_SRC emacs-lisp
    (setq system-time-locale "zh_CN.utf-8"
          user-mail-address "yangsheng6810@gmail.com")
    (setq exec-path (cons (expand-file-name "~/.pyenv/shims") exec-path))
    (defconst yang/at-china nil)
    (when yang/at-china
      (after! url-vars
        (setq url-gateway-method 'socks)
        (setq url-proxy-services
              '(
                ;; ("no_proxy" . "^\\(localhost\\|192\\.168\\..*\\)")
                ("http"     . "127.0.0.1:8123")
                ("https"    . "127.0.0.1:8123"))))
      (setq socks-server '("Default server" "127.0.0.1" 8883 5))
      (setq request--url-options
            '("--proxy" "socks5://localhost:8883")))
  #+END_SRC

** COMMENT Purpose
   #+begin_src emacs-lisp
     (setq purpose-layout-dirs
           (list (concat yang/dotemacs-dir "layouts/")))
   #+end_src

** Purpose
   #+begin_src emacs-lisp
     (yang/with-spacemacs
       (use-package window-purpose
         :defer t
         :config
         (add-to-list 'purpose-user-mode-purposes '(telega-root-mode . telega-menu))
         (add-to-list 'purpose-user-mode-purposes '(telega-chat-mode . telega-chat))
         (purpose-compile-user-configuration) ; activates your changes
         ))
   #+end_src

** COMMENT Terminal
   #+begin_src emacs-lisp
(yang/with-spacemacs
  (defun yang/load-theme-according-to-gui ()
    (message "yang: load theme...")
    (message "server name is %s" server-name)
    (when (string-equal "terminal" server-name)
      (load-theme 'spacemacs-dark)))
  (yang/load-theme-according-to-gui)
  (add-hook 'before-make-frame-hook #'yang/load-theme-according-to-gui))
   #+end_src

** Ellocate
   #+begin_src emacs-lisp
(use-package ellocate
  :defer t
  :config
  (setq ellocate-scan-dirs
        `(("~/" ,(concat yang/dotemacs-dir ".cache/ellocate-home-db"))
          ("/mnt/" nil))))
   #+end_src

** Recentf
#+BEGIN_SRC emacs-lisp
(after!
  (setq recentf-keep '(file-remote-p file-readable-p)))
#+END_SRC

* Display
  #+BEGIN_SRC emacs-lisp
(after! frame
  (setq
   initial-frame-alist                  ; initial window
   '(
     (width . 100)                      ; character
     (height . 54)                      ; lines
     )

   default-frame-alist                  ; default/sebsequent window
   '(
     (width . 100)                    ; character
     (height . 52)                    ; lines
     )))
    ;; use 24hr format
    (setq display-time-24hr-format t)

    (setq use-default-font-for-symbols nil)

    ;; Colorize strings that represent colors.
    ;; (add-hook 'prog-mode-hook 'rainbow-mode)

    (unless (fboundp 'spacemacs/diminish-undo)
      (defun spacemacs/diminish-undo (mode)
        "Restore the diminished lighter."
        (interactive
         (list (read (completing-read
                      "Restore what diminished mode: "
                      (cons (list "diminished-modes")
                            (mapcar (lambda (x) (list (symbol-name (car x))))
                                    diminished-mode-alist))
                      nil t nil 'diminish-history-symbols))))
        ;; remove the `mode' entry from spacemacs own list
        (setq spacemacs--diminished-minor-modes
              (delq nil (mapcar (lambda (x) (unless (eq (car x) mode) x))
                                spacemacs--diminished-minor-modes)))
        (diminish-undo mode))
      )

    ;; hide common minor modes
    ;; need to first remove mode from spacemacs--diminished-minor-modes
    ;; (use-package diminish
    ;;   :defer t
    ;;   :after (core-fonts-support which-key)
    ;;   :init (spacemacs/diminish-undo 'which-key-mode)
    ;;   :diminish which-key-mode)

    (yang/with-spacemacs
     (use-package which-key
       :after (core-fonts-support)
       :config (spacemacs/diminish-undo 'which-key-mode)
       :diminish which-key-mode)

     (use-package smartparens
       :after (core-fonts-support)
       :config (spacemacs/diminish-undo 'smartparens-mode)
       :diminish smartparens-mode)

     (use-package company
       :after (core-fonts-support)
       :config (spacemacs/diminish-undo 'company-mode)
       :diminish company-mode)

     (use-package importmagic
       :after (core-fonts-support)
       :config (spacemacs/diminish-undo 'importmagic-mode)
       :diminish importmagic-mode)

     (use-package beacon
       :defer t
       :diminish beacon-mode
       :config
       (defun beacon--visual-current-column ()
         "Get the visual column we are at, takes long lines and visual line mode into account."
         (save-excursion
           (let ((current (point)))
             (beginning-of-visual-line)
             (- current (point)))))

       (defun yang/beacon--after-string-overlay (colors)
         "Put an overlay at point with an after-string property.
    The property's value is a string of spaces with background
    COLORS applied to each one."
         ;; The after-string must not be longer than the remaining columns
         ;; from point to right window-end else it will be wrapped around.
         (let ((colors (seq-take colors (- (window-width) (beacon--visual-current-column) 1))))
           (beacon--ov-put-after-string (beacon--make-overlay 0) colors)))
       (advice-add #'beacon--after-string-overlay :override #'yang/beacon--after-string-overlay)
       )

     (beacon-mode 1))

    (after! face-remap
      (diminish 'buffer-face-mode))

    (after! spaceline
      (spaceline-toggle-buffer-encoding-abbrev-off))
  #+END_SRC

** varable-pitch-mode
   #+BEGIN_SRC emacs-lisp
     ;; (add-hook 'text-mode-hook
     ;;           (lambda ()
     ;;             (variable-pitch-mode 1)))
     (add-hook 'conf-mode-hook
               (lambda ()
                 (variable-pitch-mode -1)) t)

     (defun yang/fix-line-number ()
       ;; (set-face-attribute 'variable-pitch nil :family "EtBembo")
       (set-face-attribute 'variable-pitch nil :family "Libre Baskerville")
       (set-face-attribute 'fixed-pitch nil :family "等距更纱黑体 SC")
       (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
       (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
       )

     (yang/fix-line-number)
     (yang/with-doom
       (add-hook 'doom-load-theme-hook #'yang/fix-line-number))

     (yang/with-spacemacs
       (use-package theming
         :defer t
         :init
         (defmacro set-pair-faces (themes consts faces-alist)
           "Macro for pair setting of custom faces.
               THEMES name the pair (theme-one theme-two). CONSTS sets the variables like
                 ((sans-font \"Some Sans Font\") ...). FACES-ALIST has the actual faces
               like:
                 ((face1 theme-one-attr theme-two-atrr)
                  (face2 theme-one-attr nil           )
                  (face3 nil            theme-two-attr)
                  ...)"
           (defmacro get-proper-faces ()
             `(let* (,@consts)
                (backquote ,faces-alist)))

           `(setq theming-modifications
                  ',(mapcar (lambda (theme)
                              `(,theme ,@(cl-remove-if
                                          (lambda (x) (equal x "NA"))
                                          (mapcar (lambda (face)
                                                    (let ((face-name (car face))
                                                          (face-attrs (nth (cl-position theme themes) (cdr face))))
                                                      (if face-attrs
                                                          `(,face-name ,@face-attrs)
                                                        "NA"))) (get-proper-faces)))))
                            themes)))

         (set-pair-faces
          ;; Themes to cycle in
          (doom-molokai spacemacs-light spacemacs-dark)

          ;; Variables
          ((bg-white           "#fbf8ef")
           (bg-light           "#e3e1e0")
           (bg-dark            "#1c1e1f")
           (bg-darker          "#1c1c1c")
           (fg-white           "#ffffff")
           (shade-white        "#efeae9")
           (fg-light           "#655370")
           (dark-cyan          "#008b8b")
           (region-dark        "#2d2e2e")
           (region             "#39393d")
           (slate              "#8FA1B3")
           (keyword            "#f92672")
           (comment            "#525254")
           (builtin            "#fd971f")
           (purple             "#9c91e4")
           (doc                "#727280")
           (type               "#66d9ef")
           (string             "#b6e63e")
           (gray-dark          "#999")
           (gray               "#bbb")
           (sans-font          "Source Sans Pro")
           (serif-font         "Merriweather")
           ;; (et-font            "EtBembo")
           (et-font  "Libre Baskerville")
           (sans-mono-font     "Souce Code Pro")
           (serif-mono-font "Verily Serif Mono"))
          ;; Settings
          ((variable-pitch
            (:family ,sans-font)
            (:family ,et-font
                     :background nil
                     :foreground ,bg-dark
                     :height 1.2)
            (:family ,et-font
                     :background nil
                     :foreground ,bg-light
                     :height 1.2))
           (org-document-title
            (:inherit variable-pitch
                      :height 1.3
                      :weight normal
                      :foreground ,gray)
            (:inherit nil
                      :family ,et-font
                      :height 1.8
                      :foreground ,bg-dark
                      :underline nil)
            (:inherit nil
                      :family ,et-font
                      :height 1.8
                      :foreground ,bg-light
                      :underline nil))
           (org-document-info
            (:foreground ,gray
                         :slant italic)
            (:height 1.2
                     :slant italic)
            (:height 1.2
                     :slant italic))
           (org-level-1
            (:inherit variable-pitch
                      :height 1.3
                      :weight bold
                      :foreground ,keyword
                      :background ,bg-dark)
            (:inherit nil
                      :family ,et-font
                      :height 1.6
                      :weight normal
                      :slant normal
                      :foreground ,bg-dark)
            (:inherit nil
                      :family ,et-font
                      :height 1.6
                      :weight normal
                      :slant normal
                      :foreground ,bg-light))
           (org-level-2
            (:inherit variable-pitch
                      :weight bold
                      :height 1.2
                      :foreground ,gray
                      :background ,bg-dark)
            (:inherit nil
                      :family ,et-font
                      :weight normal
                      :height 1.3
                      :slant italic
                      :foreground ,bg-dark)
            (:inherit nil
                      :family ,et-font
                      :weight normal
                      :height 1.3
                      :slant italic
                      :foreground ,bg-light))
           (org-level-3
            (:inherit variable-pitch
                      :weight bold
                      :height 1.1
                      :foreground ,slate
                      :background ,bg-dark)
            (:inherit nil
                      :family ,et-font
                      :weight normal
                      :slant italic
                      :height 1.2
                      :foreground ,bg-dark)
            (:inherit nil
                      :family ,et-font
                      :weight normal
                      :slant italic
                      :height 1.2
                      :foreground ,bg-light))
           (org-level-4
            (:inherit variable-pitch
                      :weight bold
                      :height 1.1
                      :foreground ,slate
                      :background ,bg-dark)
            (:inherit nil
                      :family ,et-font
                      :weight normal
                      :slant italic
                      :height 1.1
                      :foreground ,bg-dark)
            (:inherit nil
                      :family ,et-font
                      :weight normal
                      :slant italic
                      :height 1.1
                      :foreground ,bg-light))
           (org-level-5
            (:inherit variable-pitch
                      :weight bold
                      :height 1.1
                      :foreground ,slate
                      :background ,bg-dark)
            nil
            nil)
           (org-level-6
            (:inherit variable-pitch
                      :weight bold
                      :height 1.1
                      :foreground ,slate
                      :background ,bg-dark)
            nil
            nil)
           (org-level-7
            (:inherit variable-pitch
                      :weight bold
                      :height 1.1
                      :foreground ,slate
                      :background ,bg-dark)
            nil
            nil)
           (org-level-8
            (:inherit variable-pitch
                      :weight bold
                      :height 1.1
                      :foreground ,slate
                      :background ,bg-dark)
            nil
            nil)
           (org-headline-done
            (:strike-through t)
            (:family ,et-font
                     :strike-through t)
            (:family ,et-font
                     :strike-through t))
           (org-quote
            (:background ,bg-dark)
            nil
            nil)
           (org-block
            (:background ,bg-dark
                         :inhert fixed-pitch)
            (:background nil
                         :foreground ,bg-dark
                         :inhert fixed-pitch)
            (:background nil
                         :foreground ,bg-light
                         :inhert fixed-pitch))
           (org-block-begin-line
            (:background ,bg-dark)
            (:background nil
                         :height 0.8
                         :family ,sans-mono-font
                         :foreground ,slate)
            (:background nil
                         :height 0.8
                         :family ,sans-mono-font
                         :foreground ,slate))
           (org-block-end-line
            (:background ,bg-dark)
            (:background nil
                         :height 0.8
                         :family ,sans-mono-font
                         :foreground ,slate)
            (:background nil
                         :height 0.8
                         :family ,sans-mono-font
                         :foreground ,slate))
           (org-document-info-keyword
            (:foreground ,comment)
            (:height 0.8
                     :foreground ,gray)
            (:height 0.8
                     :foreground ,gray-dark))
           (org-link
            (:underline nil
                        :weight normal
                        :foreground ,slate)
            (:foreground ,bg-dark)
            (:foreground ,bg-light))
           (org-special-keyword
            (:height 0.9
                     :foreground ,comment)
            (:family ,sans-mono-font
                     :height 0.8)
            (:family ,sans-mono-font
                     :height 0.8))
           (org-todo
            (:foreground ,builtin
                         :background ,bg-dark)
            nil
            nil)
           (org-done
            (:inherit variable-pitch
                      :foreground ,dark-cyan
                      :background ,bg-dark)
            nil
            nil)
           (org-agenda-current-time
            (:foreground ,slate)
            nil
            nil)
           (org-hide
            nil
            (:foreground ,bg-white)
            (:foreground ,bg-darker))
           (org-indent
            (:inherit org-hide)
            (:inherit (org-hide fixed-pitch))
            (:inherit (org-hide fixed-pitch)))
           (org-time-grid
            (:foreground ,comment)
            nil
            nil)
           (org-warning
            (:foreground ,builtin)
            nil
            nil)
           (org-date
            nil
            (:family ,sans-mono-font
                     :height 0.8)
            (:family ,sans-mono-font
                     :height 0.8))
           (org-agenda-structure
            (:height 1.3
                     :foreground ,doc
                     :weight normal
                     :inherit variable-pitch)
            nil
            nil)
           (org-agenda-date
            (:foreground ,doc
                         :inherit variable-pitch)
            ;; (:inherit variable-pitch
            ;;           :height 1.1)
            nil
            nil)
           (org-agenda-date-today
            (:height 1.5
                     :foreground ,keyword
                     :inherit variable-pitch)
            nil
            nil)
           (org-agenda-date-weekend
            (:inherit org-agenda-date)
            nil
            nil)
           (org-scheduled
            (:foreground ,gray)
            nil
            nil)
           (org-upcoming-deadline
            (:foreground ,keyword)
            nil
            nil)
           (org-scheduled-today
            (:foreground ,fg-white)
            nil
            nil)
           (org-scheduled-previously
            (:foreground ,slate)
            nil
            nil)
           (org-agenda-done
            (:inherit nil
                      :strike-through t
                      :foreground ,doc)
            (:strike-through t
                             :foreground ,doc)
            (:strike-through t
                             :foreground ,doc))
           (org-ellipsis
            (:underline nil
                        :foreground ,comment)
            (:underline nil
                        :foreground ,comment)
            (:underline nil
                        :foreground ,comment))
           (org-tag
            (:foreground ,doc)
            (:foreground ,doc)
            (:foreground ,doc))
           (org-table
            (:background nil
                         :inherit fixed-pitch)
            (:family ,serif-mono-font
                     :height 1.0
                     :background ,bg-white
                     :inherit fixed-pitch)
            (:family ,serif-mono-font
                     :height 1.0
                     :background ,bg-darker
                     :inherit fixed-pitch))
           (org-formula
            (:inherit font-lock-builtin-face)
            (:inherit fixed-pitch
                      :family ,serif-mono-font
                      :foreground ,keyword
                      :height 1.0)
            (:inherit fixed-pitch
                      :family ,serif-mono-font
                      :foreground ,keyword
                      :height 1.0))
           (org-code
            (:inherit font-lock-builtin-face)
            (:inherit fixed-pitch
                      :family ,serif-mono-font
                      :foreground ,comment
                      :height 1.0)
            (:inherit fixed-pitch
                      :family ,serif-mono-font
                      :foreground ,comment
                      :height 1.0))
           (font-latex-sectioning-0-face
            (:foreground ,type
                         :height 1.2)
            nil
            nil)
           (font-latex-sectioning-1-face
            (:foreground ,type
                         :height 1.1)
            nil
            nil)
           (font-latex-sectioning-2-face
            (:foreground ,type
                         :height 1.1)
            nil
            nil)
           (font-latex-sectioning-3-face
            (:foreground ,type
                         :height 1.0)
            nil
            nil)
           (font-latex-sectioning-4-face
            (:foreground ,type
                         :height 1.0)
            nil
            nil)
           (font-latex-sectioning-5-face
            (:foreground ,type
                         :height 1.0)
            nil
            nil)
           (font-latex-verbatim-face
            (:foreground ,builtin)
            nil
            nil)))
         ))
   #+END_SRC

** Posframe
   #+begin_src emacs-lisp
(use-package ivy-posframe
  ;; (push '(spacemacs/ivy-spacemacs-layouts . ivy-posframe-display-at-window-bottom-left) ivy-display-functions-alist)
  ;; (push '(complete-symbol . ivy-posframe-display-at-point) ivy-display-functions-alist)
  ;; ;; not enable in swiper since it cause trouble for long lines
  ;; (push '(swiper . ivy-posframe-display-at-point) ivy-display-functions-alist)
  ;; (setq ivy-display-function #'ivy-posframe-display)
  :diminish (ivy-posframe)
  :defer t
  :config
  ;; (push '(counsel-M-x . ivy-posframe-display-at-window-bottom-left) ivy-display-functions-alist)
  (ivy-posframe-enable))

(use-package company-posframe
  :commands (company-posframe-mode yang/company-posframe-helper)
  :after (company)
  :diminish company-posframe-mode
  :init
  (defun yang/company-posframe-helper (&optional frame)
    (message "Helper for company-posframe called")
    (company-posframe-mode 1))
  (run-with-timer 10 nil #'yang/company-posframe-helper))

;; NOTE: required hydra and posframe
(use-package hydra-posframe
  :defer t
  :hook (after-init . hydra-posframe-enable)
  :config
  (setq hydra-posframe-poshandler #'posframe-poshandler-window-bottom-center))
   #+end_src

** Fix doom
#+begin_src emacs-lisp
  (yang/with-doom
    (remove-hook! 'text-mode-hook #'hl-fill-column-mode)
    (setq doom-theme 'spacemacs-light)
    (with-eval-after-load 'solaire-mode
      (turn-off-solaire-mode))
    (with-eval-after-load 'hl-line
      (global-hl-line-mode -1)
      (hl-line-mode -1)))
(yang/with-doom
  (add-hook 'org-agenda-finalize-hook
            (lambda () (setq doom-real-buffer-p t)) -10))
#+end_src

** Default keybindings
#+BEGIN_SRC emacs-lisp
  (yang/with-doom
    (map! :leader
          :desc "Eval expression"       ";"    #'eval-expression
          :desc "M-x"                   "SPC"    #'execute-extended-command
  ;;; <leader> TAB --- workspace
          (:when (featurep! :ui workspaces)
                 (:prefix-map ("l" . "workspace")
                              :desc "Display tab bar"           "TAB" #'+workspace/display
                              :desc "Switch workspace"          "."   #'+workspace/switch-to
                              :desc "Switch to last workspace"  "`"   #'+workspace/other
                              :desc "New workspace"             "n"   #'+workspace/new
                              :desc "Select workspace with ivy" "l"   #'spacemacs/ivy-spacemacs-layouts
                              :desc "Load workspace from file"  "L"   #'+workspace/load
                              :desc "Save workspace to file"    "s"   #'+workspace/save
                              :desc "Delete session"            "x"   #'+workspace/kill-session
                              :desc "Delete this workspace"     "d"   #'+workspace/delete
                              :desc "Rename workspace"          "r"   #'+workspace/rename
                              :desc "Restore last session"      "R"   #'+workspace/restore-last-session
                              :desc "Next workspace"            "]"   #'+workspace/switch-right
                              :desc "Previous workspace"        "["   #'+workspace/switch-left
                              :desc "Switch to 1st workspace"   "1"   #'+workspace/switch-to-0
                              :desc "Switch to 2nd workspace"   "2"   #'+workspace/switch-to-1
                              :desc "Switch to 3rd workspace"   "3"   #'+workspace/switch-to-2
                              :desc "Switch to 4th workspace"   "4"   #'+workspace/switch-to-3
                              :desc "Switch to 5th workspace"   "5"   #'+workspace/switch-to-4
                              :desc "Switch to 6th workspace"   "6"   #'+workspace/switch-to-5
                              :desc "Switch to 7th workspace"   "7"   #'+workspace/switch-to-6
                              :desc "Switch to 8th workspace"   "8"   #'+workspace/switch-to-7
                              :desc "Switch to 9th workspace"   "9"   #'+workspace/switch-to-8
                              :desc "Switch to final workspace" "0"   #'+workspace/switch-to-final))))
#+END_SRC

** Popwin
   #+begin_src emacs-lisp
     ;; (use-package pupo-mode
     ;;   :config
     ;;   ;; M-x dired-jump-other-window
     ;;   (push '(dired-mode :position top) popwin:special-display-config)
     ;;   ;; calendar always as a popup
     ;;   (push '(calendar-mode :height 15 :position bottom) popwin:special-display-config)
     ;;   ;; ;; helpful
     ;;   ;; ;; need :dedicated to be able to jump from there
     ;;   ;; (push '(helpful-mode :position right :width 120 :dedicated t) popwin:special-display-config)
     ;;   (push '("\\*TeX Help\\*" :height 15 :position bottom) popwin:special-display-config)
     ;;   (push '(helpful-mode :dedicated t :position bottom :stick t :noselect t :height 0.4) popwin:special-display-config)
     ;;   (pupo/update-purpose-config)
     ;;   )

     ;; (popwin-mode 1)
   #+end_src

** Fill-indicator
#+begin_src emacs-lisp
(use-package sh-script
  :init
  (add-hook 'sh-mode-hook (lambda () (hl-fill-column-mode -1))))
#+end_src

* Compatible Keyboard for Doom
#+begin_src emacs-lisp
  (yang/with-doom
    (defun spacemacs/ivy-spacemacs-layouts ()
      (interactive)
      (ivy-read "Layouts: "
                (persp-names)
                :caller 'spacemacs/ivy-spacemacs-layouts
                :action (lambda (name) (funcall #'+workspace-switch name t))))
    (general-def
      :keymaps 'doom-leader-map
      "SPC" '(counsel-M-x :which-key "M-x")
      "w/"  #'evil-window-vsplit
      "w-"  #'evil-window-split
      "TAB l"  #'spacemacs/ivy-spacemacs-layouts
      "TAB L"  #'+workspace/load
      )
    (general-def
      :states '(normal visual)
      :keymaps 'org-mode-map
      "C-c C-a" '(org-agenda :which-key "org-agenda")))
#+end_src

* Ergonomic keybindings
  #+BEGIN_SRC emacs-lisp
    ;; Ergonomic keybinding M-<hjkl>
    (use-package evil-evilified-state
      :defer t
      :config
      (mapc (lambda (keymap)
              ;; Normal-mode, hjkl
              (define-key keymap (kbd "M-h") 'evil-backward-char)
              (define-key keymap (kbd "M-l") 'evil-forward-char)
              (define-key keymap (kbd "M-k") 'evil-previous-visual-line)
              (define-key keymap (kbd "M-j") 'evil-next-visual-line)

              ;; Move to beginning/ending of line
              (define-key keymap (kbd "M-H") 'move-beginning-of-line)
              (define-key keymap (kbd "M-L") 'move-end-of-line)
              (define-key keymap (kbd "C-a") 'move-beginning-of-line)
              (define-key keymap (kbd "C-e") 'move-end-of-line)
              ;; Scroll up/down
              (define-key keymap (kbd "M-J") 'evil-scroll-down)
              (define-key keymap (kbd "M-K") 'evil-scroll-up)
              ;; ;; delete-char
              ;; (define-key keymap (kbd "C-d") 'delete-char)
              )
            `(,evil-insert-state-map
              ,evil-motion-state-map
              ,evil-visual-state-map
              ,evil-evilified-state-map-original)))

    ;; fix some keybinding problems
    ;; fix for js2-mode
    (use-package js2-mode
      :defer t
      :bind (:map js2-mode-map
                  ("M-j" . nil)))

    (general-def
      :keymaps 'evil-org-mode-map
      :states '(visual normal motion insert)
      "M-h" nil
      "M-j" nil
      "M-k" nil
      "M-l" nil

      "M-H" nil
      "M-L" nil
      ;; "C-a" nil
      ;; "C-e" nil

      ;; "M-J" nil
      ;; "M-K" nil
      "C-d" nil
      )

    ;; (evil-define-key '(normal insert motion visual) evil-org-mode-map
    ;;   (kbd "M-h") nil
    ;;   (kbd "M-j") nil
    ;;   (kbd "M-k") nil
    ;;   (kbd "M-l") nil
    ;;   (kbd "M-H") nil
    ;;   (kbd "M-J") nil
    ;;   (kbd "M-K") nil
    ;;   (kbd "M-L") nil
    ;;   ;; actually unset all the following
    ;;   ;; (kbd "M-h") 'org-metaleft
    ;;   ;; (kbd "M-j") 'org-metadown
    ;;   ;; (kbd "M-k") 'org-metaup
    ;;   ;; (kbd "M-l") 'org-metaright
    ;;   ;; (kbd "M-H") 'org-shiftmetaleft
    ;;   ;; (kbd "M-J") 'org-shiftmetadown
    ;;   ;; (kbd "M-K") 'org-shiftmetaup
    ;;   ;; (kbd "M-L") 'org-shiftmetaright
    ;;   )

    (general-def
      :keymaps '(override global)
      :states '(motion insert)
      "M-h" 'evil-backward-char
      "M-j" 'evil-next-visual-line
      "M-k" 'evil-previous-visual-line
      "M-l" 'evil-forward-char

      "M-H" 'move-beginning-of-line
      "M-L" 'move-end-of-line
      "C-a" 'move-beginning-of-line
      "C-e" 'move-end-of-line

      "M-J" 'evil-scroll-down
      "M-K" 'evil-scroll-up
      "C-d" 'delete-char)

    (general-def
      :keymaps 'visual-line-mode-map
      [remap evil-next-line] #'evil-next-line
      [remap evil-previous-line] #'evil-previous-line
      [remap evil-next-visual-line] #'evil-next-visual-line
      [remap evil-previous-visual-line] #'evil-previous-visual-line)


    (general-def
      :keymaps '(override org-mode-map)
      :states '(normal motion insert visual)
      "M-h" 'evil-backward-char
      "M-j" 'evil-next-visual-line
      "M-k" 'evil-previous-visual-line
      "M-l" 'evil-forward-char

      "M-H" 'move-beginning-of-line
      "M-L" 'move-end-of-line
      "C-a" 'move-beginning-of-line
      "C-e" 'move-end-of-line

      "M-J" 'evil-scroll-down
      "M-K" 'evil-scroll-up
      "C-d" 'delete-char)


  #+END_SRC
  
* Emacs-lisp
  #+begin_src emacs-lisp
    (use-package lispy
      :defer t
      :init
      (defun yang/enable-lispy-mode ()
        (lispy-mode 1))
      ;; enable lispy-mode in emacs-lisp-mode
      (add-hook 'emacs-lisp-mode-hook #'yang/enable-lispy-mode)

      ;; enable lispy-mode in minibuffer
      (defun conditionally-enable-lispy ()
        (when (eq this-command 'eval-expression)
          (lispy-mode 1)))
      (add-hook 'minibuffer-setup-hook 'conditionally-enable-lispy)
      :diminish lispy-mode)

    (yang/with-doom
      (setq doom-scratch-buffer-major-mode 'emacs-lisp-mode))
  #+end_src

* Org-mode
** General
  #+BEGIN_SRC emacs-lisp
    ;; wrap in with-eval-after-load, see
    ;; http://spacemacs.org/layers/+emacs/org/README.html#important-note
    (use-package org
      :defer t
      :init
      (setq org-directory "~/Documents/org/"
            ;; fix doom
            org-id-locations-file (concat org-directory ".orgids")
            org-id-locations-file-relative t)
      :config
      (setq
       ;; place tags directly after headline text, with only one space in between
       org-tags-column 0
       ;; Highlight latex text in org mode
       org-highlight-latex-and-related '(latex script entities)
       ;; do not treat bare '_' as indication of subscript,
       ;; require a_{x} to indicate subscript
       org-use-sub-superscripts '{}
       org-startup-truncated nil
       org-src-window-setup 'current-window
       org-todo-keywords
       '((sequence "TODO(t)" "PUSHED(p@)" "NEXT(n)" "INACTIVE(i@/!)" "WAIT(w@/!)" "|" "DONE(d!)")
         (sequence "|" "CANCLED(c@)"))
       org-startup-truncated nil
       org-M-RET-may-split-line '((default))
       org-extend-today-until 3 ;; before 3 a.m. is still considered "today"
       org-refile-targets '((nil :maxlevel . 3)
                            (org-agenda-files :maxlevel . 3))
       ;; fontify code in code blocks
       org-src-fontify-natively t
       preview-scale-function 1.66
       org-return-follows-link t
       )

      (plist-put org-format-latex-options :scale 1.66)

      (defun yang/org-mode-setup ()
        (yang/with-doom
          (hl-fill-column-mode -1))
        (visual-line-mode 1)
        (variable-pitch-mode 1)
        (display-line-numbers-mode -1)
        (smartparens-mode 1)
        (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-table nil :inherit 'fixed-pitch))

      (add-hook 'org-mode-hook #'yang/org-mode-setup)
      (remove-hook 'org-mode-hook #'auto-fill-mode)


      ;; ;; actually insert space with pangu-spacing for org-mode, to fix indentation
      ;; ;; in table
      ;; (set (make-local-variable 'pangu-spacing-real-insert-separtor) t)
      (add-to-list 'org-babel-load-languages '(latex . t))

      (defun yang/org-wrap-span (beg end)
        (interactive "r")
        (let ((class-name (read-string "Enter the class for span: ")))
          (save-excursion
            (goto-char end) (insert ")}}}")
            (goto-char beg) (insert (format "{{{SPAN(%s," class-name))))))

      (after! org-faces
        (set-face-attribute 'org-document-info nil :height 1.2)
        (set-face-attribute 'org-level-1 nil :height 1.6)
        (set-face-attribute 'org-level-2 nil :height 1.3)
        (set-face-attribute 'org-level-3 nil :height 1.2)
        (set-face-attribute 'org-level-4 nil :height 1.1))

      ;; restore easy templates, can also use =, i b= to insert
      (use-package org-tempo
        :after org
        :config
        (add-to-list 'org-structure-template-alist (cons "se" "src emacs-lisp")))

      (use-package org-protocol
        :defer t)

      (use-package ox-re-reveal
        :after org-compat
        :commands (jw/html-escape-attribute)
        :config
        (defun jw/html-escape-attribute (value)
          "Entity-escape VALUE and wrap it in quotes."
          ;; http://www.w3.org/TR/2009/WD-html5-20090212/serializing-html-fragments.html
          ;;
          ;; "Escaping a string... consists of replacing any occurrences of
          ;; the "&" character by the string "&amp;", any occurrences of the
          ;; U+00A0 NO-BREAK SPACE character by the string "&nbsp;", and, if
          ;; the algorithm was invoked in the attribute mode, any occurrences
          ;; of the """ character by the string "&quot;"..."
          (let* ((value (replace-regexp-in-string "&" "&amp;" value))
                 (value (replace-regexp-in-string "\u00a0" "&nbsp;" value))
                 (value (replace-regexp-in-string "\"" "&quot;" value)))
            value))
        (org-add-link-type
         "span" #'ignore                ; not an 'openable' link
         #'(lambda (class desc format)
             (pcase format
               (`html (format "<span class=\"%s\">%s</span>"
                              (jw/html-escape-attribute class)
                              (or desc "")))
               (_ (or desc ""))))))
  #+END_SRC

** org-pdfview
   #+BEGIN_SRC emacs-lisp
     (use-package org-pdfview
         ;; :ensure t
       :defer t
       :after (org)
       :config
       (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link)))))
   #+END_SRC

** Fix org-docview
   Fixing =(error "epdfinfo: No such page 0")=
   #+begin_src emacs-lisp
     (after! 'org-docview
       (defun org-docview-open (link)
         (string-match "\\(.*?\\)\\(?:::\\([0-9]+\\)\\)?$" link)
         (let ((path (match-string 1 link))
               (page (and (match-beginning 2)
                          (string-to-number (match-string 2 link)))))
           ;; Let Org mode open the file (in-emacs = 1) to ensure
           ;; org-link-frame-setup is respected.
           (org-open-file path 1)
           (unless (derived-mode-p 'doc-view-mode)
             (doc-view-mode))
           (when page (doc-view-goto-page page)))))
   #+end_src

** org-gcal
   #+BEGIN_SRC emacs-lisp
     (when (string= system-name "carbon")
       (use-package org-gcal
         :defer t
         :init
         (setq org-gcal-dir (concat yang/dotemacs-dir
                                    "org-gcal/"))
         (setq
          org-gcal-file-alist '(("yangsheng6810@gmail.com" .  "~/Documents/org/gcal.org")))
         :config
         (load (concat yang/dotemacs-dir "credentials.el") 'noerror)

         ;; (defun org-gcal-capture-after-func ()
         ;;   (message "run org-gcal-post-at-point")
         ;;   (org-gcal-post-at-point)
         ;;   (remove-hook 'org-capture-after-finalize-hook #'org-gcal-capture-after-func))

         ;; (defun org-gcal-capture-before-func ()
         ;;   (let* ((buffer-name (prin1-to-string (current-buffer))))
         ;;     (dolist (pair org-gcal-file-alist )
         ;;       (when (and pair (cdr pair)
         ;;                  (string= buffer-file-name (expand-file-name (cdr pair))))
         ;;         (add-hook 'org-capture-after-finalize-hook #'org-gcal-capture-after-func)))))

         ;; (add-hook 'org-capture-before-finalize-hook #'org-gcal-capture-before-func)
         ))
   #+END_SRC

** org-journal
   #+BEGIN_SRC emacs-lisp
     (use-package org-journal
       ;; :init
       :init
       (setq org-journal-dir "~/Documents/org/journal/"
             org-journal-file-format "%Y-%m-%d"
             org-journal-date-format "%Y 年 %m 月 %d 日 %A")
       :config
       (defun org-journal-find-location ()
         ;; Open today's journal, but specify a non-nil prefix argument in order to
         ;; inhibit inserting the heading; org-capture will insert the heading.
         (org-journal-new-entry t)
         ;; Position point on the journal's top-level heading so that org-capture
         ;; will add the new entry as a child entry.
         (goto-char (point-min)))

       (yang/with-spacemacs
         (set-keymap-parent spacemacs-org-journal-mode-map spacemacs-org-mode-map)
         (set-keymap-parent spacemacs-org-journal-mode-map-prefix spacemacs-org-mode-map-prefix)
         (set-keymap-parent spacemacs-org-journal-mode-map-root-map spacemacs-org-mode-map-root-map))

       (defun yang/switch-to-journal-today ()
         "Switch to today's org-journal file"
         (interactive)
         (org-journal-new-entry t))

       ;; make sure the file is saved
       (add-hook 'org-journal-after-entry-create-hook #'save-buffer)

       (yang/set-leader-key "bj" 'yang/switch-to-journal-today)
       (yang/set-leader-key "bJ" 'org-journal-new-entry)

     ;;   ;; override default function as it prints out lots of messages
     ;;   (defun org-journal-update-org-agenda-files ()
     ;;     "Adds the current and future journal files to org-agenda-files.
     ;; And cleans out past org-journal files."
     ;;     (when org-journal-enable-agenda-integration
     ;;       (let ((agenda-files-without-org-journal
     ;;              (seq-filter
     ;;               (lambda (f)
     ;;                 ;; (message "DEBUG: %s %s"
     ;;                 ;;          (expand-file-name (file-name-directory f))
     ;;                 ;;          (expand-file-name (file-name-as-directory org-journal-dir)))
     ;;                 (not (and (string= (expand-file-name (file-name-directory f))
     ;;                                    (expand-file-name (file-name-as-directory org-journal-dir)))
     ;;                           (string-match org-journal-file-pattern (file-name-nondirectory f)))))
     ;;               org-agenda-files))
     ;;             (org-journal-agenda-files
     ;;              (seq-filter
     ;;               ;; skip files that are older than today
     ;;               (lambda (f)
     ;;                 (not (time-less-p
     ;;                       (org-journal-calendar-date->time
     ;;                        (org-journal-file-name->calendar-date
     ;;                         (file-name-nondirectory f)))
     ;;                       (time-subtract (current-time) (days-to-time 1)))))
     ;;               (directory-files org-journal-dir t
     ;;                                org-journal-file-pattern))))
     ;;         (setq org-agenda-files (append agenda-files-without-org-journal
     ;;                                        org-journal-agenda-files)))))
       )
   #+END_SRC

** org-agenda
   :PROPERTIES:
   :ID:       d3110ee0-3505-4775-8d15-ba2b1d9f7f4b
   :END:
   #+BEGIN_SRC emacs-lisp
     (use-package org-agenda
       :defer t
       :init
       (setq org-agenda-files
             '("~/Documents/org/papers.org"
               "~/Documents/org/Tasks.org"
               "~/Documents/org/Birthdays.org"
               "~/Documents/org/gcal.org"
               "~/Documents/org/Schedule.org"))
       :config
       (mapc
        (lambda (value)
          (add-to-list
           'org-agenda-custom-commands value
          ;; nil (lambda (ele1 ele2)
          ;;       (equal (car ele1) (car ele2)))
          ))
        '(
          ("W" "Weekly Review"
           ((agenda "" ((org-agenda-span 7))); review upcoming deadlines and appointments
                                             ; type "l" in the agenda to review logged items
            (stuck "") ; review stuck projects as designated by org-stuck-projects
            ;; (todo "PROJECT") ; review all projects (assuming you use todo keywords to designate projects)
            ;; (todo "MAYBE") ; review someday/maybe items
            (todo "WAIT"))) ; review waiting items
          ("g" . "GTD contexts")
          ("gc" "Computer" tags-todo "computer|linux|emacs"
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
            (org-agenda-overriding-header "Unscheduled computer tasks")))
          ("ge" "Emacs" tags-todo "emacs"
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
            (org-agenda-overriding-header "Unscheduled emacs tasks")))
          ("gh" "Home" tags-todo "home"
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
            (org-agenda-overriding-header "Unscheduled home tasks")))
          ("gl" "Life" tags-todo "life"
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
            (org-agenda-overriding-header "Unscheduled life tasks")))
          ("gp" "Photography" tags-todo "photography|photo"
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
            (org-agenda-overriding-header "Unscheduled photography tasks")))
          ("gr" "Research" tags-todo "research"
           ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
            (org-agenda-overriding-header "Unscheduled research tasks")))
          ("d" "Upcoming deadlines" agenda ""
           ((org-agenda-entry-types '(:deadline))
            (org-agenda-span 14)
            (org-agenda-time-grid nil)))

          ("r" . "Weekly review")
          ("rw" "Last week"
           ((tags "TIMESTAMP_IA>=\"<-9d>\"+TIMESTAMP_IA<=\"<today>\"/DONE"
                  ((org-agenda-overriding-header "Got inactive in the last week")))
            (tags "TIMESTAMP>=\"<-9d>\"+TIMESTAMP<=\"<today>\"/DONE"
                  ((org-agenda-overriding-header "Happened in the last week")
                   (org-agenda-files '("~/Documents/org/Schedule.org"
                                       "~/Documents/org/Research.org"
                                       "~/Documents/org/gcal.org"
                                       "~/Documents/org/papers.org"
                                       "~/Documents/org/Tasks.org"))))
            (tags "SCHEDULED>=\"<-9d>\"+SCHEDULED<=\"<today>\"/DONE"
                  ((org-agenda-overriding-header "Scheduled and finished in the last week")
                   (org-agenda-repeating-timestamp-show-all t)   ;; ensures that repeating events appear on all relevant dates
                   ))
            (tags "SCHEDULED>=\"<-9d>\"+SCHEDULED<\"<today>\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Scheduled but didn't finished in the last week")))))
          ("c" "Weekly schedule" agenda ""
           ((org-agenda-span 7)           ;; agenda will start in week view
            (org-agenda-repeating-timestamp-show-all t)   ;; ensures that repeating events appear on all relevant dates
            (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
          )))
   #+END_SRC
   This shows the current week from today, but also the past three days.
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-span 10
           org-agenda-start-on-weekday nil
           org-agenda-start-day "-3d")
   #+END_SRC

** org clock
   #+BEGIN_SRC emacs-lisp
     (use-package org-timer
       :defer t
       :commands (org-timer-pause-or-continue org-clock-modify-effort-estimate org-info)
       :general
       ("C-c w" #'hydra-org-clock/body)
       :init
       (defhydra hydra-org-clock (:color blue :hint nil)
         "
        ^Clock:^ ^In/out^     ^Edit^   ^Summary^    | ^Timers:^ ^Run^           ^Insert
        -^-^-----^-^----------^-^------^-^----------|--^-^------^-^-------------^------
        (_?_)    _i_n         _e_dit   _g_oto entry | (_z_)     _r_elative      ti_m_e
         ^ ^     _c_ontinue   _q_uit   _d_isplay    |  ^ ^      cou_n_tdown     i_t_em
         ^ ^     _o_ut        ^ ^      _r_eport     |  ^ ^      _p_ause toggle
         ^ ^     ^ ^          ^ ^      ^ ^          |  ^ ^      _s_top
        "
         ("i" org-clock-in)
         ("c" org-clock-in-last)
         ("o" org-clock-out)

         ("e" org-clock-modify-effort-estimate)
         ("q" org-clock-cancel)

         ("g" org-clock-goto)
         ("d" org-clock-display)
         ("r" org-clock-report)
         ("?" (org-info "Clocking commands"))

         ("r" org-timer-start)
         ("n" org-timer-set-timer)
         ("p" org-timer-pause-or-continue)
         ("s" org-timer-stop)

         ("m" org-timer)
         ("t" org-timer-item)
         ("z" (org-info "Timers")))
       )

     (use-package org-agenda
       :defer t
       :commands (org-agenda-clock-in
                  org-agenda-clock-out
                  org-agenda-clock-cancel
                  org-agenda-clock-goto)
       :init
       (defhydra hydra-org-agenda-clock (:color blue :hint nil)
         "
        clock _i_n   clock _o_ut   _q_uit   _g_oto
        "
         ("i" org-agenda-clock-in)
         ("o" org-agenda-clock-out)
         ("q" org-agenda-clock-cancel)
         ("g" org-agenda-clock-goto))

       ;; use-package :bind does not work with hydra
       :bind (:map org-agenda-mode-map
                   ("C-c w" . hydra-org-agenda-clock/body))
       )
     ;; ;; Save the running clock and all clock history when exiting Emacs, load it on startup
     ;; (setq org-clock-persist t)
     ;; ;; Resume clocking task when emacs is restarted
     ;; (org-clock-persistence-insinuate)
     ;; Show lot of clocking history so it's easy to pick items
     (setq org-clock-history-length 23)

     ;; Set default column view headings: Task Total-Time Time-Stamp
     (setq org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA"
           org-agenda-skip-scheduled-if-done t
           org-agenda-skip-deadline-if-done t
           )
   #+END_SRC

** doct
For generating org-capture templates
#+BEGIN_SRC emacs-lisp
(use-package doct
  ;;recommended: defer until calling doct
  :commands (doct))
#+END_SRC
** org-capture
   #+BEGIN_SRC emacs-lisp
     (use-package org-capture
       :defer t
       :config
       (defun transform-square-brackets-to-round-ones(string-to-transform)
         "Transforms [ into ( and ] into ), other chars left unchanged."
         (concat
          (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform)))

       (setq org-capture-templates
             (doct
              '(
                ("Calendar" :keys "g" :file "~/Documents/org/gcal.org"
                 :prepend t
                 :template ("* %^{Description}"
                            ":PROPERTIES:"
                            ":Created: %U"
                            ":END:"
                            "  %^T"
                            "  %?"))
                ("Journal entry" :keys "j"
                 :function (lambda () (org-journal-find-location))
                 :clock-in t :clock-resume t
                 :template
                 ("* %(format-time-string org-journal-time-format)%^{Title}"
                  "  %i%?"))
                (:group "All Notes"
                        :file "~/Documents/org/Notes.org"
                        :template ("* %^{Description}"
                                   ":PROPERTIES:"
                                   ":Created: %U"
                                   ":END:"
                                   "%?")
                        :children
                        (("Notes" :keys "n" :olp ("Notes")
                          :datetree t)
                         ("Exercise" :keys "e" :olp ("Exercise"))
                         ("Research" :keys "n" :olp ("Research")
                          :clock-in t :clock-resume t :prepend t)
                         ("Computer" :keys "c"
                          :prepend t
                          :children
                          (("Emacs" :keys "e" :olp ("Computer" "Emacs"))
                           ("Linux" :keys "l" :olp ("Computer" "Linux"))
                           ("Python" :keys "p" :olp ("Computer" "Python"))
                           ("Windows" :keys "w" :olp ("Computer" "Windows"))))))
                ("Schedule" :keys "s" :file "~/Documents/org/Schedule.org"
                 :datetree t
                 :template ("* %^{Description}"
                            ":PROPERTIES:"
                            ":Created: %U"
                            ":END:"
                            "%?"))
                ("Tasks" :keys "t" :file "~/Documents/org/Tasks.org"
                 :template ("* %^{Description}"
                            ":PROPERTIES:"
                            ":Created: %U"
                            ":END:"
                            "%a")
                 :children
                 (("Computer"
                   :keys "c" :headline "Computer")
                  ("Food"
                   :keys "f" :headline "Food")
                  ("Research"
                   :keys "r" :headline "Research")
                  ("Idea"
                   :keys "i" :headline "Idea")
                  ("Not grouped"
                   :keys "n" :headline "Not grouped")
                  ("Books"
                   :keys "b" :headline "Book")))
                ("Web site" :keys "w" :file "~/Documents/org/Notes.org"
                 :headline "Inbox"
                 :template ("* %c :website:"
                            ":PROPERTIES:"
                            ":Created: %U"
                            ":END:"
                            "%?%:initial"))
                ("Protocol" :keys "p" :file "~/Documents/org/Notes.org"
                 :headline "Inbox"
                 :template ("* %^{Title}"
                            "Source: %u, [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]"
                            " #+BEGIN_QUOTE"
                            "%i"
                            "#+END_QUOTE"
                            "%?"))
                ("Protocol Link" :keys "L" :file "~/Documents/org/Notes.org"
                 :headline "Inbox"
                 :template ("* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]"
                            ":PROPERTIES:"
                            ":Created: %U"
                            ":END:")))))
       ;; (setq org-capture-templates
       ;;       '(
       ;;         ("c" "Computer")
       ;;         ("ce" "Emacs" entry
       ;;          (file+headline "~/Documents/org/Computer.org" "Emacs")
       ;;          "* %? \n  %u")
       ;;         ("cl" "Linux" entry
       ;;          (file+headline "~/Documents/org/Computer.org" "Linux")
       ;;          "* %? \n  %u")
       ;;         ("cp" "Python" entry
       ;;          (file+headline "~/Documents/org/Computer.org" "Python")
       ;;          "* %?\n  %u")
       ;;         ("cw" "Windows" entry
       ;;          (file+headline "~/Documents/org/Computer.org" "Windows")
       ;;          "* %? \n  %u")
       ;;         ("g" "Calendar" entry
       ;;          (file "~/Documents/org/gcal.org")
       ;;          "* %?\n  \n  %^T")
       ;;         ("j" "Journal entry" entry
       ;;          (function org-journal-find-location)
       ;;          "* %(format-time-string org-journal-time-format)%^{Title}\n  %i%?")
       ;;         ("n" "Notes" entry
       ;;          (file+olp+datetree "~/Documents/org/Notes.org")
       ;;          "" :time-prompt t)
       ;;         ("r" "Research" entry
       ;;          (file+olp+datetree "~/Documents/org/Research.org")
       ;;          "* %?\n  %u" :prepend t :clock-in t :clock-resume t)
       ;;         ("s" "Schedule" entry
       ;;          (file+olp+datetree "~/Documents/org/Schedule.org")
       ;;          "")
       ;;         ("t" "Tasks")
       ;;         ("tb" "Book" entry
       ;;          (file+headline "~/Documents/org/Tasks.org" "Book")
       ;;          "* TODO %^{Book title}\n%u\n%a\n" :clock-in t :clock-resume t)
       ;;         ("tc" "Computer" entry
       ;;          (file+headline "~/Documents/org/Tasks.org" "Computer")
       ;;          "* TODO %^{Topic}\n %u\n %a\n" :clock-in t :clock-resume t)
       ;;         ("tf" "Food" entry
       ;;          (file+headline "~/Documents/org/Tasks.org" "Food")
       ;;          "* TODO %^{Food} :food:\n %u\n %a\n" :clock-in t :clock-resume t)
       ;;         ("tr" "Research" entry
       ;;          (file+headline "~/Documents/org/Tasks.org" "Research")
       ;;          "* TODO %^{Title} :research:\n%u\n%a\n" :clock-in t :clock-resume t)
       ;;         ("ti" "Idea" entry
       ;;          (file+headline "~/Documents/org/Tasks.org" "Idea")
       ;;          "* TODO %^{Idea} :idea:\n%u\n%a\n" :clock-in t :clock-resume t)
       ;;         ("tn" "Not grouped" entry
       ;;          (file+headline "~/Documents/org/Tasks.org" "Not grouped")
       ;;          "* TODO %^{Subject}\n%u\n%a\n" :clock-in t :clock-resume t)
       ;;         ("w" "Web site"
       ;;          entry (file+headline "~/Documents/org/Notes.org" "Inbox")
       ;;          "* %c :website:\n%U %?%:initial")
       ;;         ("x" "Exercise" entry
       ;;          (file+olp+datetree "~/Documents/org/Exercise.org")
       ;;          "* %?\n  %u" :time-prompt t)
       ;;         ("p" "Protocol" entry (file+headline "~/Documents/org/Notes.org" "Inbox")
       ;;          "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
       ;;         ("L" "Protocol Link" entry (file+headline "~/Documents/org/Notes.org" "Inbox")
       ;;          "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n %u")))
       )

(use-package org-protocol-capture-html
  :after org-protocol
  :commands (org-protocol-capture-html--with-pandoc
             org-protocol-capture-html--capture-eww-readable)
  :init
  (add-to-list 'org-protocol-protocol-alist
               '("capture-html"
                 :protocol "capture-html"
                 :function org-protocol-capture-html--with-pandoc
                 :kill-client t))

  (add-to-list 'org-protocol-protocol-alist
               '("capture-eww-readable"
                 :protocol "capture-eww-readable"
                 :function org-protocol-capture-html--capture-eww-readable
                 :kill-client t)))
   #+END_SRC

** hydra for org
   #+BEGIN_SRC emacs-lisp
     (defhydra yang/hydra-org-mode (:color blue :hint nil)
     ;;   "
     ;;      ^Clock:^ ^In/out^     ^Edit^   ^Summary^    | ^Timers:^ ^Run^           ^Insert
     ;;      -^-^-----^-^----------^-^------^-^----------|--^-^------^-^-------------^------
     ;;      (_?_)    _i_n         _e_dit   _g_oto entry | (_z_)     _r_elative      ti_m_e
     ;;       ^ ^     _c_ontinue   _q_uit   _d_isplay    |  ^ ^      cou_n_tdown     i_t_em
     ;;       ^ ^     _o_ut        ^ ^      _r_eport     |  ^ ^      _p_ause toggle
     ;;       ^ ^     ^ ^          ^ ^      ^ ^          |  ^ ^      _s_top
     ;; "
       "
             _l_ store-link   _L_ insert-last-link   insert _i_d
     "
                ("l" org-store-link)
                ("L" org-insert-last-stored-link)
                ("i" org-id-store-link)
       )
     (yang/set-leader-key "o" #'yang/hydra-org-mode/body)
   #+END_SRC

** org-refile
   [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][ref]], [[https://github.com/abo-abo/swiper/issues/444][ref]]
   #+BEGIN_SRC emacs-lisp
     (setq org-refile-use-outline-path 'file
           org-outline-path-complete-in-steps nil
           ;; creating new parent
           org-refile-allow-creating-parent-nodes t)
   #+END_SRC

** COMMENT org-reveal
   #+begin_src emacs-lisp
     ;; (use-package ox-reveal)
   #+end_src

** org-ref
   #+BEGIN_SRC emacs-lisp
     (setq reftex-default-bibliography '("~/Documents/org/bibliography/references.bib"))

     ;; see org-ref for use of these variables
     (setq org-ref-bibliography-notes "~/Documents/org/bibliography/notes.org"
           org-ref-default-bibliography '("~/Documents/org/bibliography/references.bib")
           org-ref-pdf-directory "~/Documents/Library/bibtex-pdfs/")
     (setq bibtex-completion-bibliography "~/Documents/org/bibliography/references.bib"
           bibtex-completion-library-path "~/Documents/Library/bibtex-pdfs"
           bibtex-completion-notes-path "~/Documents/org/bibliography/helm-bibtex-notes")

     (use-package org-ref
       :commands (org-ref-insert-link
                  org-ref-get-bibtex-key-and-file
                  org-ref-bibtex-hydra/body
                  org-ref-possible-bibfiles)
       :bind (:map
              org-mode-map
              ("C-c ]" . org-ref-insert-link))
       :config
       (org-ref-ivy-cite-completion))
     (general-def
       :keymaps 'bibtex-mode-map
       "C-c h" #'org-ref-bibtex-hydra/body)

     (use-package org-ref-bibtex
       :after (org-ref)
       :commands (org-ref-bibtex-hydra/body org-ref-generate-cite-links)
       :init
       (setq org-ref-cite-onclick-function #'org-ref-bibtex-hydra/body)
       :config
       (defun yang/org-ref-open-bibtex-pdf ()
         "Open pdf for a bibtex entry, if it exists.
               assumes point is in
               the entry of interest in the bibfile.  but does not check that."
         (interactive)
         (save-excursion
           (bibtex-beginning-of-entry)
           (let* ((bibtex-expand-strings t)
                  (entry (bibtex-parse-entry t))
                  (key (reftex-get-bib-field "=key=" entry))
                  (pdf (funcall org-ref-get-pdf-filename-function key)))
             (if (file-exists-p pdf)
                 (call-process-shell-command (concat "xdg-open " pdf) nil 0 nil)
               (message "no pdf found for %s" key)))))

       (defun yang/org-ref-bibtex-update-hydra ()
         (defhydra+ org-ref-bibtex-hydra ()
           ("P" yang/org-ref-open-bibtex-pdf "Open pdf with xdg-open")))

       (yang/org-ref-bibtex-update-hydra))

     (use-package org-ref-ivy-cite
       :after (org-ref)
       :init
       (setq org-ref-cite-onclick-function
             (lambda (-)
               (org-ref-cite-hydra/body)))
       :commands (org-ref-cite-hydra/body org-ref-ivy-insert-cite-link)
       :config
       (org-ref-ivy-cite-completion)
       (defun yang/org-ref-open-pdf-at-point ()
         "Open the pdf for bibtex key under point with xdg-open if it exists."
         (interactive)
         (let* ((results (org-ref-get-bibtex-key-and-file))
                (key (car results))
                (pdf-file (funcall org-ref-get-pdf-filename-function key)))
           (if (file-exists-p pdf-file)
               (call-process-shell-command (concat "xdg-open " pdf-file) nil 0 nil)
             (message "no pdf found for %s" key))))

       (defhydra+ org-ref-cite-hydra ()
         ("P" yang/org-ref-open-pdf-at-point "Open pdf with xdg-open"))
       )

     (use-package parsebib
       :commands (parsebib-find-bibtex-dialect))
(use-package bibtex-completion
  :commands (bibtex-completion-get-entry))
   #+END_SRC

** org-noter
   #+begin_src emacs-lisp
     (use-package org-noter
       :config
       (setq org-noter-always-create-frame nil
             org-noter-insert-note-no-questions t
             org-noter-separate-notes-from-heading t
             org-noter-auto-save-last-location t)

       (defun org-noter-init-pdf-view ()
         ;; (pdf-view-fit-page-to-window)
         ;; (pdf-view-auto-slice-minor-mode)
         (run-at-time "0.5 sec" nil #'org-noter))

       ;; (add-hook 'pdf-view-mode-hook 'org-noter-init-pdf-view)
       )

   #+end_src

** doom keybindings
#+begin_src emacs-lisp
  (yang/with-doom
    ;; revert doom's weird behavior when in insert mode,
    ;; which prevents C-h to call help
    (use-package evil-org
      :defer t
      :config
      (general-def
        :keymaps 'evil-org-mode-map
        :states '(insert)
        "C-l" nil
        "C-h" nil
        "C-k" nil
        "C-j" nil))

    (general-def
      :keymaps 'org-mode-map
      :states '(normal motion)
      "," nil
      "<return>" 'org-return)
    (general-def
      :keymaps 'org-mode-map
      :prefix ","
      :states '(normal motion)
      "'" 'org-edit-special
      "c" 'org-capture

      ;; Clock
      ;; These keybindings should match those under the "aoC" prefix (below)
      "Cc" 'org-clock-cancel
      "Cd" 'org-clock-display
      "Ce" 'org-evaluate-time-range
      "Cg" 'org-clock-goto
      "Ci" 'org-clock-in
      "CI" 'org-clock-in-last
      ;; "Cj" 'spacemacs/org-clock-jump-to-current-clock
      "Co" 'org-clock-out
      "CR" 'org-clock-report
      "Cr" 'org-resolve-clocks

      "dd" 'org-deadline
      "ds" 'org-schedule
      "dt" 'org-time-stamp
      "dT" 'org-time-stamp-inactive
      "ee" 'org-export-dispatch
      "fi" 'org-feed-goto-inbox
      "fu" 'org-feed-update-all

      "a" 'org-agenda

      "p" 'org-priority

      "Tc" 'org-toggle-checkbox
      "Te" 'org-toggle-pretty-entities
      "Ti" 'org-toggle-inline-images
      "Tl" 'org-toggle-link-display
      "Tt" 'org-show-todo-tree
      "TT" 'org-todo
      ;; "TV" 'space-doc-mode
      ;; "Tx" 'org-toggle-latex-fragment ; this is obsolete
      "Tx" 'org-latex-preview

      ;; More cycling options (timestamps, headlines, items, properties)
      "L" 'org-shiftright
      "H" 'org-shiftleft
      "J" 'org-shiftdown
      "K" 'org-shiftup

      ;; Change between TODO sets
      "C-S-l" 'org-shiftcontrolright
      "C-S-h" 'org-shiftcontrolleft
      "C-S-j" 'org-shiftcontroldown
      "C-S-k" 'org-shiftcontrolup

      ;; Subtree editing
      "sa" 'org-toggle-archive-tag
      "sA" 'org-archive-subtree
      "sb" 'org-tree-to-indirect-buffer
      "sd" 'org-cut-subtree
      "sh" 'org-promote-subtree
      "sj" 'org-move-subtree-down
      "sk" 'org-move-subtree-up
      "sl" 'org-demote-subtree
      "sn" 'org-narrow-to-subtree
      "sN" 'widen
      "sr" 'org-refile
      "ss" 'org-sparse-tree
      "sS" 'org-sort

      ;; tables
      "ta" 'org-table-align
      "tb" 'org-table-blank-field
      "tc" 'org-table-convert
      "tdc" 'org-table-delete-column
      "tdr" 'org-table-kill-row
      "te" 'org-table-eval-formula
      "tE" 'org-table-export
      "th" 'org-table-previous-field
      "tH" 'org-table-move-column-left
      "tic" 'org-table-insert-column
      "tih" 'org-table-insert-hline
      "tiH" 'org-table-hline-and-move
      "tir" 'org-table-insert-row
      "tI" 'org-table-import
      "tj" 'org-table-next-row
      "tJ" 'org-table-move-row-down
      "tK" 'org-table-move-row-up
      "tl" 'org-table-next-field
      "tL" 'org-table-move-column-right
      "tn" 'org-table-create
      "tN" 'org-table-create-with-table.el
      "tr" 'org-table-recalculate
      "ts" 'org-table-sort-lines
      "ttf" 'org-table-toggle-formula-debugger
      "tto" 'org-table-toggle-coordinate-overlays
      "tw" 'org-table-wrap-region

      ;; Source blocks / org-babel
      "bp"     'org-babel-previous-src-block
      "bn"     'org-babel-next-src-block
      "be"     'org-babel-execute-maybe
      "bo"     'org-babel-open-src-block-result
      "bv"     'org-babel-expand-src-block
      "bu"     'org-babel-goto-src-block-head
      "bg"     'org-babel-goto-named-src-block
      "br"     'org-babel-goto-named-result
      "bb"     'org-babel-execute-buffer
      "bs"     'org-babel-execute-subtree
      "bd"     'org-babel-demarcate-block
      "bt"     'org-babel-tangle
      "bf"     'org-babel-tangle-file
      "bc"     'org-babel-check-src-block
      "bj"     'org-babel-insert-header-arg
      "bl"     'org-babel-load-in-session
      "bi"     'org-babel-lob-ingest
      "bI"     'org-babel-view-src-block-info
      "bz"     'org-babel-switch-to-session
      "bZ"     'org-babel-switch-to-session-with-code
      "ba"     'org-babel-sha1-hash
      "bx"     'org-babel-do-key-sequence-in-edit-buffer
      ;; "b."     'spacemacs/org-babel-transient-state/body
      ;; Multi-purpose keys
      "," 'org-ctrl-c-ctrl-c
      "*" 'org-ctrl-c-star
      "-" 'org-ctrl-c-minus
      "#" 'org-update-statistics-cookies
      "RET"   'org-ctrl-c-ret
      "M-RET" 'org-meta-return
      ;; attachments
      "A" 'org-attach
      ;; insertion
      "ib" 'org-insert-structure-template
      "id" 'org-insert-drawer
      "ie" 'org-set-effort
      "if" 'org-footnote-new
      "ih" 'org-insert-heading
      "iH" 'org-insert-heading-after-current
      "ii" 'org-insert-item
      ;; "iK" 'spacemacs/insert-keybinding-org
      "il" 'org-insert-link
      "in" 'org-add-note
      "ip" 'org-set-property
      "is" 'org-insert-subheading
      "it" 'org-set-tags-command
      ;; region manipulation
      ;; "xb" (spacemacs|org-emphasize spacemacs/org-bold ?*)
      ;; "xc" (spacemacs|org-emphasize spacemacs/org-code ?~)
      ;; "xi" (spacemacs|org-emphasize spacemacs/org-italic ?/)
      ;; "xo" 'org-open-at-point
      ;; "xr" (spacemacs|org-emphasize spacemacs/org-clear ? )
      ;; "xs" (spacemacs|org-emphasize spacemacs/org-strike-through ?+)
      ;; "xu" (spacemacs|org-emphasize spacemacs/org-underline ?_)
      ;; "xv" (spacemacs|org-emphasize spacemacs/org-verbatim ?=)
      ))
#+end_src

** math
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'LaTeX-math-mode)
#+END_SRC

** org-roam
#+BEGIN_SRC emacs-lisp
;; This is only a workaround
(setq org-roam-directory (concat org-directory "/roam")
      org-roam-db-location "/tmp/org-roam.db")
#+END_SRC
* LaTeX
  #+BEGIN_SRC emacs-lisp
;; LaTeX hook
(use-package latex
  :defer t
  ; :mode "\\.tex\\'"
  :commands (LaTeX-math-mode)
  :config
  (defun yang/LaTeX-setup ()
    (turn-on-reftex)
    (add-to-list 'TeX-command-list '
                 ("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
    (setq TeX-auto-save t)
    (LaTeX-math-mode)
    (imenu-add-menubar-index)
    ;; (setq LaTeX-command-style
    ;;       (quote (("\\`fontspec\\'" "xelatex ")
    ;;               ("" "%(PDF)%(latex) %S%(PDFout)"))))
    ;; (custom-set-variables
    ;;     '(preview-fast-dvips-command "pdftops -origpagesizes %s.pdf %m/preview.ps"))
    (setq TeX-save-query nil)
    (setq TeX-parse-self t)
    ;; Use pdf-tools to open PDF files
    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
          TeX-source-correlate-start-server t)

    ;; Update PDF buffers after successful LaTeX runs
    (add-hook 'TeX-after-compilation-finished-functions
              #'TeX-revert-document-buffer)
    ;; (setq TeX-output-view-style
    ;;       (cons '("^pdf$" "." "evince  %o ") TeX-output-view-style))
    ;; (set-default 'preview-default-document-pt 12)
    ;; (set-default 'preview-scale-function 1.2)
    ;; (setq preview-required-option-list
    ;; 	  (quote ("active" "tightpage" "auctex" "xetex" (preview-preserve-counters "counters"))))
    (setq preview-default-option-list
          (quote ("displaymath" "floats" "graphics" "textmath" "showlabels")))
    (TeX-engine-set "default")
    (LaTeX-add-environments
     "definition"
     "example"
     "tikzpicture"
     "corallary"
     "align*"
     "theorem"
     "proof"
     "lemma"
     ;; '("tikzpicture" LaTeX-env-tikz)
     )
    ;; enable TeX-fold-buffer
    (use-package tex-fold
      :commands (TeX-fold-buffer))
    (add-hook 'find-file-hook 'TeX-fold-buffer t t)
    (setq preview-auto-cache-preamble t)
    (setq fill-column 10000)
    (setq company-idle-delay 0.2)
    ;; (turn-off-auto-fill)
    (olivetti-mode 1)
    ;; (define-key LaTeX-mode-map (kbd "C-s") #'yang/swiper)

    (yang/with-spacemacs
      (spacemacs/set-leader-keys-for-major-mode 'latex-mode
                                                "zc" 'TeX-fold-comment))

    (yang/with-doom
      (hl-line-mode -1)
      (hl-fill-column-mode -1)
      (variable-pitch-mode 1))

    (defun yang/LaTeX-narrow-to-section ()
      (interactive)
      (save-excursion
        (LaTeX-mark-section)
        (narrow-to-region (point) (mark))
        (deactivate-mark)))
    )

  (add-hook 'LaTeX-mode-hook #'yang/LaTeX-setup)
  (yang/with-doom
    (setq +latex-viewers '(pdf-tools skim evince sumatrapdf zathura okular))))

(use-package rainbow-delimeters
  :defer t
  :init
  (setq rainbow-delimiters-max-face-count 7)
  :hook latex-mode)
  #+END_SRC

** COMMENT preview
   adapted from [[https://emacs.stackexchange.com/questions/406/see-latex-code-and-math-preview-at-the-same-time-with-preview-latex][keep old preview visible when editing]]
   #+begin_src emacs-lisp
     (with-eval-after-load 'preview
       (defun yang/preview-inactive-string-adv (func ov)
         "Show old preview when editing source code."
         (when (overlay-get ov 'preview-state)
           (let ((preview-icon (or (car-safe (overlay-get ov 'preview-image)) preview-icon)))
             (overlay-put ov 'preview-old-image preview-icon)
             (funcall func ov))))

       (advice-add #'preview-inactive-string :around #'yang/preview-inactive-string-adv)

       (defun yang/preview-disabled-string-adv (func ov)
         (when (overlay-get ov 'preview-state)
           (let ((preview-icon (or (overlay-get ov 'preview-old-image) preview-icon)))
             (funcall func ov))))

       (advice-add #'preview-disabled-string :around #'yang/preview-disable-string-adv))
   #+end_src

** bibtex
   #+BEGIN_SRC emacs-lisp
     (use-package reftex
       :commands (reftex-parse-all)
       :after (dash s)
       :init
       (add-hook 'bibtex-mode-hook
                 (lambda ()
                   (add-hook 'after-save-hook 'reftex-parse-all nil 'make-it-local)))
       :config
       (setq reftex-cite-punctuation '(", " ", and " " {\\it et al.}"))
       (defun yang/reftex-get-bib-names (func field entry)
         "Return a list with the full author or editor names in ENTRY.
     If FIELD is empty try \"editor\" field."
         (if (eq #'org-ref-open-bibtex-notes this-command)
             (let ((names (reftex-get-bib-field field entry)))
               (when (equal "" names)
                 (setq names (reftex-get-bib-field "editor" entry)))
               (when (and (s-starts-with? "{" names)
                          (s-ends-with? "}" names))
                 (setq names (s-with names
                               (s-chop-prefix "{")
                               (s-chop-suffix "}"))))
               (cl-loop for name in (s-split "[ \t]*\\band\\b[ \t]*" names) collect
                        (let ((name-list (s-split "[ \t]*,[ \t]*" name)))
                          (s-join " " (-concat (-take-last 1 name-list) (-drop-last 1 name-list))))))
           (funcall func field entry)))

       (advice-add #'reftex-get-bib-names :around #'yang/reftex-get-bib-names))

   #+END_SRC

* Python
  #+BEGIN_SRC emacs-lisp
(use-package company-jedi             ;;; company-mode completion back-end for Python JEDI
  :defer t
  :config
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t)
  (setq jedi:use-shortcuts t)
  (defun config/enable-company-jedi ()
    (add-to-list 'company-backends 'company-jedi))
  (add-hook 'python-mode-hook 'config/enable-company-jedi))

(use-package lsp-mode
  :hook (python-mode . lsp)
  :commands lsp)

(use-package python
  :commands yang/python-setup
  :init
  (add-hook 'python-mode-hook #'yang/python-setup)
  :config
  (setq-default python-indent 4)
  ;; bug fix for python-mode
  (setq python-shell-native-complete nil)
  (defun yang/python-setup ()
    (set (make-local-variable 'company-idle-delay) 0.2)))


;; optionally
(use-package lsp-ui
  :commands lsp-ui-mode)
(use-package company-lsp :commands company-lsp)
(use-package helm-lsp :commands helm-lsp-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)
;; optionally if you want to use debugger
;; (use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language
  #+END_SRC

* Git
  #+BEGIN_SRC emacs-lisp
(after! git-commit
  (global-git-commit-mode t))
(setq-default git-magit-status-fullscreen t)

(after! magit-diff
  (add-hook 'magit-diff-mode-hook
            (lambda ()
              (visual-line-mode 1)))
  (setq magit-diff-refine-hunk 'all))
(after! magit-status
  (add-hook 'magit-status-mode-hook
            (lambda ()
              (visual-line-mode 1))))
  #+END_SRC

** Close manually opened magit-diff when commit finishes
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :defer t
       :commands yang/close-diff-after-commit
       :init
       (add-hook 'with-editor-pre-finish-hook #'yang/close-diff-after-commit)
       (add-hook 'with-editor-pre-cancel-hook #'yang/close-diff-after-commit)
       :config
       (defun yang/close-diff-after-commit ()
         (message "in yang-close-diff-after-commit")
         (let ((magit-display-buffer-noselect t)
               (diff-buf (magit-mode-get-buffer 'magit-diff-mode)))
           (if (and diff-buf
                    (get-buffer-window diff-buf))
               (with-current-buffer diff-buf
                 (kill-this-buffer)))))
       )
   #+END_SRC

* web-mode
  #+BEGIN_SRC emacs-lisp
    (after! web-mode
      (setq
       web-mode-enable-auto-closing t
       web-mode-enable-auto-indentation t
       web-mode-enable-auto-opening t
       web-mode-enable-auto-pairing t
       web-mode-enable-auto-quoting t
       web-mode-enable-css-colorization t
       ;; remove emmet from company-mode backends in web-mode
       company-web-html-emmet-enable nil
       company-minimum-prefix-length 2
       )
      (defun try-emmet-expand-line (args)
        (interactive "P")
        (when emmet-mode
          (emmet-expand-line args)))
      ;; add emmet to hippie-expand backends
      (add-to-list 'hippie-expand-try-functions-list
                   'try-emmet-expand-line))

  #+END_SRC

* Search
** Enable DictCn
  #+BEGIN_SRC emacs-lisp
(use-package engine-mode
  :defer t
  :commands engine/search-dictcn
  :config
  (defengine dictcn
    "http://dict.cn/%s"
    :docstring "Search Dict.cn"))
  #+END_SRC

** Use ivy--regex-plus for ivy search
  #+BEGIN_SRC emacs-lisp
(after! ivy
  (setq ivy-re-builders-alist
        '((t . ivy--regex-plus))))

  #+END_SRC

* buffer-management
  #+BEGIN_SRC emacs-lisp
    (use-package ivy-rich
      :defer t
      :init (setq yang-ivy-rich-parse-remote-project nil)
      :config
      (ivy-rich-mode 1)
      (setq ivy-virtual-abbreviate 'full
            ivy-rich-switch-buffer-align-virtual-buffer t
            ivy-rich-path-style 'abbrev)

      (defun ivy-rich-switch-buffer-in-propject-p (candidate)
        (with-current-buffer
            (get-buffer candidate)
          (and (and (bound-and-true-p projectile-mode)
                    (projectile-project-p))
               (not (and (file-remote-p (or (buffer-file-name) default-directory))
                         (or (not ivy-rich-parse-remote-buffer)
                             (not yang-ivy-rich-parse-remote-project))))))))
  #+END_SRC

** COMMENT Jumb to buffer
   #+begin_src emacs-lisp
     (yang/set-leader-key "bj" #'frog-jump-buffer)
   #+end_src

* Email
** General
   #+begin_src emacs-lisp
     (setq mail-interactive t)

     ;; send mail using mail
     (setq send-mail-function 'sendmail-send-it)
     (setq message-send-mail-function 'message-send-mail-with-sendmail)


     (setq message-signature
           "Sheng Yang(杨圣), PhD student
     Computer Science Department
     University of Maryland, College Park
     E-mail: styang@fastmail.com
     E-mail(old): yangsheng6810@gmail.com")

     (add-hook 'message-mode-hook
               (lambda ()
                 (auto-fill-mode -1)))

   #+end_src

** Mu4e
   #+BEGIN_SRC emacs-lisp
     (use-package mu4e
       :defer t
       :commands htmlize-and-send
       :init
       :config
       (add-hook 'org-ctrl-c-ctrl-c-hook 'htmlize-and-send t)
       ;; fix C-h
       (evil-define-key 'evilified mu4e-view-mode-map (kbd "C-h") nil)
       (add-hook 'mu4e-headers-mode-hook
                 (lambda ()
                   (pangu-spacing-mode -1)))

       ;; Call EWW to display HTML messages
       (defun jcs-view-in-eww (msg)
         (eww-browse-url (concat "file://" (mu4e~write-body-to-html msg))))

       ;; Arrange to view messages in either the default browser or EWW
       ;; (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
       (add-to-list 'mu4e-view-actions '("Eww view" . jcs-view-in-eww) t)

       ;;rename files when moving
       ;;NEEDED FOR MBSYNC
       (setq mu4e-change-filenames-when-moving t)

       ;; Try to show images
       (setq mu4e-view-show-images t
             mu4e-show-images t
             mu4e-view-image-max-width 800
             mu4e-view-prefer-html t)
       ;; the next are relative to `mu4e-maildir'
       ;; instead of strings, they can be functions too, see
       ;; their docstring or the chapter 'Dynamic folders'
       (setq mu4e-sent-folder   "/gmail/[Gmail]/已发邮件"
             mu4e-drafts-folder "/gmail/[Gmail]/草稿"
             mu4e-trash-folder  "/gmail/[Gmail]/已删除邮件"
             mu4e-update-interval 300)

       (setq mu4e-headers-fields
           '( (:human-date          .  20)    ;; alternatively, use :human-date
              (:flags         .   6)
              (:from          .  22)
              (:subject       .  nil))) ;; alternatively, use :thread-subject

       (setq mu4e-get-mail-command "mbsync gmail")

       (setq mu4e-compose-signature
             "Sheng Yang(杨圣)
     PhD student
     Computer Science Department
     University of Maryland, College Park
     E-mail: yangsheng6810@gmail.com")
     ;;   (setq mu4e-compose-signature
     ;;         "<#part type=text/html>
     ;; <html>
     ;; <body>
     ;; <p><strong>Sheng Yang(杨圣)</strong</p>
     ;; <p>PhD student</p>
     ;; <p>Computer Science Department</p>
     ;; <p>University of Maryland, College Park</p>
     ;; <p>E-mail: <a href=\"mailto:yangsheng6810@gmail.com\">yangsheng6810@gmail.com</a></p>
     ;; </body>
     ;; </html>
     ;; <#/part>")

       ;; ;; make thread into one page
       ;; (use-package mu4e-conversation)



       ;; save multiple attachments without asking
       (setq mu4e-save-multiple-attachments-without-asking t)

       ;; use single window
       (setq mu4e-split-view 'single-window)

       (defun mu4e-view-toggle-addresses ()
         (interactive)
         (when (not (local-variable-p mu4e-view-show-addresses))
           (make-local-variable 'mu4e-view-show-addresses)
           (let ((temp mu4e-view-show-addresses))
             (setq mu4e-view-show-addresses temp)))
         (setq mu4e-view-show-addresses (null mu4e-view-show-addresses))
         (mu4e-view-refresh))

       ;; send email using org-mode to form html
       (defun htmlize-and-send ()
         "When in an org-mu4e-compose-org-mode message, htmlize and send it."
         (interactive)
         (when (member 'org~mu4e-mime-switch-headers-or-body post-command-hook)
           (org-mime-htmlize)
           (message-send-and-exit)))

       (setq mu4e-headers-include-related nil))

(use-package mu4e-alert
  :defer t
  :after mu4e
  :config
  ;; notification using mu4e-alert
  (mu4e-alert-set-default-style 'libnotify))
   #+END_SRC

** notmuch by doom
#+begin_src emacs-lisp
  ;; FIXME This module is a WIP!

  ;; (defvar +notmuch-sync-backend 'gmi
  ;;   "Which backend to use. Can be either gmi, mbsync, offlineimap or nil (manual).")

  ;; (defvar +notmuch-mail-folder "~/.mail/account.gmail"
  ;;   "Where your email folder is located (for use with gmailieer).")

  (yang/with-doom
    (after! notmuch
            (set-company-backend! 'notmuch-message-mode
                                  '(notmuch-company :with company-ispell company-yasnippet))

            (set-popup-rule! "^\\*notmuch-hello" :side 'left :size 30 :ttl 0)

            ;; (setq notmuch-fcc-dirs nil
            ;;       notmuch-show-logo nil
            ;;       notmuch-message-headers-visible nil
            ;;       message-kill-buffer-on-exit t
            ;;       message-send-mail-function 'message-send-mail-with-sendmail
            ;;       notmuch-search-oldest-first nil
            ;;       send-mail-function 'sendmail-send-it
            ;;       ;; sendmail-program "/usr/local/bin/msmtp"
            ;;       notmuch-search-result-format
            ;;       '(("date" . "%12s ")
            ;;         ("count" . "%-7s ")
            ;;         ("authors" . "%-30s ")
            ;;         ("subject" . "%-72s ")
            ;;         ("tags" . "(%s)"))
            ;;       notmuch-tag-formats
            ;;       '(("unread" (propertize tag 'face 'notmuch-tag-unread)))
            ;;       notmuch-hello-sections
            ;;       '(notmuch-hello-insert-saved-searches
            ;;         notmuch-hello-insert-alltags)
            ;;       notmuch-saved-searches
            ;;       '((:name "inbox"   :query "tag:inbox not tag:trash" :key "i")
            ;;         (:name "flagged" :query "tag:flagged"             :key "f")
            ;;         (:name "sent"    :query "tag:sent"                :key "s")
            ;;         (:name "drafts"  :query "tag:draft"               :key "d"))
            ;;       notmuch-archive-tags '("-inbox" "-unread"))

            ;; (setq-hook! 'notmuch-show-mode-hook line-spacing 0)

            (add-hook 'doom-real-buffer-functions #'notmuch-interesting-buffer)

            ;; (advice-add #'notmuch-start-notmuch-sentinel :around #'+notmuch-dont-confirm-on-kill-process-a)

            ;; modeline doesn't have much use in these modes
            (add-hook! '(notmuch-show-mode-hook
                         notmuch-tree-mode-hook
                         notmuch-search-mode-hook)
                       #'hide-mode-line-mode)))
#+end_src

** notmuch
   #+BEGIN_SRC emacs-lisp
     (after! org
       (condition-case err
           (require 'org-notmuch)
         (error (progn
                  (message "Require of org-notmuch failed as expected.")
                  (require 'ol-notmuch)))))
     (use-package notmuch
       :defer t
       :general
       (:keymaps 'notmuch-show-mode-map
                 "d" (lambda ()
                       "toggle deleted tag for message"
                       (interactive)
                       (if (member "trash" (notmuch-show-get-tags))
                           (notmuch-show-tag (list "-trash"))
                         (notmuch-show-tag (list "+trash")))))
       (:keymaps 'notmuch-show-mode-map
         :states '(normal)
         "R" #'notmuch-show-reply
         "r" #'notmuch-show-reply-sender
         "m" #'notmuch-mua-new-mail
         "v" nil)
       :config
       (setq notmuch-search-oldest-first nil)
       (setq notmuch-fcc-dirs '((".*" . "sent -inbox +sent -unread")))
       (setq notmuch-message-deleted-tags '("+trash" "-inbox" "-unread"))
       (setq notmuch-always-prompt-for-sender t
             notmuch-identities
             '("yangsheng6810@gmail.com"
               "styang@cs.umd.edu"
               "styang@fastmail.com")
             notmuch-saved-searches
             '((:name "inbox" :query "tag:inbox" :key "i")
               (:name "flagged" :query "tag:flagged" :key "f")
               (:name "sent" :query "tag:sent" :key "s")
               (:name "drafts" :query "tag:draft" :key "d")
               (:name "all mail" :query "*" :key "a")
               (:name "unread" :query "tag:inbox and tag:unread" :key "u")
               (:name "unread lists" :query "tag:lists and tag:unread" :key "l" :count-query "100")
               (:name "today" :query "date:today and tag:inbox and not tag:trash and not tag:as_record" :key "t")
               (:name "last 24h" :query "date:24h.. and tag:inbox and not tag:trash and not tag:as_record" :key "T")))

       (add-hook 'notmuch-mua-send-hook #'notmuch-mua-attachment-check)

       ;;   ;; Fix notmuch-describe-key for evil and spacemacs
       ;;   (defun notmuch-describe-key (actual-key binding prefix ua-keys tail)
       ;;     "Prepend cons cells describing prefix-arg ACTUAL-KEY and ACTUAL-KEY to TAIL

       ;; It does not prepend if ACTUAL-KEY is already listed in TAIL."
       ;;     (let ((key-string (concat prefix (key-description actual-key))))
       ;;       ;; We don't include documentation if the key-binding is
       ;;       ;; over-ridden. Note, over-riding a binding automatically hides the
       ;;       ;; prefixed version too.
       ;;       (unless (assoc key-string tail)
       ;;         (when (and ua-keys (symbolp binding)
       ;;                    (get binding 'notmuch-prefix-doc))
       ;;           ;; Documentation for prefixed command
       ;;           (let ((ua-desc (key-description ua-keys)))
       ;;             (push (cons (concat ua-desc " " prefix (format-kbd-macro actual-key))
       ;;                         (get binding 'notmuch-prefix-doc))
       ;;                   tail)))
       ;;         ;; Documentation for command
       ;;         (push (cons key-string
       ;;                     (or (and (symbolp binding) (get binding 'notmuch-doc))
       ;;                         (and (functionp binding) (notmuch-documentation-first-line binding))))
       ;;               tail)))
       ;;     tail)

       (defun notmuch-show-exports-all-attachments (mm-handle directory)
         (let (attachments)
           (notmuch-foreach-mime-part
            (lambda (p)
              (let ((disposition (mm-handle-disposition p))
                    filename
                    cid
                    file-location)
                ;; (message "handle is: %S" p)
                ;; (message "disposition is: %S" disposition)
                ;; (message "mm-handle-id is: %S" (mm-handle-id p))
                (and (listp disposition)
                     (string-equal "text/html" (mm-handle-media-type p))
                     (progn
                       (message "handle inside is: %S" p)
                       t)
                     (mm-insert-part p)
                     (set-buffer-file-coding-system 'raw-text))
                (and (listp disposition)
                     ;; (message "p is: %S" p)
                     (or (equal (car disposition) "attachment")
                         (and (equal (car disposition) "inline")
                              (assq 'filename disposition))
                         ;; (mm-handle-id p)
                         )
                     (progn
                       (setq filename (mm-handle-filename p))
                       (if (null filename)
                           (message "filename is null, handle is %S" p))
                       (setq cid (mm-handle-id p))
                       (setq cid (s-chop-suffix ">" (s-chop-prefix "<" cid)))
                       ;; (message "adding: (%S, %S)" cid filename)
                       (add-to-list 'attachments (cons cid filename))
                       ;; (message "added: %S" disposition)
                       ;; (message "filename: %S" (cdadr disposition))
                       (setq file-location (concat directory
                                                   filename))
                       (mm-save-part-to-file p file-location)
                       (message "Saved file %s" file-location)
                       (lexical-let ((file-name file-location))
                         (run-at-time 2 nil
                                      (lambda ()
                                        (ignore-errors (delete-file file-name)))))))))
            mm-handle)
           attachments))

       (defun notmuch-make-temp-file (ext)
         "Create a temporary file with extension EXT. The file will
               self-destruct in a few seconds, enough to open it in another
               program."
         (let ((tmpfile (make-temp-file
                         "notmuch-" nil (concat "." ext))))
           (lexical-let ((filename tmpfile))
             (run-at-time "30 sec" nil
                          (lambda () (ignore-errors (delete-file filename)))))
           tmpfile))

       (defun notmuch-show-reopen-in-browser ()
         "Write the text/html to a temporary file and open it."
         (interactive)
         (with-current-notmuch-show-message
          (let ((mm-handle (mm-dissect-buffer))
                (tmpfile (notmuch-make-temp-file "html"))
                html
                txt
                ;; (html (mu4e-message-field msg :body-html))
                ;; (txt (mu4e-message-field msg :body-txt))
                attachments)
            (with-temp-buffer
              (insert "<head><meta charset=\"UTF-8\"></head>\n")
              (setq attachments
                    (notmuch-show-exports-all-attachments
                     mm-handle temporary-file-directory))
              (message "temp-directory is: %s" temporary-file-directory)
              (write-file tmpfile nil)
              ;; (message "attachments: %S" attachments)
              ;; rewrite attachment urls
              (mapc (lambda (attachment)
                      (goto-char (point-min))
                      (while (re-search-forward (format "src=\"cid:%s\""
                                                        (car attachment)) nil t)
                        (replace-match (format "src=\"%s%s\"" temporary-file-directory
                                               (cdr attachment)))))
                    attachments)
              (save-buffer)
              (browse-url tmpfile)))))

       (setq-default notmuch-refresh-timer nil)

       (defun notmuch-refresh-func ()
         (when (null notmuch-refresh-timer)
           (setq notmuch-refresh-timer
                 (run-at-time
                  10 nil
                  (lambda ()
                    (message "mail-sync.py called")
                    (setq notmuch-refresh-timer nil)
                    (start-process "mail-sync" "*mail-sync*" "mail-sync.py" "--do-gmi"))))))

       ;; sync gmi after tagging
       (add-hook 'notmuch-after-tag-hook #'notmuch-refresh-func))

     (after! org-mime
       ;; fix org-mime-htmlize with latex
       (setq org-mime-export-options '(:with-latex dvipng)))
   #+END_SRC

** Sending
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist
                  '("\\.eml\\'" . (lambda ()
                                    ;; will add something special
                                    (markdown-mode))))
     (use-package markdown-mode
       :mode "\\.eml\\'"
       :defer t
       :general
       (:keymaps
        'markdown-mode-map
        :states '(normal insert motion visual)
        "M-h" nil
        "M-j" nil
        "M-k" nil
        "M-l" nil
        "M-H" nil
        "M-J" nil
        "M-K" nil
        "M-L" nil))
   #+END_SRC

* Ranger & Dired
  #+BEGIN_SRC emacs-lisp
    (use-package ranger
      :defer t
      :bind (:map ranger-mode-map
                  ("C-h" . nil)) ;; C-h was set to toggle dotfiles
      :commands dired-do-rsync
      :config
      (progn
        (setq ranger-show-dotfiles nil ;; default not show dotfiles at startup, toggled by zh
              ranger-cleanup-on-disable nil ;; kill the buffers when we finish
              )))

    (use-package dired
      :defer t
      :commands yang/dired-mode-setup
      :general
      (:keymaps
       'dired-mode-map
       ;; use RET to open dir in same buffer
       "RET" #'dired-find-alternate-file ; was dired-find-file
       "^" (lambda ()
             (interactive) (find-alternate-file "..")) ; was dired-up-directory
       )
      :config
      (defun yang/dired-mode-setup ()
        "to be run as hook for `dired-mode'."
        (dired-hide-details-mode 1)
        (dired-omit-mode 1)
        )
      (add-hook 'dired-mode-hook 'yang/dired-mode-setup)


      (setq dired-recursive-copies
            'always
            counsel-find-file-ignore-regexp
            (concat (regexp-opt completion-ignored-extensions) "$"))
      (add-to-list 'completion-ignored-extensions ".synctex.gz")

      ;; from https://oremacs.com/2016/02/24/dired-rsync/
      (defun dired-do-rsync (dest)
        (interactive
         (list
          (expand-file-name
           (read-file-name
            "Rsync to:"
            (dired-dwim-target-directory)))))
        ;; store all selected files into "files" list
        (let ((files (dired-get-marked-files
                      nil current-prefix-arg))
              ;; the rsync command
              (tmtxt/rsync-command
               "rsync -arv --progress "))
          ;; add all selected file names as arguments
          ;; to the rsync command
          (dolist (file files)
            (setq tmtxt/rsync-command
                  (concat tmtxt/rsync-command
                          (shell-quote-argument file)
                          " ")))
          ;; append the destination
          (setq tmtxt/rsync-command
                (concat tmtxt/rsync-command
                        (shell-quote-argument dest)))
          ;; run the async shell command
          (async-shell-command tmtxt/rsync-command "*rsync*")
          ;; finally, switch to that window
          (other-window 1))))

    (use-package dired-x
      :defer t
      :after dired
      :config
      (progn
        (add-to-list 'dired-omit-extensions ".~undo-tree~")
        (setq-default dired-omit-mode t)))
  #+END_SRC

* Shell
** Eshell
   #+BEGIN_SRC emacs-lisp
(after! eshell
  (setq eshell-cmpl-cycle-completions nil)
  ;; Nicer completion for eshell
  ;; From https://emacs.stackexchange.com/a/27871
  ;; Also we have to put it into shell, because eshell resets eshell-mode-map
  ;; when initialized
  (add-hook 'eshell-mode-hook
            (lambda ()
              ;; some alias
              (eshell/alias "ee" "find-file $1")
              (eshell/alias "ff" "find-file $1")
              (eshell/alias "d" "dired $1")
              ;; git status
              (defun eshell/gst (&rest args)
                (magit-status (pop args) nil)
                (eshell/echo)) ;; The echo command suppresses output
              ;; define clear
              (defun eshell/clear ()
                "Clear the eshell buffer."
                (let ((inhibit-read-only t))
                  (erase-buffer)
                  (eshell-send-input)))
              (define-key eshell-mode-map (kbd "<tab>")
                (lambda () (interactive) (pcomplete-std-complete))))))
   #+END_SRC

** multi-term
   #+BEGIN_SRC emacs-lisp
(use-package eterm-256color
  :defer t
  :init
  (add-hook 'term-mode-hook #'eterm-256color-mode)
  (setq term-buffer-maximum-size 10000)
  :general
  (:keymaps
   'term-raw-map
   :states '(normal insert)
   "<mouse-2>" #'term-mouse-paste
   "C-a" #'term-send-home
   "C-e" #'term-send-end))
   #+END_SRC

** vterm
#+begin_src emacs-lisp
  (use-package vterm
    :defer t
    :init
    (setq vterm-term-environment-variable "eterm-color"
          vterm-shell "/usr/bin/zsh")
    )
#+end_src

** toggle shell
#+BEGIN_SRC emacs-lisp
(yang/with-doom
  (general-def
    :keymaps 'doom-leader-map
    "'" (if (eq system-type 'windows-nt)
            #'+eshell/toggle
          #'+vterm/toggle)))
#+END_SRC

* pdf-tools
  #+BEGIN_SRC emacs-lisp
    (defun yang/xdg-reopen ()
      (interactive)
      (if (buffer-file-name)
          (call-process-shell-command (concat "xdg-open " (prin1-to-string (buffer-file-name))) nil 0 nil)
        (message "No file available")))
    ;; copied from http://pragmaticemacs.com/emacs/even-more-pdf-tools-tweaks/
    (use-package pdf-tools
      :defer t
      ;; :ensure t
      :bind (:map pdf-view-mode-map
                  ("C-s" . isearch-forward))
      :config
      ;; open LaTeX pdf file in split window
      (setq pdf-sync-backward-display-action t)
      (setq pdf-sync-forward-display-action t)

      (setq-default pdf-view-display-size 'fit-page)
      ;; automatically annotate highlights
      (setq pdf-annot-activate-created-annotations t)
      ;; more fine-grained zooming
      (setq pdf-view-resize-factor 1.1)
      ;; set default annotation color
      (setq pdf-annot-default-text-annotation-properties
         '((icon . "Note")
           (color . "#ffff00")
           (label . "Sheng Yang")
           (popup-is-open)))
      (general-def
        :keymaps 'pdf-view-mode
        :states 'normal
        :prefix "SPC"
        "t b" 'pdf-history-backward
        "t f" 'pdf-history-forward)
      (add-hook 'pdf-view-mode-hook #'pdf-links-minor-mode)
      (add-hook 'pdf-view-mode-hook #'pdf-sync-minor-mode)
      (add-hook 'pdf-view-mode-hook #'pdf-annot-minor-mode)
      (add-hook 'pdf-view-mode-hook #'pdf-misc-context-menu-minor-mode)
      (yang/with-doom
        (general-def
          :keymaps 'pdf-view-mode-map
          :states '(override normal motion visual)
          :prefix ","
          ;; Slicing image
          "sm" #'pdf-view-set-slice-using-mouse
          "sb" #'pdf-view-set-slice-from-bounding-box
          "sr" #'pdf-view-reset-slice
          ;; Annotations
          "aD" 	#'pdf-annot-delete
          "at" 	#'pdf-annot-attachment-dired
          "ah" 	#'pdf-annot-add-highlight-markup-annotation
          "al" 	#'pdf-annot-list-annotations
          "am" 	#'pdf-annot-add-markup-annotation
          "ao" 	#'pdf-annot-add-strikeout-markup-annotation
          "as" 	#'pdf-annot-add-squiggly-markup-annotation
          "at" 	#'pdf-annot-add-text-annotation
          "au" 	#'pdf-annot-add-underline-markup-annotation
          ;; Fit image to window
          "fw" #'pdf-view-fit-width-to-window
          "fh" #'pdf-view-fit-height-to-window
          "fp" #'pdf-view-fit-page-to-window
          ;; Other
          "ss" #'pdf-occur
          "p" #'pdf-misc-print-document
          "O" #'pdf-outline
          "n" #'pdf-view-midnight-minor-mode))
      )
  #+END_SRC

* doc-view
  #+BEGIN_SRC emacs-lisp
    ;; doc-view
    (use-package doc-view
      :defer t
      :config (setq doc-view-resolution 144)
      :bind (:map doc-view-mode-map
              ("h" . image-backward-hscroll)
              ("l" . image-forward-hscroll)
              ("J" . doc-view-next-page)
              ("K" . 'doc-view-previous-page)
              )
      :config
      (add-hook 'doc-view-mode-hook 'auto-revert-mode))
  #+END_SRC

* HiDPI
  #+BEGIN_SRC emacs-lisp
    (cond ((string-equal system-name "carbon") ; thinkpad X1 carbon
           (progn
             (after! org
               (plist-put org-format-latex-options :scale 1.5))
             (setq
              preview-scale-function 1.5)
             ;; for GUI called by emacs
             (setenv "GDK_SCALE" "1")
             (setenv "GDK_DPI_SCALE" "1")
             )))
  #+END_SRC

* Lunar Calendar
  #+BEGIN_SRC emacs-lisp
    ;; enable chinese lunar anniversary
    (use-package cal-china
      :defer t
      :commands my--diary-chinese-anniversary
      :config
      (defun my--diary-chinese-anniversary (lunar-month lunar-day &optional year mark)
        (if year
            (let* ((d-date (diary-make-date lunar-month lunar-day year))
                   (a-date (calendar-absolute-from-gregorian d-date))
                   (c-date (calendar-chinese-from-absolute a-date))
                   (cycle (car c-date))
                   (yy (cadr c-date))
                   (y (+ (* 100 cycle) yy)))
              (diary-chinese-anniversary lunar-month lunar-day y mark))
          (diary-chinese-anniversary lunar-month lunar-day year mark))))
  #+END_SRC

* Chinese
** pangu-spacing
   #+begin_src emacs-lisp
     ;; (when (string= system-name "carbon")
     ;;   (load "~/git/pangu-spacing/pangu-spacing.el"))
     (use-package pangu-spacing
       :defer t
       :config
       (global-pangu-spacing-mode -1)
       (defun yang/pangu-spacing-mode-on ()
         (pangu-spacing-mode 1))
       (defun yang/pangu-spacing-mode-off ()
         (pangu-spacing-mode -1))
       ;; only open for org-mode
       (add-hook 'org-mode-hook
                 #'yang/pangu-spacing-mode-on))
   #+end_src

** COMMENT alignment
   #+BEGIN_SRC emacs-lisp
     ;; set up mono font for chinese
     (use-package cnfonts
       :defer t
       :init
       (setq
        cnfonts--current-profile "Monaco"
        cnfonts-directory (concat yang/dotemacs-dir "chinese-fonts-setup/")
        cnfonts-use-face-font-rescale nil)
       (customize-set-variable 'cnfonts-profiles
                               '("Monaco" "Source Code Pro" "Fira Code"))
       :config
       (setq
        cnfonts--fontnames-fallback
        '(("Monaco" "Consolas" "DejaVu Sans Mono" "Source Code Pro" "Droid Sans Mono"
           "PragmataPro" "Courier" "Courier New" "Ubuntu Mono" "Liberation Mono"
           "MonacoB" "MonacoB2" "Droid Sans Mono Pro" "Lucida Console" "Hack"
           "Bitstream Vera Sans Mono" "Fira Mono" "Free Mono" "Anonymous Pro" "Ubuntu
           Mono" "Fantasque Sans Mono" "Monoid" "Fantasque" "Fira Code" "Noto Sans
           Mono CJK" "FantasqueSansMono" "AnonymousPro" "Noto Mono")
          ("WenQuanYi Micro Hei Mono" "WenQuanYi Zen Hei Mono"
           "文泉驿等宽微米黑" "文泉驿等宽正黑"
           "Source Han Sans CN" "Source Han Serif CN" "Source Han Sans" "Source Han Serif"
           "Noto Sans MOno CJK SC"
           "微软雅黑" "Microsoft Yahei" "Ubuntu Mono"
           "黑体" "SimHei" "宋体" "SimSun" "新宋体" "NSimSun"
           "Hiragino Sans GB")
          ("HanaMinB" "SimSun-ExtB" "MingLiU-ExtB" "PMingLiU-ExtB" "MingLiU_HKSCS-ExtB"))))
   #+END_SRC

*** Fix char width
   #+BEGIN_SRC emacs-lisp
(after! cnfonts
  ;; set char width for certain characters
  (defun blaenk/set-char-widths (alist)
    (while (char-table-parent char-width-table)
      (setq char-width-table (char-table-parent char-width-table)))
    (dolist (pair alist)
      (let ((width (car pair))
            (chars (cdr pair))
            (table (make-char-table nil)))
        (dolist (char chars)
          (set-char-table-range table char width))
        (optimize-char-table table)
        (set-char-table-parent table char-width-table)
        (setq char-width-table table))))

  ;; fix char width
  (blaenk/set-char-widths
   `((1 . (,(string-to-char "“")
           ,(string-to-char "”")
           ,(string-to-char "…")
           ;; character used in mu4e
           ,(string-to-char "⚓")
           ,(string-to-char "⎕")
           ))))

  (blaenk/set-char-widths
   `((1 . (,(string-to-char "“")
           ,(string-to-char "”")
           ,(string-to-char "…")
           ;; character used in mu4e
           ,(string-to-char "⚓")
           ,(string-to-char "⎕")
           )))))
   #+END_SRC

*** COMMENT Only reload when necessary
   #+BEGIN_SRC emacs-lisp
(use-package cnfonts
  :commands yang-cnfonts-set-font-first-time
  :init
  (setq yang-cnfonts-has-started nil)
  (add-hook 'before-make-frame-hook
            (lambda ()
              ;; (message "in before-make-frame-hook")
              (setq yang-cnfonts-has-started nil)))
  (advice-add 'cnfonts-set-font-first-time
              :around #'yang-cnfonts-set-font-first-time)
  :config
  (defun yang-cnfonts-set-font-first-time (func &rest _args)
    ;; (message "in yang-cnfonts-set-font-first-time")
    (when (or (not (boundp 'yang-cnfonts-has-started))
              (null yang-cnfonts-has-started))
      ;; (message "call cnfonts-set-font-first-time")
      (setq yang-cnfonts-has-started t)
      (apply func _args)
      (when (display-graphic-p)
        ;; (fontset-name-p "fontset-default")
        ;; (set-face-font 'fixed-pitch "fontset-default")
        (set-face-attribute 'fixed-pitch nil :font "fontset-default" :family "Monaco"))
      )))
   #+END_SRC

*** Enable cnfonts
   #+BEGIN_SRC emacs-lisp
(cnfonts-enable)
  (yang/with-spacemacs
    (cnfonts-set-spacemacs-fallback-fonts))
  (defun yang-server-create-window-system-frame-advice (&rest _)
    (setq yang-cnfonts-has-started nil)
    (cnfonts-set-font-first-time))
  (advice-add 'server-create-window-system-frame
              :after #'yang-server-create-window-system-frame-advice)
   #+END_SRC

*** Fix client problems
   #+BEGIN_SRC emacs-lisp
(after! (cnfonts cl)
  (defun yang-check-last-client-frame (frame)
    (when (eq 1 (cl-count-if
                 (lambda (f)
                   (eq
                    (frame-parameter f 'display)
                    (frame-parameter frame 'display)))
                 (visible-frame-list)))
      (setq yang-cnfonts-has-started nil)))

  (add-to-list 'delete-frame-functions #'yang-check-last-client-frame))
   #+END_SRC

** ace-pinyin
   #+BEGIN_SRC emacs-lisp
     (use-package ace-pinyin
       :defer t
       :init
       (yang/set-leader-key "jj" #'ace-pinyin-jump-char-2)
       :config
       (setq ace-pinyin--jump-word-timeout 0.3)
       ;; (yang/set-leader-key "jj" (lambda () (interactive) (ace-pinyin-jump-word t)))
       )
   #+END_SRC

** fcitx.el
   #+begin_src emacs-lisp
     (use-package fcitx
       :defer t
       :init
       (setq fcitx-use-dbus t)
       (setenv "LC_CTYPE" "zh_CN.UTF-8")
       (setenv "LANG" "zh_CN.UTF-8")
       (setenv "XIM_PROGRAM" "fcitx")
       (setenv "XIM" "fcitx")
       (setenv "XMODIFIERS" "@im=fcitx")
       (setenv "QT_IM_MODULE" "fcitx")
       (setenv "GTK_IM_MODULE" "fcitx"))

   #+end_src

* Browser
** COMMENT Using emacs to edit text area
   #+BEGIN_SRC emacs-lisp
     ;; check if the port for atomic-chrome is used or not
     ;; copied from https://github.com/dakrone/atomic-chrome/commit/79a5c17eef37b1e41590fc366cd16f2c4f3d46e4
     ;; append yang to avoid messing up with naming space
     (when (string= system-name "carbon")
       (defun yang-atomic-chrome-server-running-p ()
         "Returns `t' if the atomic-chrome server is currently running,
     `nil' otherwise."
         (let ((retval nil))
           (condition-case ex
               (progn
                 (delete-process
                  (make-network-process
                   :name "atomic-client-test" :host "localhost"
                   :noquery t :service "64292"))
                 (setq retval t))
             ('error nil))
           retval))
       ;; turn on atomic-chrome
       (unless (yang-atomic-chrome-server-running-p)
         (atomic-chrome-start-server)))
   #+END_SRC

** Default use eww for browsing
   #+BEGIN_SRC emacs-lisp
(after! browse-url
  (setq browse-url-browser-function
        ;; use eww only when from elfeed-mode
        (lambda (URL &rest args)
          (if (string= major-mode "elfeed-search-mode")
              (eww-browse-url URL args)
            (browse-url-default-browser URL args)))))

(use-package eww
  :commands (browse-url-default-browser
             yang/eww-reopen-url-gui)
  :general
  (:keymaps
   'eww-mode-map
   "B" #'yang/eww-reopen-url-gui)
  :config
  ;; open with GUI browser
  (defun yang/eww-reopen-url-gui ()
    "Open current url in GUI browser"
    (interactive)
    (let ((browse-url-generic-program "/usr/bin/xdg-open"))
      (browse-url-generic (eww-copy-page-url)))))
   #+END_SRC

* Bug-fixes
** Spacemacs modeline
  #+BEGIN_SRC emacs-lisp
    (yang/with-spacemacs
      ;; modeline optimization/workarounds
      (when (fboundp 'spacemacs/toggle-mode-line-responsive-off)
        (spacemacs/toggle-mode-line-responsive-off))

      ;; ipython cannot find gurobi license
      (setenv "GRB_LICENSE_FILE" (concat (getenv "HOME") "/.config/gurobi.lic"))

      (defun spacemacs//layout-wait-for-modeline (&rest r)
        "AAAssure the mode-line is loaded before restoring the layouts."
        (advice-remove 'persp-load-state-from-file 'spacemacs//layout-wait-for-modeline)
        (when (and (configuration-layer/package-used-p 'spaceline)
                   (memq (spacemacs/get-mode-line-theme-name) '(spacemacs all-the-icons custom)))
          (require 'spaceline-config)))

      (defun my-reload-modeline (&rest _args)
        (message "in my-reload-modeline")
        (spacemacs-modeline/init-spaceline)
        (advice-remove 'server-create-window-system-frame #'my-reload-modeline))

      ;; (with-eval-after-load 'persp-mode
      ;;   (require 'spaceline)
      ;;   (advice-remove 'persp-load-state-from-file 'spacemacs//layout-wait-for-modeline))

      (advice-add 'server-create-window-system-frame :after #'my-reload-modeline))
  #+END_SRC

** ad-Advice-popwin:create-popup-window: Symbol's function definition is void: purpose-window-purpose-dedicated-p
   #+BEGIN_SRC emacs-lisp
     ;; (yang/with-spacemacs
     ;;   (require 'window-purpose-core))
   #+END_SRC

** git-gutter+
   #+BEGIN_SRC emacs-lisp
     (after! git-gutter+
       (defun git-gutter+-remote-default-directory (dir file)
         (let* ((vec (tramp-dissect-file-name file))
                (method (tramp-file-name-method vec))
                (user (tramp-file-name-user vec))
                (domain (tramp-file-name-domain vec))
                (host (tramp-file-name-host vec))
                (port (tramp-file-name-port vec))
                )
           (tramp-make-tramp-file-name method user domain host port dir)))

       (defun git-gutter+-remote-file-path (dir file)
         (let ((file (tramp-file-name-localname (tramp-dissect-file-name file))))
           (replace-regexp-in-string (concat "\\`" dir) "" file))))

     ;; the function that has problem
     ;; maybe better to change this function
     ;; (defun git-gutter+-refresh ()
     ;;   (git-gutter+-clear)
     ;;   (let ((file (buffer-file-name)))
     ;;     (when (and file (file-exists-p file))
     ;;       (if (file-remote-p file)
     ;;           (let* ((repo-root (git-gutter+-root-directory file))
     ;;                  (default-directory (git-gutter+-remote-default-directory repo-root file)))
     ;;             (git-gutter+-process-diff (git-gutter+-remote-file-path repo-root file)))
     ;;         (git-gutter+-process-diff (git-gutter+-local-file-path file))))))
   #+END_SRC

* Monitor processes
  =proced= is a major mode like htop. To sort, first press =s=, then =c/m= for cpu/memory
  #+BEGIN_SRC emacs-lisp
(after! proced
  (add-hook 'proced-mode-hook
            (lambda ()
              (proced-toggle-auto-update +1))))

  #+END_SRC

* elfeed
  #+BEGIN_SRC emacs-lisp
(use-package elfeed-search
  :defer t
  :commands yang/elfeed-show-visit-gui
  :general
  (:keymaps
   'elfeed-search-mode-map
   "m" #'elfeed-toggle-star)
  :config
  ;; use =B= to call gui browser
  (defun yang/elfeed-show-visit-gui ()
    "Wrapper for elfeed-show-visit to use gui browser instead of eww"
    (interactive)
    (let ((browse-url-generic-program "/usr/bin/xdg-open"))
      (elfeed-show-visit t)))
  (defun yang/elfeed-search-browse-url-gui ()
    "Visit the current entry in your browser using `browse-url'.
    If there is a prefix argument, visit the current entry in the
    browser defined by `browse-url-generic-program'."
    (interactive)
    (let ((browse-url-generic-program "/usr/bin/xdg-open"))
      (elfeed-search-browse-url t)))
  (defalias 'elfeed-toggle-star
    (elfeed-expose #'elfeed-search-toggle-all 'star)))

(after! elfeed
  (general-def
    :keymaps 'elfeed-show-mode-map
    "B" #'yang/elfeed-show-visit-gui
    :keymaps 'elfeed-search-mode-map
    "B" #'yang/elfeed-search-browse-url-gui))
  #+END_SRC

* Tramp
  #+BEGIN_SRC emacs-lisp
(use-package tramp
  :defer t
  :config
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
  (setq tramp-use-ssh-controlmaster-options
        "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=yes"
        tramp-default-method "scp"
        remote-file-name-inhibit-cache 120))
  #+END_SRC

** Temp fix
   Already fixed upstream, but not in Arch official repo
   #+BEGIN_SRC emacs-lisp
(after! term
  (when (and (version<= "26.0" emacs-version)
           (version< emacs-version "27.0"))
      (defun term-handle-ansi-terminal-messages (message)
        ;; Handle stored partial message
        (when (bound-and-true-p term-partial-ansi-terminal-message)
          (setq message (concat term-partial-ansi-terminal-message message))
          (setq term-partial-ansi-terminal-message nil))

        ;; Is there a command here?
        (while (string-match "\eAnSiT.+\n" message)
          ;; Extract the command code and the argument.
          (let* ((start (match-beginning 0))
                 (command-code (aref message (+ start 6)))
                 (argument
                  (save-match-data
                    (substring message
                               (+ start 8)
                               (string-match "\r?\n" message
                                             (+ start 8)))))
                 ignore)
            ;; Delete this command from MESSAGE.
            (setq message (replace-match "" t t message))

            ;; If we recognize the type of command, set the appropriate variable.
            (cond ((= command-code ?c)
                   (setq term-ansi-at-dir argument))
                  ((= command-code ?h)
                   (setq term-ansi-at-host argument))
                  ((= command-code ?u)
                   (setq term-ansi-at-user argument))
                  ;; Otherwise ignore this one.
                  (t
                   (setq ignore t)))

            ;; Update default-directory based on the changes this command made.
            (if ignore
                nil
              (setq default-directory
                    (file-name-as-directory
                     (if (and (string= term-ansi-at-host (system-name))
                              (string= term-ansi-at-user (user-real-login-name)))
                         (expand-file-name term-ansi-at-dir)
                       (if (string= term-ansi-at-user (user-real-login-name))
                           (concat "/-:" term-ansi-at-host ":" term-ansi-at-dir)
                         (concat "/-:" term-ansi-at-user "@" term-ansi-at-host ":"
                                 term-ansi-at-dir)))))

              ;; I'm not sure this is necessary,
              ;; but it's best to be on the safe side.
              (if (string= term-ansi-at-host (system-name))
                  (progn
                    (setq ange-ftp-default-user term-ansi-at-save-user)
                    (setq ange-ftp-default-password term-ansi-at-save-pwd)
                    (setq ange-ftp-generate-anonymous-password term-ansi-at-save-anon))
                (setq term-ansi-at-save-user ange-ftp-default-user)
                (setq term-ansi-at-save-pwd ange-ftp-default-password)
                (setq term-ansi-at-save-anon ange-ftp-generate-anonymous-password)
                (setq ange-ftp-default-user nil)
                (setq ange-ftp-default-password nil)
                (setq ange-ftp-generate-anonymous-password nil)))))
        ;; If there is a partial message at the end of the string, store it
        ;; for future use.
        (when (string-match "\eAnSiT.+$" message)
          (setq term-partial-ansi-terminal-message (match-string 0 message))
          (setq message (replace-match "" t t message)))
        message)))
   #+END_SRC

** yadm
   #+BEGIN_SRC emacs-lisp
(use-package magit
  :commands yadm-magit-status
  :defer t
  :config
  (after! tramp
    (add-to-list 'tramp-methods
                 '("yadm"
                   (tramp-login-program "yadm")
                   (tramp-login-args (("enter")))
                   (tramp-login-env
                    (("SHELL")
                     ("/bin/bash")))
                   (tramp-remote-shell "/bin/sh")
                   (tramp-remote-shell-args ("-c"))
                   (tramp-connection-timeout 10))))
  (defconst yadm-original-shell-name
    (getenv "SHELL")
    "Original environment variable SHELL")

  (defun yadm-fix-env (&rest _)
    (setenv "SHELL" yadm-original-shell-name)
    (advice-remove #'+term/toggle #'yadm-fix-env)
    (advice-remove #'+eshell/toggle #'yadm-fix-env))

  (defun yadm-magit-status ()
    (interactive)
    (let ((magit-mode-hook
           (-cons*
            (lambda () (projectile-mode -1))
            (lambda () (when (fboundp #'magit-todos-mode) (magit-todos-mode -1)))
            magit-mode-hook)))
      ;; to fix zsh incompatibility with yadm and tramp
      (setenv "SHELL" "/bin/bash")
      (advice-add #'+term/toggle :before #'yadm-fix-env)
      (advice-add #'+term/shell :before #'yadm-fix-env)
      (magit-status "/yadm::"))))
   #+END_SRC

* Projectile
  #+BEGIN_SRC emacs-lisp
    (after! projectile
      (setq projectile-mode-line
            '(:eval (format " Projectile[%s(%s)]"
                            (projectile-project-name)))
            shell-file-name "/bin/sh"
            projectile-enable-caching t
            projectile-file-exists-remote-cache-expire nil))
  #+END_SRC

* Debug
** undo-tree
   #+BEGIN_SRC emacs-lisp
     (yang/with-doom
         (use-package undo-tree
           ; :after-call doom-switch-buffer-hook after-find-file
           :defer t
           :config
           (setq undo-tree-auto-save-history t
                 undo-tree-enable-undo-in-region nil
                 undo-tree-history-directory-alist
                 `(("." .
                    ,(concat yang/dotemacs-dir ".cache/undo-tree/")))
                 )))

     (setq undo-tree-auto-save-history t
           undo-tree-enable-undo-in-region nil
           undo-tree-history-directory-alist
           `(("." .
              ,(concat yang/dotemacs-dir ".cache/undo-tree/")))
           undo-tree--debug 30)

     ;; (when (string= system-name "carbon")
     ;;   (load "~/git/undo-tree/undo-tree.el"))
   #+END_SRC

* Semantic
  #+BEGIN_SRC emacs-lisp
(use-package semantic
  :defer t
  :commands (yang/rescan-emacs-semantic-files
             yang/rescan-c++-semantic-files
             yang/rescan-rescan-directory)
  :config
  (defun yang/rescan-emacs-semantic-files ()
    (interactive)
    (mapc #'semantic-rescan-directory
          '("/usr/share/emacs/"
            "~/.emacs.d/core/"
            "~/.emacs.d/elpa/"
            "~/.emacs.d/layers/")))

  (defun yang/rescan-c++-semantic-files ()
    (interactive)
    (semantic-rescan-directory "/usr/include/c++/" ".*"))

  (defun semantic-rescan-directory (dir &optional regex)
    (interactive "D")
    (message "Scanning directory %s." dir)
    (semanticdb-rescan-directory-1 (expand-file-name dir)) regex)

  (cl-defun semanticdb-rescan-directory-1 (pathname &optional (file-regex ".*\\.\\(el\\|el.gz\\|h\\|hpp\\|tcc\\)$"))
    (let* ((root (file-name-as-directory pathname))
           (files (directory-files root t ))
           (dotspacemacs-large-file-size 50))
      (message "regex is %s" file-regex)
      (setq files (delete (format "%s." root) files))
      (setq files (delete (format "%s.." root) files))
      (while files
        (setq file (pop files))
        (if (not (file-accessible-directory-p file))
            ;;if it's a file that matches the regex we seek
            (progn (when (string-match-p file-regex file)
                     (save-excursion
                       (message "Parsing %s file." file)
                       (ignore-errors
                         ;; (semanticdb-create-table-for-file-not-in-buffer file)
                         (semanticdb-file-table-object file t)))
                     ))
          ;;else if it's a directory
          (semanticdb-rescan-directory-1 file file-regex)))))

  (add-hook 'semantic-mode-hook
            (lambda ()
              (dolist (x (default-value 'completion-at-point-functions))
                (when (string-prefix-p "semantic-" (symbol-name x))
                  (remove-hook 'completion-at-point-functions x))))))
  #+END_SRC

* c++
  #+BEGIN_SRC emacs-lisp
    (add-hook 'c-mode-common-hook
              (lambda ()
                (rainbow-mode -1)))
  #+END_SRC

* neo-tree
  #+BEGIN_SRC emacs-lisp
(after! neo-tree
  ;; use fancy icons
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
  #+END_SRC

* persp-mode

** ibuffer for current layout
   Use =<leader> b l= to show all buffers in current perspective
   #+BEGIN_SRC emacs-lisp
     (use-package persp-mode
       :defer t
       :after ibuffer
       :config
       (yang/set-leader-key "b l"
         (lambda (arg)
             (interactive "P")
             (with-persp-buffer-list () (ibuffer arg)))))

     (with-eval-after-load 'ibuffer
       (define-ibuffer-op ibuffer-do-remove-persp ()
         "Remove marked buffers from current persp."
         (:opstring "removed from current persp"
                    :active-opstring "remove from current persp"
                    :dangerous t
                    :complex t
                    :modifier-p t)
         (if (persp-remove-buffer buf)
             'kill
           nil))

       (define-key ibuffer-mode-map (kbd "R") 'ibuffer-do-remove-persp))

     (setq persp-emacsclient-init-frame-behaviour-override nil
           persp-init-new-frame-behaviour-override -1)
   #+END_SRC

** Switch to the first persp when loading from file
   #+BEGIN_SRC emacs-lisp
     (use-package persp-mode
       :defer t
       :config
       (defun yang-persp-switch-to-persp-after-load (persp-list)
         (message "come to my switch to persp")
         (let ((persp-name (car persp-list)))
           (when persp-name
             (persp-switch persp-name))))
       (advice-add 'persp-load-state-from-file :filter-return 'yang-persp-switch-to-persp-after-load))
   #+END_SRC

* Ledger
#+BEGIN_SRC emacs-lisp
(use-package ledger-mode
  :mode "\\.ledger\\'"
  :defer t
  :config
  (add-hook 'ledger-mode (lambda () (variable-pitch-mode -1)))
  (setq ledger-amount-regex
        (concat "\\(  \\|\t\\| \t\\)[ \t]*-?"
                "\\([A-Z$€£₹¥_(]+ *\\)?"
                ;; We either match just a number after the commodity with no
                ;; decimal or thousand separators or a number with thousand
                ;; separators.  If we have a decimal part starting with `,'
                ;; or `.', because the match is non-greedy, it must leave at
                ;; least one of those symbols for the following capture
                ;; group, which then finishes the decimal part.
                "\\(-?\\(?:[0-9]+\\|[0-9,.]+?\\)\\)"
                "\\([,.][0-9)]+\\)?"
                "\\( *[[:word:]€£₹¥_\"]+\\)?"
                "\\([ \t]*[@={]@?[^\n;]+?\\)?"
                "\\([ \t]+;.+?\\|[ \t]*\\)?$")
        ledger-reconcile-insert-effective-date t)
  (yang/with-doom
    (set-company-backend! 'ledger-mode
      #'ledger-complete-at-point #'company-capf)
    (general-def
      :keymaps 'ledger-mode-map
      :states 'normal
      :prefix "SPC m"
      "hd" 'ledger-delete-current-transaction
      "a" 'ledger-add-transaction
      "b" 'ledger-post-edit-amount
      "c" 'ledger-toggle-current-posting
      "C" 'ledger-mode-clean-buffer
      "l" 'ledger-display-ledger-stats
      "p" 'ledger-display-balance-at-point
      "q" 'ledger-post-align-xact
      "r" 'ledger-reconcile
      "R" 'ledger-report
      "t" 'ledger-insert-effective-date)
    (general-def
      :keymaps 'ledger-reconcile-mode-map
      :states 'normal
      "," nil ;'ledger-reconcile-toggle-posting
      "TAB" 'ledger-reconcile-toggle
      "a" 'ledger-reconcile-add
      "q" 'ledger-reconcile-quit
      "t" 'ledger-reconcile-change-target
      "RET" 'ledger-reconcile-finish)))
#+END_SRC

* Beancount
#+BEGIN_SRC emacs-lisp
(yang/with-doom
  (add-to-list 'load-path "~/.emacs.d/.local/straight/repos/beancount/editors/emacs")
  (use-package beancount
    :mode ("\\.beancount\\'" . beancount-mode)
    :defer t))
#+END_SRC

* helpful
  #+BEGIN_SRC emacs-lisp
    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    (use-package helpful
      :defer t
      :init
      ;; (global-set-key (kbd "C-h f") #'helpful-callable)
      (setq counsel-describe-function-function #'helpful-callable)
      ;; (global-set-key (kbd "C-h v") #'helpful-variable)
      (setq counsel-describe-variable-function #'helpful-variable)
      :bind (("C-h k" . helpful-key)
             ;; Look up *F*unctions (excludes macros).
             ;;
             ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
             ;; already links to the manual, if a function is referenced there.
             ("C-h F" . helpful-function)
             ;; Look up *C*ommands.
             ;;
             ;; By default, C-h C is bound to describe `describe-coding-system'. I
             ;; don't find this very useful, but it's frequently useful to only
             ;; look at interactive functions.
             ("C-h C" . helpful-command)))
  #+END_SRC

* telega
#+BEGIN_SRC emacs-lisp
(general-def
        :keymaps 'telega-msg-button-map
        "k" nil
        "n" nil)
#+END_SRC

* auto-highlight-symbol (ahs)
  #+BEGIN_SRC emacs-lisp
(after! ahs
  (setq
   ahs-case-fold-search nil
   ahs-default-range 'ahs-range-whole-buffer
   ahs-idle-interval 0.25
   ahs-idle-timer 0
   ahs-inhibit-face-list nil))
  #+END_SRC

* misc
** Migrating to org-ref
   #+begin_src emacs-lisp
(after! org
  (defun yang/move-pdf-to-archive ()
    (interactive)
    (save-excursion
      (save-restriction
        (org-narrow-to-subtree)
        (goto-char (point-min))
        (while (char-equal ?* (following-char))
          (forward-char))
        (while (char-equal ?  (following-char))
          (forward-char))
        (let* ((ele (org-element-context))
               (path (org-element-property :path ele))
               (name (buffer-substring (org-element-property :contents-begin ele)
                                       (org-element-property :contents-end ele)))
               (dest-dir org-ref-pdf-directory)
               filename
               beg end)
          (setq path (s-replace-regexp (rx "::" (one-or-more digit)) "" path))
          (save-excursion
            (search-forward "cite:")
            (setq beg (point))
            (end-of-line)
            (setq end (point))
            (setq filename (buffer-substring beg end))
            )
          (message "path is -%s-, name is -%s-, filename is -%s-" path name filename)
          (when (f-exists-p path)
            (f-move path (concat dest-dir filename ".pdf"))
            (kill-line)
            (insert name)))))))
(after! bibtex
  ;; fix doom force setting of bibtex-dialect to biblatex
  (when (not (eq bibtex-dialect 'BibTeX))
    (bibtex-set-dialect 'BibTeX))
  (defun yang/parse-authors ()
    (interactive)
    (save-excursion
      (let* ((beg (progn (move-beginning-of-line 1)
                         (point)))
             (end (progn (move-end-of-line 1)
                         (point)))
             (line-string (buffer-substring beg end))
             (new-string (s-join
                          ", "
                          (mapcar (lambda (ss)
                                    (let ((first)
                                          (last)
                                          (name (s-split "," ss)))
                                      (setq first (s-trim (nth 1 name))
                                            last (s-trim (nth 0 name)))
                                      (format "%s %s" first last)))
                                  (s-with line-string
                                    s-trim
                                    (s-chop-prefix "author")
                                    s-trim-left
                                    (s-chop-prefix "=")
                                    s-trim-left
                                    (s-chop-prefix "{")
                                    (s-chop-suffix "},")
                                    (s-split " and "))
                                  ))))
        (move-beginning-of-line 1)
        (kill-region beg end)
        (message "new-string %s" new-string)
        (insert (format ":author: %s" new-string))))))
   #+end_src

* COMMENT Slack
#+begin_src emacs-lisp
(use-package slack
  :commands (slack-start)
  :init
  (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
  (setq slack-prefer-current-team t)
  :config
  (slack-register-team
   :name "northwestern"
   :default t
   :client-id "2b034370.1570679104"
   ;; :client-secret "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
   :token "xoxc-443491407444-691859362469-732785502464-fa7e39ef91c01e980cc783afea36f506371c02afd119a970cb79ff05a3a5d718"
   ;; :subscribed-channels '(test-rename rrrrr)
   :full-and-display-names t)

  ;; (slack-register-team
  ;;  :name "test"
  ;;  :client-id "3333333333.77777777777"
  ;;  :client-secret "cccccccccccccccccccccccccccccccc"
  ;;  :token "xoxs-yyyyyyyyyy-zzzzzzzzzzz-hhhhhhhhhhh-llllllllll"
  ;;  :subscribed-channels '(hoge fuga))

  (evil-define-key 'normal slack-info-mode-map
    ",u" 'slack-room-update-messages)
  (evil-define-key 'normal slack-mode-map
    ",c" 'slack-buffer-kill
    ",ra" 'slack-message-add-reaction
    ",rr" 'slack-message-remove-reaction
    ",rs" 'slack-message-show-reaction-users
    ",pl" 'slack-room-pins-list
    ",pa" 'slack-message-pins-add
    ",pr" 'slack-message-pins-remove
    ",mm" 'slack-message-write-another-buffer
    ",me" 'slack-message-edit
    ",md" 'slack-message-delete
    ",u" 'slack-room-update-messages
    ",2" 'slack-message-embed-mention
    ",3" 'slack-message-embed-channel
    "\C-n" 'slack-buffer-goto-next-message
    "\C-p" 'slack-buffer-goto-prev-message)
   (evil-define-key 'normal slack-edit-message-mode-map
    ",k" 'slack-message-cancel-edit
    ",s" 'slack-message-send-from-buffer
    ",2" 'slack-message-embed-mention
    ",3" 'slack-message-embed-channel))

(use-package alert
  :commands (alert)
  :init
  (setq alert-default-style 'notifier))
#+end_src

* Helm (legacy)
  #+BEGIN_SRC emacs-lisp
(after! helm ;; fix problem with open-junk-file
  (defun remove-helm-functions ()
    (remove-hook 'post-command-hook 'helm--maybe-update-keymap)
    ;; 2015-07-01 The following function was also remaining in the hook.
    ;; This hook was added 14 days ago coinciding breakage.
    ;; https://github.com/emacs-helm/helm/commit/ff7c54d39501d894fdb06e049828b291327540e6
    (remove-hook 'post-command-hook 'helm--update-header-line))



  ;;
  ;; 2015-07-01
  ;; This function itself is not remaining in the post-command-hook?
  ;;
  ;; Candidate hooks for making this happen.
  ;; server-done-hook	Hook run when done editing a buffer for the Emacs server.
  ;; server-mode-hook	Hook run after entering or leaving `server-mode'.
  ;; server-switch-hook	Hook run when switching to a buffer for the Emacs server.
  ;; server-visit-hook	Hook run when visiting a file for the Emacs server.
  ;;
  ;; (add-hook 'server-done-hook   'remove-helm--maybe-update-keymap)
  ;; (add-hook 'server-mode-hook   'remove-helm--maybe-update-keymap)
  ;; (add-hook 'server-switch-hook 'remove-helm--maybe-update-keymap)
  ;; (add-hook 'server-visit-hook  'remove-helm--maybe-update-keymap)
  ;;
  ;; This hacky universal solution works.
  ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Command-Overview.html#Command-Overview
  ;; (add-hook 'post-command-hook 'remove-helm-functions)
  ;; 2015-07-01 Changed to the following.
  (add-hook 'pre-command-hook 'remove-helm-functions))
  #+END_SRC

* to be structured
#+BEGIN_SRC emacs-lisp
   ;; (spacemacs/toggle-truncate-lines-on)
   ;; (defadvice preceding-sexp (around evil)
   ;;   "In normal-state, last sexp ends at point."
   ;;   (if (evil-normal-state-p)
   ;;       (save-excursion
   ;;         (unless (or (eobp) (eolp)) (forward-char))
   ;;         ad-do-it)
   ;;     ad-do-it))
   ;; (defadvice pp-last-sexp (around evil)
   ;;   "In normal-state, last sexp ends at point."
   ;;   (if (evil-normal-state-p)
   ;;       (save-excursion
   ;;         (unless (or (eobp) (eolp)) (forward-char))
   ;;         ad-do-it)
   ;;     ad-do-it))
   ;; to search across line breaks

   ;; move most custom variables here
   (setq
    paradox-automatically-star nil
    ;; preview-default-option-list '("displaymath"
    ;;                               "floats"
    ;;                               "graphics"
    ;;                               "textmath"
    ;;                               "sections"
    ;;                               "showlabels"
    ;;                               "sectio") ; seems broken
    ;; preview-gs-options '("-q" "-dDELAYSAFER" "-dNOPAUSE" "-DNOPLATFONTS" "-dPrinted" "-dTextAlphaBits=4" "-dGraphicsAlphaBits=4") ; seems the same as default
    )

#+END_SRC
